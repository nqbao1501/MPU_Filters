
digital_low_pass_filter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ca4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a8  08009e38  08009e38  0000ae38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5e0  0800a5e0  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5e0  0800a5e0  0000b5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5e8  0800a5e8  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5e8  0800a5e8  0000b5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a5ec  0800a5ec  0000b5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a5f0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d8  2**0
                  CONTENTS
 10 .bss          0000048c  200001d8  200001d8  0000c1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000664  20000664  0000c1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010ecf  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000247b  00000000  00000000  0001d0d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  0001f558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cde  00000000  00000000  000205b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000226d7  00000000  00000000  0002128e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000137f6  00000000  00000000  00043965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d03d4  00000000  00000000  0005715b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012752f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059ec  00000000  00000000  00127574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  0012cf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e1c 	.word	0x08009e1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08009e1c 	.word	0x08009e1c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <IIR_Filter_1D_Init>:


#include "iir_low_pass_filter.h"
void IIR_Filter_1D_Init(IIR_Filter_1D *f, float alpha, float beta){
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f44:	edc7 0a01 	vstr	s1, [r7, #4]
    f->alpha = alpha;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	601a      	str	r2, [r3, #0]
    f->beta = beta;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	605a      	str	r2, [r3, #4]
    f->prev_input = 0.0f;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
    f->prev_output = 0.0f;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <IIR_Filter_1D_Update>:
float IIR_Filter_1D_Update(IIR_Filter_1D *f, float input){
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	ed87 0a00 	vstr	s0, [r7]
    float output = f->alpha * f->prev_output + f->beta * input + f->beta * f->prev_input;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	ed93 7a00 	vldr	s14, [r3]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f92:	edd7 7a00 	vldr	s15, [r7]
 8000f96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000faa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fb2:	edc7 7a03 	vstr	s15, [r7, #12]
    f->prev_input = input;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	60da      	str	r2, [r3, #12]
    f->prev_output = output;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	609a      	str	r2, [r3, #8]
    return output;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	ee07 3a90 	vmov	s15, r3
}
 8000fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <IIR_Filter_3D_Init>:
void IIR_Filter_3D_Init(IIR_Filter_3D *f, float alpha, float beta){
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60f8      	str	r0, [r7, #12]
 8000fde:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fe2:	edc7 0a01 	vstr	s1, [r7, #4]
	IIR_Filter_1D_Init(&f->x, alpha, beta);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	edd7 0a01 	vldr	s1, [r7, #4]
 8000fec:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ffa1 	bl	8000f38 <IIR_Filter_1D_Init>
	IIR_Filter_1D_Init(&f->y, alpha, beta);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	3310      	adds	r3, #16
 8000ffa:	edd7 0a01 	vldr	s1, [r7, #4]
 8000ffe:	ed97 0a02 	vldr	s0, [r7, #8]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ff98 	bl	8000f38 <IIR_Filter_1D_Init>
	IIR_Filter_1D_Init(&f->z, alpha, beta);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3320      	adds	r3, #32
 800100c:	edd7 0a01 	vldr	s1, [r7, #4]
 8001010:	ed97 0a02 	vldr	s0, [r7, #8]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff8f 	bl	8000f38 <IIR_Filter_1D_Init>
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <IIR_Filter_3D_Update>:
void IIR_Filter_3D_Update(IIR_Filter_3D *f, float x_in, float y_in, float z_in, float *x_out, float *y_out, float *z_out){
 8001022:	b580      	push	{r7, lr}
 8001024:	b088      	sub	sp, #32
 8001026:	af00      	add	r7, sp, #0
 8001028:	61f8      	str	r0, [r7, #28]
 800102a:	ed87 0a06 	vstr	s0, [r7, #24]
 800102e:	edc7 0a05 	vstr	s1, [r7, #20]
 8001032:	ed87 1a04 	vstr	s2, [r7, #16]
 8001036:	60f9      	str	r1, [r7, #12]
 8001038:	60ba      	str	r2, [r7, #8]
 800103a:	607b      	str	r3, [r7, #4]
    *x_out = IIR_Filter_1D_Update(&f->x, x_in);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	ed97 0a06 	vldr	s0, [r7, #24]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff94 	bl	8000f70 <IIR_Filter_1D_Update>
 8001048:	eef0 7a40 	vmov.f32	s15, s0
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	edc3 7a00 	vstr	s15, [r3]
    *y_out = IIR_Filter_1D_Update(&f->y, y_in);
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3310      	adds	r3, #16
 8001056:	ed97 0a05 	vldr	s0, [r7, #20]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff88 	bl	8000f70 <IIR_Filter_1D_Update>
 8001060:	eef0 7a40 	vmov.f32	s15, s0
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	edc3 7a00 	vstr	s15, [r3]
    *z_out = IIR_Filter_1D_Update(&f->z, z_in);
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3320      	adds	r3, #32
 800106e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff7c 	bl	8000f70 <IIR_Filter_1D_Update>
 8001078:	eef0 7a40 	vmov.f32	s15, s0
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	edc3 7a00 	vstr	s15, [r3]
}
 8001082:	bf00      	nop
 8001084:	3720      	adds	r7, #32
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_UART_TxCpltCallback>:
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
// Ensure you also have your UART DMA callback implemented:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a05      	ldr	r2, [pc, #20]	@ (80010b0 <HAL_UART_TxCpltCallback+0x24>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d102      	bne.n	80010a4 <HAL_UART_TxCpltCallback+0x18>
    {
        uart_dma_tx_ready_flag = 1;
 800109e:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <HAL_UART_TxCpltCallback+0x28>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
    }
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	40004400 	.word	0x40004400
 80010b4:	20000000 	.word	0x20000000

080010b8 <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    if (hi2c == mpu.i2cHandle) {
 80010c0:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <HAL_I2C_MemRxCpltCallback+0x28>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d103      	bne.n	80010d2 <HAL_I2C_MemRxCpltCallback+0x1a>
        mpu.data_ready_flag = true;
 80010ca:	4b05      	ldr	r3, [pc, #20]	@ (80010e0 <HAL_I2C_MemRxCpltCallback+0x28>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

    }
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000460 	.word	0x20000460

080010e4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a09      	ldr	r2, [pc, #36]	@ (8001118 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d10b      	bne.n	800110e <HAL_TIM_PeriodElapsedCallback+0x2a>
    {
        if (mpu.data_ready_flag == 0)
 80010f6:	4b09      	ldr	r3, [pc, #36]	@ (800111c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80010f8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	f083 0301 	eor.w	r3, r3, #1
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d002      	beq.n	800110e <HAL_TIM_PeriodElapsedCallback+0x2a>
        {
            MPU6050_Start_DMA(&mpu);
 8001108:	4804      	ldr	r0, [pc, #16]	@ (800111c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800110a:	f000 fb68 	bl	80017de <MPU6050_Start_DMA>
        }
    }
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40010000 	.word	0x40010000
 800111c:	20000460 	.word	0x20000460

08001120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001120:	b5b0      	push	{r4, r5, r7, lr}
 8001122:	ed2d 8b02 	vpush	{d8}
 8001126:	b088      	sub	sp, #32
 8001128:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112a:	f000 fef1 	bl	8001f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112e:	f000 f9c7 	bl	80014c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001132:	f000 faff 	bl	8001734 <MX_GPIO_Init>
  MX_DMA_Init();
 8001136:	f000 fad5 	bl	80016e4 <MX_DMA_Init>
  MX_I2C1_Init();
 800113a:	f000 fa2b 	bl	8001594 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800113e:	f000 faa7 	bl	8001690 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001142:	f000 fa55 	bl	80015f0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  IIR_Filter_3D_Init(&acc_filtered, IIR_ACC_ALPHA, IIR_ACC_BETA);
 8001146:	eddf 0ac8 	vldr	s1, [pc, #800]	@ 8001468 <main+0x348>
 800114a:	ed9f 0ac8 	vldr	s0, [pc, #800]	@ 800146c <main+0x34c>
 800114e:	48c8      	ldr	r0, [pc, #800]	@ (8001470 <main+0x350>)
 8001150:	f7ff ff41 	bl	8000fd6 <IIR_Filter_3D_Init>
  IIR_Filter_3D_Init(&gyro_filtered, IIR_GYR_ALPHA, IIR_GYR_BETA);
 8001154:	eddf 0ac7 	vldr	s1, [pc, #796]	@ 8001474 <main+0x354>
 8001158:	ed9f 0ac7 	vldr	s0, [pc, #796]	@ 8001478 <main+0x358>
 800115c:	48c7      	ldr	r0, [pc, #796]	@ (800147c <main+0x35c>)
 800115e:	f7ff ff3a 	bl	8000fd6 <IIR_Filter_3D_Init>
  MPU6050_Init(&mpu, &hi2c1);
 8001162:	49c7      	ldr	r1, [pc, #796]	@ (8001480 <main+0x360>)
 8001164:	48c7      	ldr	r0, [pc, #796]	@ (8001484 <main+0x364>)
 8001166:	f000 fb13 	bl	8001790 <MPU6050_Init>
  MPU6050_Start_DMA(&mpu);
 800116a:	48c6      	ldr	r0, [pc, #792]	@ (8001484 <main+0x364>)
 800116c:	f000 fb37 	bl	80017de <MPU6050_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 8001170:	48c5      	ldr	r0, [pc, #788]	@ (8001488 <main+0x368>)
 8001172:	f003 fb4d 	bl	8004810 <HAL_TIM_Base_Start_IT>
  mpu.data_ready_flag = true;
 8001176:	4bc3      	ldr	r3, [pc, #780]	@ (8001484 <main+0x364>)
 8001178:	2201      	movs	r2, #1
 800117a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (mpu.data_ready_flag){
 800117e:	4bc1      	ldr	r3, [pc, #772]	@ (8001484 <main+0x364>)
 8001180:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f9      	beq.n	800117e <main+0x5e>
		  mpu.data_ready_flag = false;
 800118a:	4bbe      	ldr	r3, [pc, #760]	@ (8001484 <main+0x364>)
 800118c:	2200      	movs	r2, #0
 800118e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		  MPU6050_Process_DMA(&mpu);
 8001192:	48bc      	ldr	r0, [pc, #752]	@ (8001484 <main+0x364>)
 8001194:	f000 fb38 	bl	8001808 <MPU6050_Process_DMA>

		  /*Loc thong thap */
		  IIR_Filter_3D_Update(&acc_filtered, mpu.acc[0], mpu.acc[1], mpu.acc[2], &acc_x, &acc_y, &acc_z);
 8001198:	4bba      	ldr	r3, [pc, #744]	@ (8001484 <main+0x364>)
 800119a:	edd3 7a01 	vldr	s15, [r3, #4]
 800119e:	4bb9      	ldr	r3, [pc, #740]	@ (8001484 <main+0x364>)
 80011a0:	ed93 7a02 	vldr	s14, [r3, #8]
 80011a4:	4bb7      	ldr	r3, [pc, #732]	@ (8001484 <main+0x364>)
 80011a6:	edd3 6a03 	vldr	s13, [r3, #12]
 80011aa:	4bb8      	ldr	r3, [pc, #736]	@ (800148c <main+0x36c>)
 80011ac:	4ab8      	ldr	r2, [pc, #736]	@ (8001490 <main+0x370>)
 80011ae:	49b9      	ldr	r1, [pc, #740]	@ (8001494 <main+0x374>)
 80011b0:	eeb0 1a66 	vmov.f32	s2, s13
 80011b4:	eef0 0a47 	vmov.f32	s1, s14
 80011b8:	eeb0 0a67 	vmov.f32	s0, s15
 80011bc:	48ac      	ldr	r0, [pc, #688]	@ (8001470 <main+0x350>)
 80011be:	f7ff ff30 	bl	8001022 <IIR_Filter_3D_Update>
		  IIR_Filter_3D_Update(&gyro_filtered, mpu.gyro[0], mpu.gyro[1], mpu.gyro[2], &gyro_p, &gyro_q, &gyro_r);
 80011c2:	4bb0      	ldr	r3, [pc, #704]	@ (8001484 <main+0x364>)
 80011c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80011c8:	4bae      	ldr	r3, [pc, #696]	@ (8001484 <main+0x364>)
 80011ca:	ed93 7a05 	vldr	s14, [r3, #20]
 80011ce:	4bad      	ldr	r3, [pc, #692]	@ (8001484 <main+0x364>)
 80011d0:	edd3 6a06 	vldr	s13, [r3, #24]
 80011d4:	4bb0      	ldr	r3, [pc, #704]	@ (8001498 <main+0x378>)
 80011d6:	4ab1      	ldr	r2, [pc, #708]	@ (800149c <main+0x37c>)
 80011d8:	49b1      	ldr	r1, [pc, #708]	@ (80014a0 <main+0x380>)
 80011da:	eeb0 1a66 	vmov.f32	s2, s13
 80011de:	eef0 0a47 	vmov.f32	s1, s14
 80011e2:	eeb0 0a67 	vmov.f32	s0, s15
 80011e6:	48a5      	ldr	r0, [pc, #660]	@ (800147c <main+0x35c>)
 80011e8:	f7ff ff1b 	bl	8001022 <IIR_Filter_3D_Update>

		  /*Estimate phi va theta bang acc */
		  float rollHat_acc_rad = atan2f(acc_y, acc_z);
 80011ec:	4ba8      	ldr	r3, [pc, #672]	@ (8001490 <main+0x370>)
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	4ba6      	ldr	r3, [pc, #664]	@ (800148c <main+0x36c>)
 80011f4:	ed93 7a00 	vldr	s14, [r3]
 80011f8:	eef0 0a47 	vmov.f32	s1, s14
 80011fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001200:	f007 fdea 	bl	8008dd8 <atan2f>
 8001204:	ed87 0a05 	vstr	s0, [r7, #20]
		  float pitchHat_acc_rad = atan2f(-acc_x, sqrtf(acc_y * acc_y + acc_z * acc_z));
 8001208:	4ba2      	ldr	r3, [pc, #648]	@ (8001494 <main+0x374>)
 800120a:	edd3 7a00 	vldr	s15, [r3]
 800120e:	eeb1 8a67 	vneg.f32	s16, s15
 8001212:	4b9f      	ldr	r3, [pc, #636]	@ (8001490 <main+0x370>)
 8001214:	ed93 7a00 	vldr	s14, [r3]
 8001218:	4b9d      	ldr	r3, [pc, #628]	@ (8001490 <main+0x370>)
 800121a:	edd3 7a00 	vldr	s15, [r3]
 800121e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001222:	4b9a      	ldr	r3, [pc, #616]	@ (800148c <main+0x36c>)
 8001224:	edd3 6a00 	vldr	s13, [r3]
 8001228:	4b98      	ldr	r3, [pc, #608]	@ (800148c <main+0x36c>)
 800122a:	edd3 7a00 	vldr	s15, [r3]
 800122e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001236:	eeb0 0a67 	vmov.f32	s0, s15
 800123a:	f007 fdcf 	bl	8008ddc <sqrtf>
 800123e:	eef0 7a40 	vmov.f32	s15, s0
 8001242:	eef0 0a67 	vmov.f32	s1, s15
 8001246:	eeb0 0a48 	vmov.f32	s0, s16
 800124a:	f007 fdc5 	bl	8008dd8 <atan2f>
 800124e:	ed87 0a04 	vstr	s0, [r7, #16]

		  /*Toc do thay doi phi va theta bang gyr */
		  float rollDot_gyr_rps = (gyro_p + tanf(pitchHat_acc_rad) * sinf(rollHat_acc_rad) * gyro_q + tanf(pitchHat_acc_rad) * cosf(rollHat_acc_rad) * gyro_r) * (M_PI / 180.0f);
 8001252:	ed97 0a04 	vldr	s0, [r7, #16]
 8001256:	f007 fe69 	bl	8008f2c <tanf>
 800125a:	eeb0 8a40 	vmov.f32	s16, s0
 800125e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001262:	f007 fe1d 	bl	8008ea0 <sinf>
 8001266:	eef0 7a40 	vmov.f32	s15, s0
 800126a:	ee28 7a27 	vmul.f32	s14, s16, s15
 800126e:	4b8b      	ldr	r3, [pc, #556]	@ (800149c <main+0x37c>)
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001278:	4b89      	ldr	r3, [pc, #548]	@ (80014a0 <main+0x380>)
 800127a:	edd3 7a00 	vldr	s15, [r3]
 800127e:	ee37 8a27 	vadd.f32	s16, s14, s15
 8001282:	ed97 0a04 	vldr	s0, [r7, #16]
 8001286:	f007 fe51 	bl	8008f2c <tanf>
 800128a:	eef0 8a40 	vmov.f32	s17, s0
 800128e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001292:	f007 fdc1 	bl	8008e18 <cosf>
 8001296:	eef0 7a40 	vmov.f32	s15, s0
 800129a:	ee28 7aa7 	vmul.f32	s14, s17, s15
 800129e:	4b7e      	ldr	r3, [pc, #504]	@ (8001498 <main+0x378>)
 80012a0:	edd3 7a00 	vldr	s15, [r3]
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80012ac:	ee17 0a90 	vmov	r0, s15
 80012b0:	f7ff f94a 	bl	8000548 <__aeabi_f2d>
 80012b4:	a364      	add	r3, pc, #400	@ (adr r3, 8001448 <main+0x328>)
 80012b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ba:	f7ff f99d 	bl	80005f8 <__aeabi_dmul>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fc6f 	bl	8000ba8 <__aeabi_d2f>
 80012ca:	4603      	mov	r3, r0
 80012cc:	60fb      	str	r3, [r7, #12]
		  float pitchDot_gyr_rps = (cosf(rollHat_acc_rad) * gyro_q - sinf(rollHat_acc_rad) * gyro_r) * (M_PI / 180.0f);
 80012ce:	ed97 0a05 	vldr	s0, [r7, #20]
 80012d2:	f007 fda1 	bl	8008e18 <cosf>
 80012d6:	eeb0 7a40 	vmov.f32	s14, s0
 80012da:	4b70      	ldr	r3, [pc, #448]	@ (800149c <main+0x37c>)
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80012e4:	ed97 0a05 	vldr	s0, [r7, #20]
 80012e8:	f007 fdda 	bl	8008ea0 <sinf>
 80012ec:	eeb0 7a40 	vmov.f32	s14, s0
 80012f0:	4b69      	ldr	r3, [pc, #420]	@ (8001498 <main+0x378>)
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fa:	ee78 7a67 	vsub.f32	s15, s16, s15
 80012fe:	ee17 0a90 	vmov	r0, s15
 8001302:	f7ff f921 	bl	8000548 <__aeabi_f2d>
 8001306:	a350      	add	r3, pc, #320	@ (adr r3, 8001448 <main+0x328>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f974 	bl	80005f8 <__aeabi_dmul>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fc46 	bl	8000ba8 <__aeabi_d2f>
 800131c:	4603      	mov	r3, r0
 800131e:	60bb      	str	r3, [r7, #8]

		  rollHat_rad = (1.0f - COMP_ALPHA) * rollHat_acc_rad +
 8001320:	6978      	ldr	r0, [r7, #20]
 8001322:	f7ff f911 	bl	8000548 <__aeabi_f2d>
 8001326:	a34a      	add	r3, pc, #296	@ (adr r3, 8001450 <main+0x330>)
 8001328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132c:	f7ff f964 	bl	80005f8 <__aeabi_dmul>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4614      	mov	r4, r2
 8001336:	461d      	mov	r5, r3
				  	  	COMP_ALPHA * (rollHat_rad + rollDot_gyr_rps * 0.001f );
 8001338:	edd7 7a03 	vldr	s15, [r7, #12]
 800133c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80014a4 <main+0x384>
 8001340:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001344:	4b58      	ldr	r3, [pc, #352]	@ (80014a8 <main+0x388>)
 8001346:	edd3 7a00 	vldr	s15, [r3]
 800134a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134e:	ee17 0a90 	vmov	r0, s15
 8001352:	f7ff f8f9 	bl	8000548 <__aeabi_f2d>
 8001356:	a340      	add	r3, pc, #256	@ (adr r3, 8001458 <main+0x338>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	f7ff f94c 	bl	80005f8 <__aeabi_dmul>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
		  rollHat_rad = (1.0f - COMP_ALPHA) * rollHat_acc_rad +
 8001364:	4620      	mov	r0, r4
 8001366:	4629      	mov	r1, r5
 8001368:	f7fe ff90 	bl	800028c <__adddf3>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	f7ff fc18 	bl	8000ba8 <__aeabi_d2f>
 8001378:	4603      	mov	r3, r0
 800137a:	4a4b      	ldr	r2, [pc, #300]	@ (80014a8 <main+0x388>)
 800137c:	6013      	str	r3, [r2, #0]
		  pitchHat_rad = (1.0f - COMP_ALPHA) * pitchHat_acc_rad +
 800137e:	6938      	ldr	r0, [r7, #16]
 8001380:	f7ff f8e2 	bl	8000548 <__aeabi_f2d>
 8001384:	a332      	add	r3, pc, #200	@ (adr r3, 8001450 <main+0x330>)
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	f7ff f935 	bl	80005f8 <__aeabi_dmul>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4614      	mov	r4, r2
 8001394:	461d      	mov	r5, r3
				  	  	COMP_ALPHA * (pitchHat_rad + pitchDot_gyr_rps * 0.001f );
 8001396:	edd7 7a02 	vldr	s15, [r7, #8]
 800139a:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80014a4 <main+0x384>
 800139e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013a2:	4b42      	ldr	r3, [pc, #264]	@ (80014ac <main+0x38c>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ac:	ee17 0a90 	vmov	r0, s15
 80013b0:	f7ff f8ca 	bl	8000548 <__aeabi_f2d>
 80013b4:	a328      	add	r3, pc, #160	@ (adr r3, 8001458 <main+0x338>)
 80013b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ba:	f7ff f91d 	bl	80005f8 <__aeabi_dmul>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
		  pitchHat_rad = (1.0f - COMP_ALPHA) * pitchHat_acc_rad +
 80013c2:	4620      	mov	r0, r4
 80013c4:	4629      	mov	r1, r5
 80013c6:	f7fe ff61 	bl	800028c <__adddf3>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff fbe9 	bl	8000ba8 <__aeabi_d2f>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a34      	ldr	r2, [pc, #208]	@ (80014ac <main+0x38c>)
 80013da:	6013      	str	r3, [r2, #0]


		  if (uart_dma_tx_ready_flag){
 80013dc:	4b34      	ldr	r3, [pc, #208]	@ (80014b0 <main+0x390>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f43f aecb 	beq.w	800117e <main+0x5e>
			  uart_dma_tx_ready_flag = 0;
 80013e8:	4b31      	ldr	r3, [pc, #196]	@ (80014b0 <main+0x390>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
			  int len = sprintf(uart_buffer, "%.4f,%.4f\r\n",(rollHat_rad * (180.0f /M_PI)) , (pitchHat_rad * (180.0f /M_PI)));
 80013ee:	4b2e      	ldr	r3, [pc, #184]	@ (80014a8 <main+0x388>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f8a8 	bl	8000548 <__aeabi_f2d>
 80013f8:	a319      	add	r3, pc, #100	@ (adr r3, 8001460 <main+0x340>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7ff f8fb 	bl	80005f8 <__aeabi_dmul>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4614      	mov	r4, r2
 8001408:	461d      	mov	r5, r3
 800140a:	4b28      	ldr	r3, [pc, #160]	@ (80014ac <main+0x38c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f89a 	bl	8000548 <__aeabi_f2d>
 8001414:	a312      	add	r3, pc, #72	@ (adr r3, 8001460 <main+0x340>)
 8001416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141a:	f7ff f8ed 	bl	80005f8 <__aeabi_dmul>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	e9cd 2300 	strd	r2, r3, [sp]
 8001426:	4622      	mov	r2, r4
 8001428:	462b      	mov	r3, r5
 800142a:	4922      	ldr	r1, [pc, #136]	@ (80014b4 <main+0x394>)
 800142c:	4822      	ldr	r0, [pc, #136]	@ (80014b8 <main+0x398>)
 800142e:	f005 fba5 	bl	8006b7c <siprintf>
 8001432:	6078      	str	r0, [r7, #4]
			  HAL_UART_Transmit_DMA(&huart2, (uint8_t*) uart_buffer, len);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	b29b      	uxth	r3, r3
 8001438:	461a      	mov	r2, r3
 800143a:	491f      	ldr	r1, [pc, #124]	@ (80014b8 <main+0x398>)
 800143c:	481f      	ldr	r0, [pc, #124]	@ (80014bc <main+0x39c>)
 800143e:	f003 fe57 	bl	80050f0 <HAL_UART_Transmit_DMA>
	  if (mpu.data_ready_flag){
 8001442:	e69c      	b.n	800117e <main+0x5e>
 8001444:	f3af 8000 	nop.w
 8001448:	a2529d39 	.word	0xa2529d39
 800144c:	3f91df46 	.word	0x3f91df46
 8001450:	999999a0 	.word	0x999999a0
 8001454:	3fa99999 	.word	0x3fa99999
 8001458:	66666666 	.word	0x66666666
 800145c:	3fee6666 	.word	0x3fee6666
 8001460:	1a63c1f8 	.word	0x1a63c1f8
 8001464:	404ca5dc 	.word	0x404ca5dc
 8001468:	3cf9db23 	.word	0x3cf9db23
 800146c:	3f7068dc 	.word	0x3f7068dc
 8001470:	200004b0 	.word	0x200004b0
 8001474:	3d727bb3 	.word	0x3d727bb3
 8001478:	3f61b08a 	.word	0x3f61b08a
 800147c:	200004e0 	.word	0x200004e0
 8001480:	200001f4 	.word	0x200001f4
 8001484:	20000460 	.word	0x20000460
 8001488:	200002a8 	.word	0x200002a8
 800148c:	20000498 	.word	0x20000498
 8001490:	20000494 	.word	0x20000494
 8001494:	20000490 	.word	0x20000490
 8001498:	200004a4 	.word	0x200004a4
 800149c:	200004a0 	.word	0x200004a0
 80014a0:	2000049c 	.word	0x2000049c
 80014a4:	3a83126f 	.word	0x3a83126f
 80014a8:	200004ac 	.word	0x200004ac
 80014ac:	200004a8 	.word	0x200004a8
 80014b0:	20000000 	.word	0x20000000
 80014b4:	08009e38 	.word	0x08009e38
 80014b8:	20000398 	.word	0x20000398
 80014bc:	200002f0 	.word	0x200002f0

080014c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b094      	sub	sp, #80	@ 0x50
 80014c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c6:	f107 0320 	add.w	r3, r7, #32
 80014ca:	2230      	movs	r2, #48	@ 0x30
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f005 fbb7 	bl	8006c42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	4b28      	ldr	r3, [pc, #160]	@ (800158c <SystemClock_Config+0xcc>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ec:	4a27      	ldr	r2, [pc, #156]	@ (800158c <SystemClock_Config+0xcc>)
 80014ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f4:	4b25      	ldr	r3, [pc, #148]	@ (800158c <SystemClock_Config+0xcc>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	4b22      	ldr	r3, [pc, #136]	@ (8001590 <SystemClock_Config+0xd0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a21      	ldr	r2, [pc, #132]	@ (8001590 <SystemClock_Config+0xd0>)
 800150a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <SystemClock_Config+0xd0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800151c:	2302      	movs	r3, #2
 800151e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001520:	2301      	movs	r3, #1
 8001522:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001524:	2310      	movs	r3, #16
 8001526:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001528:	2302      	movs	r3, #2
 800152a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800152c:	2300      	movs	r3, #0
 800152e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001530:	2308      	movs	r3, #8
 8001532:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001534:	23a8      	movs	r3, #168	@ 0xa8
 8001536:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001538:	2302      	movs	r3, #2
 800153a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800153c:	2307      	movs	r3, #7
 800153e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001540:	f107 0320 	add.w	r3, r7, #32
 8001544:	4618      	mov	r0, r3
 8001546:	f002 fc7b 	bl	8003e40 <HAL_RCC_OscConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001550:	f000 f918 	bl	8001784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001554:	230f      	movs	r3, #15
 8001556:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001558:	2302      	movs	r3, #2
 800155a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001560:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001564:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001566:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800156a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	2105      	movs	r1, #5
 8001572:	4618      	mov	r0, r3
 8001574:	f002 fedc 	bl	8004330 <HAL_RCC_ClockConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800157e:	f000 f901 	bl	8001784 <Error_Handler>
  }
}
 8001582:	bf00      	nop
 8001584:	3750      	adds	r7, #80	@ 0x50
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	40007000 	.word	0x40007000

08001594 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001598:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <MX_I2C1_Init+0x50>)
 800159a:	4a13      	ldr	r2, [pc, #76]	@ (80015e8 <MX_I2C1_Init+0x54>)
 800159c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800159e:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015a0:	4a12      	ldr	r2, [pc, #72]	@ (80015ec <MX_I2C1_Init+0x58>)
 80015a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b8:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015be:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015c4:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d0:	4804      	ldr	r0, [pc, #16]	@ (80015e4 <MX_I2C1_Init+0x50>)
 80015d2:	f001 fbcb 	bl	8002d6c <HAL_I2C_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015dc:	f000 f8d2 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200001f4 	.word	0x200001f4
 80015e8:	40005400 	.word	0x40005400
 80015ec:	00061a80 	.word	0x00061a80

080015f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001604:	463b      	mov	r3, r7
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800160c:	4b1e      	ldr	r3, [pc, #120]	@ (8001688 <MX_TIM1_Init+0x98>)
 800160e:	4a1f      	ldr	r2, [pc, #124]	@ (800168c <MX_TIM1_Init+0x9c>)
 8001610:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8001612:	4b1d      	ldr	r3, [pc, #116]	@ (8001688 <MX_TIM1_Init+0x98>)
 8001614:	22a7      	movs	r2, #167	@ 0xa7
 8001616:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001618:	4b1b      	ldr	r3, [pc, #108]	@ (8001688 <MX_TIM1_Init+0x98>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800161e:	4b1a      	ldr	r3, [pc, #104]	@ (8001688 <MX_TIM1_Init+0x98>)
 8001620:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001624:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001626:	4b18      	ldr	r3, [pc, #96]	@ (8001688 <MX_TIM1_Init+0x98>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800162c:	4b16      	ldr	r3, [pc, #88]	@ (8001688 <MX_TIM1_Init+0x98>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001632:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <MX_TIM1_Init+0x98>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001638:	4813      	ldr	r0, [pc, #76]	@ (8001688 <MX_TIM1_Init+0x98>)
 800163a:	f003 f899 	bl	8004770 <HAL_TIM_Base_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001644:	f000 f89e 	bl	8001784 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001648:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800164c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	4619      	mov	r1, r3
 8001654:	480c      	ldr	r0, [pc, #48]	@ (8001688 <MX_TIM1_Init+0x98>)
 8001656:	f003 fa3b 	bl	8004ad0 <HAL_TIM_ConfigClockSource>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001660:	f000 f890 	bl	8001784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800166c:	463b      	mov	r3, r7
 800166e:	4619      	mov	r1, r3
 8001670:	4805      	ldr	r0, [pc, #20]	@ (8001688 <MX_TIM1_Init+0x98>)
 8001672:	f003 fc5d 	bl	8004f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800167c:	f000 f882 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200002a8 	.word	0x200002a8
 800168c:	40010000 	.word	0x40010000

08001690 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <MX_USART2_UART_Init+0x4c>)
 8001696:	4a12      	ldr	r2, [pc, #72]	@ (80016e0 <MX_USART2_UART_Init+0x50>)
 8001698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <MX_USART2_UART_Init+0x4c>)
 800169c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <MX_USART2_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <MX_USART2_UART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <MX_USART2_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <MX_USART2_UART_Init+0x4c>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <MX_USART2_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <MX_USART2_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	@ (80016dc <MX_USART2_UART_Init+0x4c>)
 80016c8:	f003 fcc2 	bl	8005050 <HAL_UART_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016d2:	f000 f857 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200002f0 	.word	0x200002f0
 80016e0:	40004400 	.word	0x40004400

080016e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <MX_DMA_Init+0x4c>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001730 <MX_DMA_Init+0x4c>)
 80016f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001730 <MX_DMA_Init+0x4c>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	200b      	movs	r0, #11
 800170c:	f000 fd4d 	bl	80021aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001710:	200b      	movs	r0, #11
 8001712:	f000 fd66 	bl	80021e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2011      	movs	r0, #17
 800171c:	f000 fd45 	bl	80021aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001720:	2011      	movs	r0, #17
 8001722:	f000 fd5e 	bl	80021e2 <HAL_NVIC_EnableIRQ>

}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800

08001734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <MX_GPIO_Init+0x4c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a0f      	ldr	r2, [pc, #60]	@ (8001780 <MX_GPIO_Init+0x4c>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b0d      	ldr	r3, [pc, #52]	@ (8001780 <MX_GPIO_Init+0x4c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	603b      	str	r3, [r7, #0]
 800175a:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <MX_GPIO_Init+0x4c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a08      	ldr	r2, [pc, #32]	@ (8001780 <MX_GPIO_Init+0x4c>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
 8001766:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <MX_GPIO_Init+0x4c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800

08001784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <Error_Handler+0x8>

08001790 <MPU6050_Init>:
 *
 *  Created on: May 28, 2025
 *      Author: Admin
 */
#include "mpu6050.h"
void MPU6050_Init(MPU6050 *dev, I2C_HandleTypeDef *i2cHandle){
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
	dev->i2cHandle = i2cHandle;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	601a      	str	r2, [r3, #0]

	dev->acc[0] = 0.0f;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	605a      	str	r2, [r3, #4]
	dev->acc[1] = 0.0f;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
	dev->acc[2] = 0.0f;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]

	//wake up the mpu
	MPU6050_WriteRegister(dev, PWR_MGMT_1, 0x00);
 80017b8:	2200      	movs	r2, #0
 80017ba:	216b      	movs	r1, #107	@ 0x6b
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 f8e5 	bl	800198c <MPU6050_WriteRegister>
	//Set the mpu acc range
	MPU6050_WriteRegister(dev, ACCEL_CONFIG, MPU6050_ACCEL_FS_4G);
 80017c2:	2208      	movs	r2, #8
 80017c4:	211c      	movs	r1, #28
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f8e0 	bl	800198c <MPU6050_WriteRegister>
	//Set the mpu gyro range
	MPU6050_WriteRegister(dev, GYRO_CONFIG, MPU6050_GYRO_FS_500DPS);
 80017cc:	2208      	movs	r2, #8
 80017ce:	211b      	movs	r1, #27
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f8db 	bl	800198c <MPU6050_WriteRegister>

}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <MPU6050_Start_DMA>:

void MPU6050_Start_DMA(MPU6050 *dev){
 80017de:	b580      	push	{r7, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	af02      	add	r7, sp, #8
 80017e4:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(dev->i2cHandle, MPU_I2C_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, dev->dma_buffer, 14);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3320      	adds	r3, #32
 80017ee:	220e      	movs	r2, #14
 80017f0:	9201      	str	r2, [sp, #4]
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2301      	movs	r3, #1
 80017f6:	223b      	movs	r2, #59	@ 0x3b
 80017f8:	21d0      	movs	r1, #208	@ 0xd0
 80017fa:	f001 fcf5 	bl	80031e8 <HAL_I2C_Mem_Read_DMA>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <MPU6050_Process_DMA>:

void MPU6050_Process_DMA(MPU6050 *dev) {
 8001808:	b480      	push	{r7}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
    int16_t raw_acc_x = (dev->dma_buffer[0] << 8) | dev->dma_buffer[1];
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	b21a      	sxth	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001820:	b21b      	sxth	r3, r3
 8001822:	4313      	orrs	r3, r2
 8001824:	82fb      	strh	r3, [r7, #22]
    int16_t raw_acc_y = (dev->dma_buffer[2] << 8) | dev->dma_buffer[3];
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	b21a      	sxth	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001836:	b21b      	sxth	r3, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	82bb      	strh	r3, [r7, #20]
    int16_t raw_acc_z = (dev->dma_buffer[4] << 8) | dev->dma_buffer[5];
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	b21a      	sxth	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800184c:	b21b      	sxth	r3, r3
 800184e:	4313      	orrs	r3, r2
 8001850:	827b      	strh	r3, [r7, #18]

    int16_t raw_temp  = (dev->dma_buffer[6] << 8) | dev->dma_buffer[7];
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	b21a      	sxth	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001862:	b21b      	sxth	r3, r3
 8001864:	4313      	orrs	r3, r2
 8001866:	823b      	strh	r3, [r7, #16]

    int16_t raw_gyro_x = (dev->dma_buffer[8] << 8) | dev->dma_buffer[9];
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	b21a      	sxth	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001878:	b21b      	sxth	r3, r3
 800187a:	4313      	orrs	r3, r2
 800187c:	81fb      	strh	r3, [r7, #14]
    int16_t raw_gyro_y = (dev->dma_buffer[10] << 8) | dev->dma_buffer[11];
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001884:	021b      	lsls	r3, r3, #8
 8001886:	b21a      	sxth	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800188e:	b21b      	sxth	r3, r3
 8001890:	4313      	orrs	r3, r2
 8001892:	81bb      	strh	r3, [r7, #12]
    int16_t raw_gyro_z = (dev->dma_buffer[12] << 8) | dev->dma_buffer[13];
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800189a:	021b      	lsls	r3, r3, #8
 800189c:	b21a      	sxth	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	4313      	orrs	r3, r2
 80018a8:	817b      	strh	r3, [r7, #10]

    dev->acc[0] = (float)raw_acc_x / 8192.0f;   // ±4g scale
 80018aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b6:	eddf 6a31 	vldr	s13, [pc, #196]	@ 800197c <MPU6050_Process_DMA+0x174>
 80018ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	edc3 7a01 	vstr	s15, [r3, #4]
    dev->acc[1] = (float)raw_acc_y / 8192.0f;
 80018c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018c8:	ee07 3a90 	vmov	s15, r3
 80018cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018d0:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800197c <MPU6050_Process_DMA+0x174>
 80018d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	edc3 7a02 	vstr	s15, [r3, #8]
    dev->acc[2] = (float)raw_acc_z / 8192.0f;
 80018de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ea:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800197c <MPU6050_Process_DMA+0x174>
 80018ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	edc3 7a03 	vstr	s15, [r3, #12]

    dev->temp = ((float)raw_temp) / 340.0f + 36.53f;
 80018f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001904:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8001980 <MPU6050_Process_DMA+0x178>
 8001908:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800190c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001984 <MPU6050_Process_DMA+0x17c>
 8001910:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	edc3 7a07 	vstr	s15, [r3, #28]

    dev->gyro[0] = (float)raw_gyro_x / 65.5f;   // ±500°/s
 800191a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800191e:	ee07 3a90 	vmov	s15, r3
 8001922:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001926:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001988 <MPU6050_Process_DMA+0x180>
 800192a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	edc3 7a04 	vstr	s15, [r3, #16]
    dev->gyro[1] = (float)raw_gyro_y / 65.5f;
 8001934:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001938:	ee07 3a90 	vmov	s15, r3
 800193c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001940:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001988 <MPU6050_Process_DMA+0x180>
 8001944:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	edc3 7a05 	vstr	s15, [r3, #20]
    dev->gyro[2] = (float)raw_gyro_z / 65.5f;
 800194e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800195a:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001988 <MPU6050_Process_DMA+0x180>
 800195e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	edc3 7a06 	vstr	s15, [r3, #24]

    dev->data_ready_flag = 0; // Reset after processing
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
}
 8001970:	bf00      	nop
 8001972:	371c      	adds	r7, #28
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	46000000 	.word	0x46000000
 8001980:	43aa0000 	.word	0x43aa0000
 8001984:	42121eb8 	.word	0x42121eb8
 8001988:	42830000 	.word	0x42830000

0800198c <MPU6050_WriteRegister>:
	return HAL_I2C_Mem_Read(dev->i2cHandle, MPU_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
}
HAL_StatusTypeDef MPU6050_ReadRegisters(MPU6050 *dev, uint8_t reg, uint8_t* data, uint8_t len){
	return HAL_I2C_Mem_Read(dev->i2cHandle, MPU_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY);
}
HAL_StatusTypeDef MPU6050_WriteRegister(MPU6050 *dev, uint8_t reg, uint8_t data_value){
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af04      	add	r7, sp, #16
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	70fb      	strb	r3, [r7, #3]
 8001998:	4613      	mov	r3, r2
 800199a:	70bb      	strb	r3, [r7, #2]
    return HAL_I2C_Mem_Write(dev->i2cHandle, MPU_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &data_value, 1, HAL_MAX_DELAY);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295
 80019a8:	9302      	str	r3, [sp, #8]
 80019aa:	2301      	movs	r3, #1
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	1cbb      	adds	r3, r7, #2
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	2301      	movs	r3, #1
 80019b4:	21d0      	movs	r1, #208	@ 0xd0
 80019b6:	f001 fb1d 	bl	8002ff4 <HAL_I2C_Mem_Write>
 80019ba:	4603      	mov	r3, r0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <HAL_MspInit+0x4c>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001a10 <HAL_MspInit+0x4c>)
 80019d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019da:	4b0d      	ldr	r3, [pc, #52]	@ (8001a10 <HAL_MspInit+0x4c>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	603b      	str	r3, [r7, #0]
 80019ea:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <HAL_MspInit+0x4c>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ee:	4a08      	ldr	r2, [pc, #32]	@ (8001a10 <HAL_MspInit+0x4c>)
 80019f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019f6:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <HAL_MspInit+0x4c>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fe:	603b      	str	r3, [r7, #0]
 8001a00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a02:	2007      	movs	r0, #7
 8001a04:	f000 fbc6 	bl	8002194 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40023800 	.word	0x40023800

08001a14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	@ 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a30      	ldr	r2, [pc, #192]	@ (8001af4 <HAL_I2C_MspInit+0xe0>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d159      	bne.n	8001aea <HAL_I2C_MspInit+0xd6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001af8 <HAL_I2C_MspInit+0xe4>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	4a2e      	ldr	r2, [pc, #184]	@ (8001af8 <HAL_I2C_MspInit+0xe4>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a46:	4b2c      	ldr	r3, [pc, #176]	@ (8001af8 <HAL_I2C_MspInit+0xe4>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a52:	23c0      	movs	r3, #192	@ 0xc0
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a56:	2312      	movs	r3, #18
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a62:	2304      	movs	r3, #4
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4823      	ldr	r0, [pc, #140]	@ (8001afc <HAL_I2C_MspInit+0xe8>)
 8001a6e:	f000 ffe1 	bl	8002a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4b20      	ldr	r3, [pc, #128]	@ (8001af8 <HAL_I2C_MspInit+0xe4>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001af8 <HAL_I2C_MspInit+0xe4>)
 8001a7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a82:	4b1d      	ldr	r3, [pc, #116]	@ (8001af8 <HAL_I2C_MspInit+0xe4>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b00 <HAL_I2C_MspInit+0xec>)
 8001a90:	4a1c      	ldr	r2, [pc, #112]	@ (8001b04 <HAL_I2C_MspInit+0xf0>)
 8001a92:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001a94:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <HAL_I2C_MspInit+0xec>)
 8001a96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a9a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a9c:	4b18      	ldr	r3, [pc, #96]	@ (8001b00 <HAL_I2C_MspInit+0xec>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <HAL_I2C_MspInit+0xec>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <HAL_I2C_MspInit+0xec>)
 8001aaa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aae:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ab0:	4b13      	ldr	r3, [pc, #76]	@ (8001b00 <HAL_I2C_MspInit+0xec>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ab6:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <HAL_I2C_MspInit+0xec>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001abc:	4b10      	ldr	r3, [pc, #64]	@ (8001b00 <HAL_I2C_MspInit+0xec>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b00 <HAL_I2C_MspInit+0xec>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b00 <HAL_I2C_MspInit+0xec>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001ace:	480c      	ldr	r0, [pc, #48]	@ (8001b00 <HAL_I2C_MspInit+0xec>)
 8001ad0:	f000 fba2 	bl	8002218 <HAL_DMA_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8001ada:	f7ff fe53 	bl	8001784 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a07      	ldr	r2, [pc, #28]	@ (8001b00 <HAL_I2C_MspInit+0xec>)
 8001ae2:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ae4:	4a06      	ldr	r2, [pc, #24]	@ (8001b00 <HAL_I2C_MspInit+0xec>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001aea:	bf00      	nop
 8001aec:	3728      	adds	r7, #40	@ 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40005400 	.word	0x40005400
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020400 	.word	0x40020400
 8001b00:	20000248 	.word	0x20000248
 8001b04:	40026010 	.word	0x40026010

08001b08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0e      	ldr	r2, [pc, #56]	@ (8001b50 <HAL_TIM_Base_MspInit+0x48>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d115      	bne.n	8001b46 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b54 <HAL_TIM_Base_MspInit+0x4c>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	4a0c      	ldr	r2, [pc, #48]	@ (8001b54 <HAL_TIM_Base_MspInit+0x4c>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <HAL_TIM_Base_MspInit+0x4c>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2019      	movs	r0, #25
 8001b3c:	f000 fb35 	bl	80021aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b40:	2019      	movs	r0, #25
 8001b42:	f000 fb4e 	bl	80021e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40010000 	.word	0x40010000
 8001b54:	40023800 	.word	0x40023800

08001b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	@ 0x28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a34      	ldr	r2, [pc, #208]	@ (8001c48 <HAL_UART_MspInit+0xf0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d161      	bne.n	8001c3e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	4b33      	ldr	r3, [pc, #204]	@ (8001c4c <HAL_UART_MspInit+0xf4>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	4a32      	ldr	r2, [pc, #200]	@ (8001c4c <HAL_UART_MspInit+0xf4>)
 8001b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b8a:	4b30      	ldr	r3, [pc, #192]	@ (8001c4c <HAL_UART_MspInit+0xf4>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8001c4c <HAL_UART_MspInit+0xf4>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	4a2b      	ldr	r2, [pc, #172]	@ (8001c4c <HAL_UART_MspInit+0xf4>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba6:	4b29      	ldr	r3, [pc, #164]	@ (8001c4c <HAL_UART_MspInit+0xf4>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bb2:	230c      	movs	r3, #12
 8001bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bc2:	2307      	movs	r3, #7
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4820      	ldr	r0, [pc, #128]	@ (8001c50 <HAL_UART_MspInit+0xf8>)
 8001bce:	f000 ff31 	bl	8002a34 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001bd2:	4b20      	ldr	r3, [pc, #128]	@ (8001c54 <HAL_UART_MspInit+0xfc>)
 8001bd4:	4a20      	ldr	r2, [pc, #128]	@ (8001c58 <HAL_UART_MspInit+0x100>)
 8001bd6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c54 <HAL_UART_MspInit+0xfc>)
 8001bda:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001bde:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001be0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c54 <HAL_UART_MspInit+0xfc>)
 8001be2:	2240      	movs	r2, #64	@ 0x40
 8001be4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <HAL_UART_MspInit+0xfc>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bec:	4b19      	ldr	r3, [pc, #100]	@ (8001c54 <HAL_UART_MspInit+0xfc>)
 8001bee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bf2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bf4:	4b17      	ldr	r3, [pc, #92]	@ (8001c54 <HAL_UART_MspInit+0xfc>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bfa:	4b16      	ldr	r3, [pc, #88]	@ (8001c54 <HAL_UART_MspInit+0xfc>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c00:	4b14      	ldr	r3, [pc, #80]	@ (8001c54 <HAL_UART_MspInit+0xfc>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c06:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <HAL_UART_MspInit+0xfc>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <HAL_UART_MspInit+0xfc>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c12:	4810      	ldr	r0, [pc, #64]	@ (8001c54 <HAL_UART_MspInit+0xfc>)
 8001c14:	f000 fb00 	bl	8002218 <HAL_DMA_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001c1e:	f7ff fdb1 	bl	8001784 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a0b      	ldr	r2, [pc, #44]	@ (8001c54 <HAL_UART_MspInit+0xfc>)
 8001c26:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c28:	4a0a      	ldr	r2, [pc, #40]	@ (8001c54 <HAL_UART_MspInit+0xfc>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2100      	movs	r1, #0
 8001c32:	2026      	movs	r0, #38	@ 0x26
 8001c34:	f000 fab9 	bl	80021aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c38:	2026      	movs	r0, #38	@ 0x26
 8001c3a:	f000 fad2 	bl	80021e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c3e:	bf00      	nop
 8001c40:	3728      	adds	r7, #40	@ 0x28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40004400 	.word	0x40004400
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40020000 	.word	0x40020000
 8001c54:	20000338 	.word	0x20000338
 8001c58:	400260a0 	.word	0x400260a0

08001c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <NMI_Handler+0x4>

08001c64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <HardFault_Handler+0x4>

08001c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <MemManage_Handler+0x4>

08001c74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <BusFault_Handler+0x4>

08001c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <UsageFault_Handler+0x4>

08001c84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb2:	f000 f97f 	bl	8001fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001cc0:	4802      	ldr	r0, [pc, #8]	@ (8001ccc <DMA1_Stream0_IRQHandler+0x10>)
 8001cc2:	f000 fc41 	bl	8002548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000248 	.word	0x20000248

08001cd0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001cd4:	4802      	ldr	r0, [pc, #8]	@ (8001ce0 <DMA1_Stream6_IRQHandler+0x10>)
 8001cd6:	f000 fc37 	bl	8002548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000338 	.word	0x20000338

08001ce4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ce8:	4802      	ldr	r0, [pc, #8]	@ (8001cf4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001cea:	f002 fe01 	bl	80048f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200002a8 	.word	0x200002a8

08001cf8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cfc:	4802      	ldr	r0, [pc, #8]	@ (8001d08 <USART2_IRQHandler+0x10>)
 8001cfe:	f003 fa73 	bl	80051e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200002f0 	.word	0x200002f0

08001d0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return 1;
 8001d10:	2301      	movs	r3, #1
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_kill>:

int _kill(int pid, int sig)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d26:	f004 ffdf 	bl	8006ce8 <__errno>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2216      	movs	r2, #22
 8001d2e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <_exit>:

void _exit (int status)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d44:	f04f 31ff 	mov.w	r1, #4294967295
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff ffe7 	bl	8001d1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d4e:	bf00      	nop
 8001d50:	e7fd      	b.n	8001d4e <_exit+0x12>

08001d52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b086      	sub	sp, #24
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	e00a      	b.n	8001d7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d64:	f3af 8000 	nop.w
 8001d68:	4601      	mov	r1, r0
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	60ba      	str	r2, [r7, #8]
 8001d70:	b2ca      	uxtb	r2, r1
 8001d72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	3301      	adds	r3, #1
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	dbf0      	blt.n	8001d64 <_read+0x12>
  }

  return len;
 8001d82:	687b      	ldr	r3, [r7, #4]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	e009      	b.n	8001db2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	60ba      	str	r2, [r7, #8]
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	3301      	adds	r3, #1
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	dbf1      	blt.n	8001d9e <_write+0x12>
  }
  return len;
 8001dba:	687b      	ldr	r3, [r7, #4]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <_close>:

int _close(int file)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dec:	605a      	str	r2, [r3, #4]
  return 0;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <_isatty>:

int _isatty(int file)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e04:	2301      	movs	r3, #1
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b085      	sub	sp, #20
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e34:	4a14      	ldr	r2, [pc, #80]	@ (8001e88 <_sbrk+0x5c>)
 8001e36:	4b15      	ldr	r3, [pc, #84]	@ (8001e8c <_sbrk+0x60>)
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e40:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <_sbrk+0x64>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d102      	bne.n	8001e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e48:	4b11      	ldr	r3, [pc, #68]	@ (8001e90 <_sbrk+0x64>)
 8001e4a:	4a12      	ldr	r2, [pc, #72]	@ (8001e94 <_sbrk+0x68>)
 8001e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e4e:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <_sbrk+0x64>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d207      	bcs.n	8001e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e5c:	f004 ff44 	bl	8006ce8 <__errno>
 8001e60:	4603      	mov	r3, r0
 8001e62:	220c      	movs	r2, #12
 8001e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6a:	e009      	b.n	8001e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e6c:	4b08      	ldr	r3, [pc, #32]	@ (8001e90 <_sbrk+0x64>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e72:	4b07      	ldr	r3, [pc, #28]	@ (8001e90 <_sbrk+0x64>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	4a05      	ldr	r2, [pc, #20]	@ (8001e90 <_sbrk+0x64>)
 8001e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20020000 	.word	0x20020000
 8001e8c:	00000400 	.word	0x00000400
 8001e90:	20000510 	.word	0x20000510
 8001e94:	20000668 	.word	0x20000668

08001e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e9c:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <SystemInit+0x20>)
 8001e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ea2:	4a05      	ldr	r2, [pc, #20]	@ (8001eb8 <SystemInit+0x20>)
 8001ea4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ea8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ebc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ef4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ec0:	f7ff ffea 	bl	8001e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ec4:	480c      	ldr	r0, [pc, #48]	@ (8001ef8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ec6:	490d      	ldr	r1, [pc, #52]	@ (8001efc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ecc:	e002      	b.n	8001ed4 <LoopCopyDataInit>

08001ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed2:	3304      	adds	r3, #4

08001ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed8:	d3f9      	bcc.n	8001ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eda:	4a0a      	ldr	r2, [pc, #40]	@ (8001f04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001edc:	4c0a      	ldr	r4, [pc, #40]	@ (8001f08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee0:	e001      	b.n	8001ee6 <LoopFillZerobss>

08001ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee4:	3204      	adds	r2, #4

08001ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee8:	d3fb      	bcc.n	8001ee2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eea:	f004 ff03 	bl	8006cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eee:	f7ff f917 	bl	8001120 <main>
  bx  lr    
 8001ef2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ef4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001efc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001f00:	0800a5f0 	.word	0x0800a5f0
  ldr r2, =_sbss
 8001f04:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001f08:	20000664 	.word	0x20000664

08001f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f0c:	e7fe      	b.n	8001f0c <ADC_IRQHandler>
	...

08001f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f14:	4b0e      	ldr	r3, [pc, #56]	@ (8001f50 <HAL_Init+0x40>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0d      	ldr	r2, [pc, #52]	@ (8001f50 <HAL_Init+0x40>)
 8001f1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f20:	4b0b      	ldr	r3, [pc, #44]	@ (8001f50 <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0a      	ldr	r2, [pc, #40]	@ (8001f50 <HAL_Init+0x40>)
 8001f26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f2c:	4b08      	ldr	r3, [pc, #32]	@ (8001f50 <HAL_Init+0x40>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a07      	ldr	r2, [pc, #28]	@ (8001f50 <HAL_Init+0x40>)
 8001f32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f38:	2003      	movs	r0, #3
 8001f3a:	f000 f92b 	bl	8002194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f000 f808 	bl	8001f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f44:	f7ff fd3e 	bl	80019c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023c00 	.word	0x40023c00

08001f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f5c:	4b12      	ldr	r3, [pc, #72]	@ (8001fa8 <HAL_InitTick+0x54>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b12      	ldr	r3, [pc, #72]	@ (8001fac <HAL_InitTick+0x58>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4619      	mov	r1, r3
 8001f66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 f943 	bl	80021fe <HAL_SYSTICK_Config>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e00e      	b.n	8001fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b0f      	cmp	r3, #15
 8001f86:	d80a      	bhi.n	8001f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f90:	f000 f90b 	bl	80021aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f94:	4a06      	ldr	r2, [pc, #24]	@ (8001fb0 <HAL_InitTick+0x5c>)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e000      	b.n	8001fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000004 	.word	0x20000004
 8001fac:	2000000c 	.word	0x2000000c
 8001fb0:	20000008 	.word	0x20000008

08001fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <HAL_IncTick+0x20>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <HAL_IncTick+0x24>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4a04      	ldr	r2, [pc, #16]	@ (8001fd8 <HAL_IncTick+0x24>)
 8001fc6:	6013      	str	r3, [r2, #0]
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	2000000c 	.word	0x2000000c
 8001fd8:	20000514 	.word	0x20000514

08001fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe0:	4b03      	ldr	r3, [pc, #12]	@ (8001ff0 <HAL_GetTick+0x14>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000514 	.word	0x20000514

08001ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002004:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002010:	4013      	ands	r3, r2
 8002012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800201c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002026:	4a04      	ldr	r2, [pc, #16]	@ (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	60d3      	str	r3, [r2, #12]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002040:	4b04      	ldr	r3, [pc, #16]	@ (8002054 <__NVIC_GetPriorityGrouping+0x18>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	f003 0307 	and.w	r3, r3, #7
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	2b00      	cmp	r3, #0
 8002068:	db0b      	blt.n	8002082 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	f003 021f 	and.w	r2, r3, #31
 8002070:	4907      	ldr	r1, [pc, #28]	@ (8002090 <__NVIC_EnableIRQ+0x38>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	2001      	movs	r0, #1
 800207a:	fa00 f202 	lsl.w	r2, r0, r2
 800207e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000e100 	.word	0xe000e100

08002094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	6039      	str	r1, [r7, #0]
 800209e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	db0a      	blt.n	80020be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	490c      	ldr	r1, [pc, #48]	@ (80020e0 <__NVIC_SetPriority+0x4c>)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	0112      	lsls	r2, r2, #4
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	440b      	add	r3, r1
 80020b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020bc:	e00a      	b.n	80020d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4908      	ldr	r1, [pc, #32]	@ (80020e4 <__NVIC_SetPriority+0x50>)
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	3b04      	subs	r3, #4
 80020cc:	0112      	lsls	r2, r2, #4
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	440b      	add	r3, r1
 80020d2:	761a      	strb	r2, [r3, #24]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000e100 	.word	0xe000e100
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b089      	sub	sp, #36	@ 0x24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f1c3 0307 	rsb	r3, r3, #7
 8002102:	2b04      	cmp	r3, #4
 8002104:	bf28      	it	cs
 8002106:	2304      	movcs	r3, #4
 8002108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3304      	adds	r3, #4
 800210e:	2b06      	cmp	r3, #6
 8002110:	d902      	bls.n	8002118 <NVIC_EncodePriority+0x30>
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3b03      	subs	r3, #3
 8002116:	e000      	b.n	800211a <NVIC_EncodePriority+0x32>
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	f04f 32ff 	mov.w	r2, #4294967295
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43da      	mvns	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	401a      	ands	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002130:	f04f 31ff 	mov.w	r1, #4294967295
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	43d9      	mvns	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	4313      	orrs	r3, r2
         );
}
 8002142:	4618      	mov	r0, r3
 8002144:	3724      	adds	r7, #36	@ 0x24
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002160:	d301      	bcc.n	8002166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002162:	2301      	movs	r3, #1
 8002164:	e00f      	b.n	8002186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002166:	4a0a      	ldr	r2, [pc, #40]	@ (8002190 <SysTick_Config+0x40>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3b01      	subs	r3, #1
 800216c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800216e:	210f      	movs	r1, #15
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	f7ff ff8e 	bl	8002094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002178:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <SysTick_Config+0x40>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800217e:	4b04      	ldr	r3, [pc, #16]	@ (8002190 <SysTick_Config+0x40>)
 8002180:	2207      	movs	r2, #7
 8002182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	e000e010 	.word	0xe000e010

08002194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ff29 	bl	8001ff4 <__NVIC_SetPriorityGrouping>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b086      	sub	sp, #24
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	607a      	str	r2, [r7, #4]
 80021b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021bc:	f7ff ff3e 	bl	800203c <__NVIC_GetPriorityGrouping>
 80021c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	6978      	ldr	r0, [r7, #20]
 80021c8:	f7ff ff8e 	bl	80020e8 <NVIC_EncodePriority>
 80021cc:	4602      	mov	r2, r0
 80021ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff5d 	bl	8002094 <__NVIC_SetPriority>
}
 80021da:	bf00      	nop
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff31 	bl	8002058 <__NVIC_EnableIRQ>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff ffa2 	bl	8002150 <SysTick_Config>
 800220c:	4603      	mov	r3, r0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002224:	f7ff feda 	bl	8001fdc <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e099      	b.n	8002368 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002254:	e00f      	b.n	8002276 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002256:	f7ff fec1 	bl	8001fdc <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b05      	cmp	r3, #5
 8002262:	d908      	bls.n	8002276 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2220      	movs	r2, #32
 8002268:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2203      	movs	r2, #3
 800226e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e078      	b.n	8002368 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1e8      	bne.n	8002256 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	4b38      	ldr	r3, [pc, #224]	@ (8002370 <HAL_DMA_Init+0x158>)
 8002290:	4013      	ands	r3, r2
 8002292:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d107      	bne.n	80022e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d8:	4313      	orrs	r3, r2
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	4313      	orrs	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f023 0307 	bic.w	r3, r3, #7
 80022f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	4313      	orrs	r3, r2
 8002300:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002306:	2b04      	cmp	r3, #4
 8002308:	d117      	bne.n	800233a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4313      	orrs	r3, r2
 8002312:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00e      	beq.n	800233a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 fb0d 	bl	800293c <DMA_CheckFifoParam>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2240      	movs	r2, #64	@ 0x40
 800232c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002336:	2301      	movs	r3, #1
 8002338:	e016      	b.n	8002368 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 fac4 	bl	80028d0 <DMA_CalcBaseAndBitshift>
 8002348:	4603      	mov	r3, r0
 800234a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002350:	223f      	movs	r2, #63	@ 0x3f
 8002352:	409a      	lsls	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	f010803f 	.word	0xf010803f

08002374 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_DMA_Start_IT+0x26>
 8002396:	2302      	movs	r3, #2
 8002398:	e040      	b.n	800241c <HAL_DMA_Start_IT+0xa8>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d12f      	bne.n	800240e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2202      	movs	r2, #2
 80023b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 fa56 	bl	8002874 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023cc:	223f      	movs	r2, #63	@ 0x3f
 80023ce:	409a      	lsls	r2, r3
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0216 	orr.w	r2, r2, #22
 80023e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d007      	beq.n	80023fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0208 	orr.w	r2, r2, #8
 80023fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	e005      	b.n	800241a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002416:	2302      	movs	r3, #2
 8002418:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800241a:	7dfb      	ldrb	r3, [r7, #23]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002430:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002432:	f7ff fdd3 	bl	8001fdc <HAL_GetTick>
 8002436:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d008      	beq.n	8002456 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2280      	movs	r2, #128	@ 0x80
 8002448:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e052      	b.n	80024fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0216 	bic.w	r2, r2, #22
 8002464:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695a      	ldr	r2, [r3, #20]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002474:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	2b00      	cmp	r3, #0
 800247c:	d103      	bne.n	8002486 <HAL_DMA_Abort+0x62>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002482:	2b00      	cmp	r3, #0
 8002484:	d007      	beq.n	8002496 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0208 	bic.w	r2, r2, #8
 8002494:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0201 	bic.w	r2, r2, #1
 80024a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024a6:	e013      	b.n	80024d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024a8:	f7ff fd98 	bl	8001fdc <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b05      	cmp	r3, #5
 80024b4:	d90c      	bls.n	80024d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2220      	movs	r2, #32
 80024ba:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2203      	movs	r2, #3
 80024c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e015      	b.n	80024fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1e4      	bne.n	80024a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e2:	223f      	movs	r2, #63	@ 0x3f
 80024e4:	409a      	lsls	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d004      	beq.n	8002522 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2280      	movs	r2, #128	@ 0x80
 800251c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e00c      	b.n	800253c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2205      	movs	r2, #5
 8002526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0201 	bic.w	r2, r2, #1
 8002538:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002554:	4b8e      	ldr	r3, [pc, #568]	@ (8002790 <HAL_DMA_IRQHandler+0x248>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a8e      	ldr	r2, [pc, #568]	@ (8002794 <HAL_DMA_IRQHandler+0x24c>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	0a9b      	lsrs	r3, r3, #10
 8002560:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002566:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002572:	2208      	movs	r2, #8
 8002574:	409a      	lsls	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d01a      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d013      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0204 	bic.w	r2, r2, #4
 800259a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a0:	2208      	movs	r2, #8
 80025a2:	409a      	lsls	r2, r3
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ac:	f043 0201 	orr.w	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b8:	2201      	movs	r2, #1
 80025ba:	409a      	lsls	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d012      	beq.n	80025ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d6:	2201      	movs	r2, #1
 80025d8:	409a      	lsls	r2, r3
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e2:	f043 0202 	orr.w	r2, r3, #2
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ee:	2204      	movs	r2, #4
 80025f0:	409a      	lsls	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d012      	beq.n	8002620 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00b      	beq.n	8002620 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260c:	2204      	movs	r2, #4
 800260e:	409a      	lsls	r2, r3
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002618:	f043 0204 	orr.w	r2, r3, #4
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002624:	2210      	movs	r2, #16
 8002626:	409a      	lsls	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4013      	ands	r3, r2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d043      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d03c      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002642:	2210      	movs	r2, #16
 8002644:	409a      	lsls	r2, r3
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d018      	beq.n	800268a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d108      	bne.n	8002678 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	d024      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	4798      	blx	r3
 8002676:	e01f      	b.n	80026b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800267c:	2b00      	cmp	r3, #0
 800267e:	d01b      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
 8002688:	e016      	b.n	80026b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d107      	bne.n	80026a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0208 	bic.w	r2, r2, #8
 80026a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026bc:	2220      	movs	r2, #32
 80026be:	409a      	lsls	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 808f 	beq.w	80027e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 8087 	beq.w	80027e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026de:	2220      	movs	r2, #32
 80026e0:	409a      	lsls	r2, r3
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b05      	cmp	r3, #5
 80026f0:	d136      	bne.n	8002760 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0216 	bic.w	r2, r2, #22
 8002700:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002710:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d103      	bne.n	8002722 <HAL_DMA_IRQHandler+0x1da>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800271e:	2b00      	cmp	r3, #0
 8002720:	d007      	beq.n	8002732 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0208 	bic.w	r2, r2, #8
 8002730:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002736:	223f      	movs	r2, #63	@ 0x3f
 8002738:	409a      	lsls	r2, r3
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002752:	2b00      	cmp	r3, #0
 8002754:	d07e      	beq.n	8002854 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	4798      	blx	r3
        }
        return;
 800275e:	e079      	b.n	8002854 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d01d      	beq.n	80027aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10d      	bne.n	8002798 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002780:	2b00      	cmp	r3, #0
 8002782:	d031      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	4798      	blx	r3
 800278c:	e02c      	b.n	80027e8 <HAL_DMA_IRQHandler+0x2a0>
 800278e:	bf00      	nop
 8002790:	20000004 	.word	0x20000004
 8002794:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d023      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	4798      	blx	r3
 80027a8:	e01e      	b.n	80027e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10f      	bne.n	80027d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0210 	bic.w	r2, r2, #16
 80027c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d032      	beq.n	8002856 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d022      	beq.n	8002842 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2205      	movs	r2, #5
 8002800:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0201 	bic.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	3301      	adds	r3, #1
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	429a      	cmp	r2, r3
 800281e:	d307      	bcc.n	8002830 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f2      	bne.n	8002814 <HAL_DMA_IRQHandler+0x2cc>
 800282e:	e000      	b.n	8002832 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002830:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	4798      	blx	r3
 8002852:	e000      	b.n	8002856 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002854:	bf00      	nop
    }
  }
}
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002890:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b40      	cmp	r3, #64	@ 0x40
 80028a0:	d108      	bne.n	80028b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028b2:	e007      	b.n	80028c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	60da      	str	r2, [r3, #12]
}
 80028c4:	bf00      	nop
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	3b10      	subs	r3, #16
 80028e0:	4a14      	ldr	r2, [pc, #80]	@ (8002934 <DMA_CalcBaseAndBitshift+0x64>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	091b      	lsrs	r3, r3, #4
 80028e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028ea:	4a13      	ldr	r2, [pc, #76]	@ (8002938 <DMA_CalcBaseAndBitshift+0x68>)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4413      	add	r3, r2
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d909      	bls.n	8002912 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002906:	f023 0303 	bic.w	r3, r3, #3
 800290a:	1d1a      	adds	r2, r3, #4
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002910:	e007      	b.n	8002922 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800291a:	f023 0303 	bic.w	r3, r3, #3
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	aaaaaaab 	.word	0xaaaaaaab
 8002938:	08009e5c 	.word	0x08009e5c

0800293c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d11f      	bne.n	8002996 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b03      	cmp	r3, #3
 800295a:	d856      	bhi.n	8002a0a <DMA_CheckFifoParam+0xce>
 800295c:	a201      	add	r2, pc, #4	@ (adr r2, 8002964 <DMA_CheckFifoParam+0x28>)
 800295e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002962:	bf00      	nop
 8002964:	08002975 	.word	0x08002975
 8002968:	08002987 	.word	0x08002987
 800296c:	08002975 	.word	0x08002975
 8002970:	08002a0b 	.word	0x08002a0b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002978:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d046      	beq.n	8002a0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002984:	e043      	b.n	8002a0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800298e:	d140      	bne.n	8002a12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002994:	e03d      	b.n	8002a12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800299e:	d121      	bne.n	80029e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d837      	bhi.n	8002a16 <DMA_CheckFifoParam+0xda>
 80029a6:	a201      	add	r2, pc, #4	@ (adr r2, 80029ac <DMA_CheckFifoParam+0x70>)
 80029a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ac:	080029bd 	.word	0x080029bd
 80029b0:	080029c3 	.word	0x080029c3
 80029b4:	080029bd 	.word	0x080029bd
 80029b8:	080029d5 	.word	0x080029d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
      break;
 80029c0:	e030      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d025      	beq.n	8002a1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d2:	e022      	b.n	8002a1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029dc:	d11f      	bne.n	8002a1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029e2:	e01c      	b.n	8002a1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d903      	bls.n	80029f2 <DMA_CheckFifoParam+0xb6>
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d003      	beq.n	80029f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029f0:	e018      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
      break;
 80029f6:	e015      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00e      	beq.n	8002a22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
      break;
 8002a08:	e00b      	b.n	8002a22 <DMA_CheckFifoParam+0xe6>
      break;
 8002a0a:	bf00      	nop
 8002a0c:	e00a      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      break;
 8002a0e:	bf00      	nop
 8002a10:	e008      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      break;
 8002a12:	bf00      	nop
 8002a14:	e006      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      break;
 8002a16:	bf00      	nop
 8002a18:	e004      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      break;
 8002a1a:	bf00      	nop
 8002a1c:	e002      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a1e:	bf00      	nop
 8002a20:	e000      	b.n	8002a24 <DMA_CheckFifoParam+0xe8>
      break;
 8002a22:	bf00      	nop
    }
  } 
  
  return status; 
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop

08002a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	@ 0x24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	e16b      	b.n	8002d28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a50:	2201      	movs	r2, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	f040 815a 	bne.w	8002d22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d005      	beq.n	8002a86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d130      	bne.n	8002ae8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	2203      	movs	r2, #3
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002abc:	2201      	movs	r2, #1
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 0201 	and.w	r2, r3, #1
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d017      	beq.n	8002b24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d123      	bne.n	8002b78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	08da      	lsrs	r2, r3, #3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3208      	adds	r2, #8
 8002b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	220f      	movs	r2, #15
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	08da      	lsrs	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3208      	adds	r2, #8
 8002b72:	69b9      	ldr	r1, [r7, #24]
 8002b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	2203      	movs	r2, #3
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0203 	and.w	r2, r3, #3
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80b4 	beq.w	8002d22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	4b60      	ldr	r3, [pc, #384]	@ (8002d40 <HAL_GPIO_Init+0x30c>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc2:	4a5f      	ldr	r2, [pc, #380]	@ (8002d40 <HAL_GPIO_Init+0x30c>)
 8002bc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bca:	4b5d      	ldr	r3, [pc, #372]	@ (8002d40 <HAL_GPIO_Init+0x30c>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bd6:	4a5b      	ldr	r2, [pc, #364]	@ (8002d44 <HAL_GPIO_Init+0x310>)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	3302      	adds	r3, #2
 8002bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	220f      	movs	r2, #15
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a52      	ldr	r2, [pc, #328]	@ (8002d48 <HAL_GPIO_Init+0x314>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d02b      	beq.n	8002c5a <HAL_GPIO_Init+0x226>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a51      	ldr	r2, [pc, #324]	@ (8002d4c <HAL_GPIO_Init+0x318>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d025      	beq.n	8002c56 <HAL_GPIO_Init+0x222>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a50      	ldr	r2, [pc, #320]	@ (8002d50 <HAL_GPIO_Init+0x31c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d01f      	beq.n	8002c52 <HAL_GPIO_Init+0x21e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a4f      	ldr	r2, [pc, #316]	@ (8002d54 <HAL_GPIO_Init+0x320>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d019      	beq.n	8002c4e <HAL_GPIO_Init+0x21a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a4e      	ldr	r2, [pc, #312]	@ (8002d58 <HAL_GPIO_Init+0x324>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d013      	beq.n	8002c4a <HAL_GPIO_Init+0x216>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a4d      	ldr	r2, [pc, #308]	@ (8002d5c <HAL_GPIO_Init+0x328>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00d      	beq.n	8002c46 <HAL_GPIO_Init+0x212>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a4c      	ldr	r2, [pc, #304]	@ (8002d60 <HAL_GPIO_Init+0x32c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d007      	beq.n	8002c42 <HAL_GPIO_Init+0x20e>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a4b      	ldr	r2, [pc, #300]	@ (8002d64 <HAL_GPIO_Init+0x330>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d101      	bne.n	8002c3e <HAL_GPIO_Init+0x20a>
 8002c3a:	2307      	movs	r3, #7
 8002c3c:	e00e      	b.n	8002c5c <HAL_GPIO_Init+0x228>
 8002c3e:	2308      	movs	r3, #8
 8002c40:	e00c      	b.n	8002c5c <HAL_GPIO_Init+0x228>
 8002c42:	2306      	movs	r3, #6
 8002c44:	e00a      	b.n	8002c5c <HAL_GPIO_Init+0x228>
 8002c46:	2305      	movs	r3, #5
 8002c48:	e008      	b.n	8002c5c <HAL_GPIO_Init+0x228>
 8002c4a:	2304      	movs	r3, #4
 8002c4c:	e006      	b.n	8002c5c <HAL_GPIO_Init+0x228>
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e004      	b.n	8002c5c <HAL_GPIO_Init+0x228>
 8002c52:	2302      	movs	r3, #2
 8002c54:	e002      	b.n	8002c5c <HAL_GPIO_Init+0x228>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <HAL_GPIO_Init+0x228>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	69fa      	ldr	r2, [r7, #28]
 8002c5e:	f002 0203 	and.w	r2, r2, #3
 8002c62:	0092      	lsls	r2, r2, #2
 8002c64:	4093      	lsls	r3, r2
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c6c:	4935      	ldr	r1, [pc, #212]	@ (8002d44 <HAL_GPIO_Init+0x310>)
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	089b      	lsrs	r3, r3, #2
 8002c72:	3302      	adds	r3, #2
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d68 <HAL_GPIO_Init+0x334>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c9e:	4a32      	ldr	r2, [pc, #200]	@ (8002d68 <HAL_GPIO_Init+0x334>)
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ca4:	4b30      	ldr	r3, [pc, #192]	@ (8002d68 <HAL_GPIO_Init+0x334>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cc8:	4a27      	ldr	r2, [pc, #156]	@ (8002d68 <HAL_GPIO_Init+0x334>)
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cce:	4b26      	ldr	r3, [pc, #152]	@ (8002d68 <HAL_GPIO_Init+0x334>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cf2:	4a1d      	ldr	r2, [pc, #116]	@ (8002d68 <HAL_GPIO_Init+0x334>)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d68 <HAL_GPIO_Init+0x334>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d1c:	4a12      	ldr	r2, [pc, #72]	@ (8002d68 <HAL_GPIO_Init+0x334>)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3301      	adds	r3, #1
 8002d26:	61fb      	str	r3, [r7, #28]
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	2b0f      	cmp	r3, #15
 8002d2c:	f67f ae90 	bls.w	8002a50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	3724      	adds	r7, #36	@ 0x24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40013800 	.word	0x40013800
 8002d48:	40020000 	.word	0x40020000
 8002d4c:	40020400 	.word	0x40020400
 8002d50:	40020800 	.word	0x40020800
 8002d54:	40020c00 	.word	0x40020c00
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40021400 	.word	0x40021400
 8002d60:	40021800 	.word	0x40021800
 8002d64:	40021c00 	.word	0x40021c00
 8002d68:	40013c00 	.word	0x40013c00

08002d6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e12b      	b.n	8002fd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fe fe3e 	bl	8001a14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2224      	movs	r2, #36	@ 0x24
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0201 	bic.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002dbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002dce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dd0:	f001 fca6 	bl	8004720 <HAL_RCC_GetPCLK1Freq>
 8002dd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	4a81      	ldr	r2, [pc, #516]	@ (8002fe0 <HAL_I2C_Init+0x274>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d807      	bhi.n	8002df0 <HAL_I2C_Init+0x84>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4a80      	ldr	r2, [pc, #512]	@ (8002fe4 <HAL_I2C_Init+0x278>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	bf94      	ite	ls
 8002de8:	2301      	movls	r3, #1
 8002dea:	2300      	movhi	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	e006      	b.n	8002dfe <HAL_I2C_Init+0x92>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4a7d      	ldr	r2, [pc, #500]	@ (8002fe8 <HAL_I2C_Init+0x27c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	bf94      	ite	ls
 8002df8:	2301      	movls	r3, #1
 8002dfa:	2300      	movhi	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e0e7      	b.n	8002fd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4a78      	ldr	r2, [pc, #480]	@ (8002fec <HAL_I2C_Init+0x280>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	0c9b      	lsrs	r3, r3, #18
 8002e10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	4a6a      	ldr	r2, [pc, #424]	@ (8002fe0 <HAL_I2C_Init+0x274>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d802      	bhi.n	8002e40 <HAL_I2C_Init+0xd4>
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	e009      	b.n	8002e54 <HAL_I2C_Init+0xe8>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e46:	fb02 f303 	mul.w	r3, r2, r3
 8002e4a:	4a69      	ldr	r2, [pc, #420]	@ (8002ff0 <HAL_I2C_Init+0x284>)
 8002e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e50:	099b      	lsrs	r3, r3, #6
 8002e52:	3301      	adds	r3, #1
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e66:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	495c      	ldr	r1, [pc, #368]	@ (8002fe0 <HAL_I2C_Init+0x274>)
 8002e70:	428b      	cmp	r3, r1
 8002e72:	d819      	bhi.n	8002ea8 <HAL_I2C_Init+0x13c>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1e59      	subs	r1, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e82:	1c59      	adds	r1, r3, #1
 8002e84:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e88:	400b      	ands	r3, r1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_I2C_Init+0x138>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	1e59      	subs	r1, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea2:	e051      	b.n	8002f48 <HAL_I2C_Init+0x1dc>
 8002ea4:	2304      	movs	r3, #4
 8002ea6:	e04f      	b.n	8002f48 <HAL_I2C_Init+0x1dc>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d111      	bne.n	8002ed4 <HAL_I2C_Init+0x168>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	1e58      	subs	r0, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	440b      	add	r3, r1
 8002ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	e012      	b.n	8002efa <HAL_I2C_Init+0x18e>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1e58      	subs	r0, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6859      	ldr	r1, [r3, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	0099      	lsls	r1, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eea:	3301      	adds	r3, #1
 8002eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_Init+0x196>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e022      	b.n	8002f48 <HAL_I2C_Init+0x1dc>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10e      	bne.n	8002f28 <HAL_I2C_Init+0x1bc>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	1e58      	subs	r0, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6859      	ldr	r1, [r3, #4]
 8002f12:	460b      	mov	r3, r1
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	440b      	add	r3, r1
 8002f18:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f26:	e00f      	b.n	8002f48 <HAL_I2C_Init+0x1dc>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	1e58      	subs	r0, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6859      	ldr	r1, [r3, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	0099      	lsls	r1, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f3e:	3301      	adds	r3, #1
 8002f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	6809      	ldr	r1, [r1, #0]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69da      	ldr	r2, [r3, #28]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6911      	ldr	r1, [r2, #16]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	68d2      	ldr	r2, [r2, #12]
 8002f82:	4311      	orrs	r1, r2
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6812      	ldr	r2, [r2, #0]
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695a      	ldr	r2, [r3, #20]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	000186a0 	.word	0x000186a0
 8002fe4:	001e847f 	.word	0x001e847f
 8002fe8:	003d08ff 	.word	0x003d08ff
 8002fec:	431bde83 	.word	0x431bde83
 8002ff0:	10624dd3 	.word	0x10624dd3

08002ff4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	4608      	mov	r0, r1
 8002ffe:	4611      	mov	r1, r2
 8003000:	461a      	mov	r2, r3
 8003002:	4603      	mov	r3, r0
 8003004:	817b      	strh	r3, [r7, #10]
 8003006:	460b      	mov	r3, r1
 8003008:	813b      	strh	r3, [r7, #8]
 800300a:	4613      	mov	r3, r2
 800300c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800300e:	f7fe ffe5 	bl	8001fdc <HAL_GetTick>
 8003012:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b20      	cmp	r3, #32
 800301e:	f040 80d9 	bne.w	80031d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	2319      	movs	r3, #25
 8003028:	2201      	movs	r2, #1
 800302a:	496d      	ldr	r1, [pc, #436]	@ (80031e0 <HAL_I2C_Mem_Write+0x1ec>)
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 fd2d 	bl	8003a8c <I2C_WaitOnFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003038:	2302      	movs	r3, #2
 800303a:	e0cc      	b.n	80031d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_I2C_Mem_Write+0x56>
 8003046:	2302      	movs	r3, #2
 8003048:	e0c5      	b.n	80031d6 <HAL_I2C_Mem_Write+0x1e2>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b01      	cmp	r3, #1
 800305e:	d007      	beq.n	8003070 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800307e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2221      	movs	r2, #33	@ 0x21
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2240      	movs	r2, #64	@ 0x40
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a3a      	ldr	r2, [r7, #32]
 800309a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80030a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4a4d      	ldr	r2, [pc, #308]	@ (80031e4 <HAL_I2C_Mem_Write+0x1f0>)
 80030b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030b2:	88f8      	ldrh	r0, [r7, #6]
 80030b4:	893a      	ldrh	r2, [r7, #8]
 80030b6:	8979      	ldrh	r1, [r7, #10]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	9301      	str	r3, [sp, #4]
 80030bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	4603      	mov	r3, r0
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 fa48 	bl	8003558 <I2C_RequestMemoryWrite>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d052      	beq.n	8003174 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e081      	b.n	80031d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 fdf2 	bl	8003cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00d      	beq.n	80030fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d107      	bne.n	80030fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e06b      	b.n	80031d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003102:	781a      	ldrb	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b04      	cmp	r3, #4
 800313a:	d11b      	bne.n	8003174 <HAL_I2C_Mem_Write+0x180>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003140:	2b00      	cmp	r3, #0
 8003142:	d017      	beq.n	8003174 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003148:	781a      	ldrb	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800315e:	3b01      	subs	r3, #1
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316a:	b29b      	uxth	r3, r3
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1aa      	bne.n	80030d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 fde5 	bl	8003d50 <I2C_WaitOnBTFFlagUntilTimeout>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00d      	beq.n	80031a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003190:	2b04      	cmp	r3, #4
 8003192:	d107      	bne.n	80031a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e016      	b.n	80031d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	e000      	b.n	80031d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031d4:	2302      	movs	r3, #2
  }
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	00100002 	.word	0x00100002
 80031e4:	ffff0000 	.word	0xffff0000

080031e8 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08c      	sub	sp, #48	@ 0x30
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	4608      	mov	r0, r1
 80031f2:	4611      	mov	r1, r2
 80031f4:	461a      	mov	r2, r3
 80031f6:	4603      	mov	r3, r0
 80031f8:	817b      	strh	r3, [r7, #10]
 80031fa:	460b      	mov	r3, r1
 80031fc:	813b      	strh	r3, [r7, #8]
 80031fe:	4613      	mov	r3, r2
 8003200:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003202:	f7fe feeb 	bl	8001fdc <HAL_GetTick>
 8003206:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b20      	cmp	r3, #32
 8003216:	f040 8172 	bne.w	80034fe <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800321a:	4b93      	ldr	r3, [pc, #588]	@ (8003468 <HAL_I2C_Mem_Read_DMA+0x280>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	08db      	lsrs	r3, r3, #3
 8003220:	4a92      	ldr	r2, [pc, #584]	@ (800346c <HAL_I2C_Mem_Read_DMA+0x284>)
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	0a1a      	lsrs	r2, r3, #8
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	009a      	lsls	r2, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	3b01      	subs	r3, #1
 8003238:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d112      	bne.n	8003266 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	f043 0220 	orr.w	r2, r3, #32
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003262:	2302      	movs	r3, #2
 8003264:	e14c      	b.n	8003500 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b02      	cmp	r3, #2
 8003272:	d0df      	beq.n	8003234 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_I2C_Mem_Read_DMA+0x9a>
 800327e:	2302      	movs	r3, #2
 8003280:	e13e      	b.n	8003500 <HAL_I2C_Mem_Read_DMA+0x318>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b01      	cmp	r3, #1
 8003296:	d007      	beq.n	80032a8 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0201 	orr.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2222      	movs	r2, #34	@ 0x22
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2240      	movs	r2, #64	@ 0x40
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80032d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4a62      	ldr	r2, [pc, #392]	@ (8003470 <HAL_I2C_Mem_Read_DMA+0x288>)
 80032e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80032ea:	897a      	ldrh	r2, [r7, #10]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80032f0:	893a      	ldrh	r2, [r7, #8]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80032f6:	88fa      	ldrh	r2, [r7, #6]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 80cc 	beq.w	80034a4 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003310:	2b00      	cmp	r3, #0
 8003312:	d02d      	beq.n	8003370 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003318:	4a56      	ldr	r2, [pc, #344]	@ (8003474 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800331a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003320:	4a55      	ldr	r2, [pc, #340]	@ (8003478 <HAL_I2C_Mem_Read_DMA+0x290>)
 8003322:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003328:	2200      	movs	r2, #0
 800332a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003330:	2200      	movs	r2, #0
 8003332:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003338:	2200      	movs	r2, #0
 800333a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003340:	2200      	movs	r2, #0
 8003342:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3310      	adds	r3, #16
 800334e:	4619      	mov	r1, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	461a      	mov	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335a:	f7ff f80b 	bl	8002374 <HAL_DMA_Start_IT>
 800335e:	4603      	mov	r3, r0
 8003360:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003364:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003368:	2b00      	cmp	r3, #0
 800336a:	f040 8087 	bne.w	800347c <HAL_I2C_Mem_Read_DMA+0x294>
 800336e:	e013      	b.n	8003398 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0b3      	b.n	8003500 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003398:	88f8      	ldrh	r0, [r7, #6]
 800339a:	893a      	ldrh	r2, [r7, #8]
 800339c:	8979      	ldrh	r1, [r7, #10]
 800339e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a0:	9301      	str	r3, [sp, #4]
 80033a2:	2323      	movs	r3, #35	@ 0x23
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	4603      	mov	r3, r0
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f96b 	bl	8003684 <I2C_RequestMemoryRead>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d023      	beq.n	80033fc <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff f8a3 	bl	8002504 <HAL_DMA_Abort_IT>
 80033be:	4603      	mov	r3, r0
 80033c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c8:	2200      	movs	r2, #0
 80033ca:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033da:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e081      	b.n	8003500 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003400:	2b01      	cmp	r3, #1
 8003402:	d108      	bne.n	8003416 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	e007      	b.n	8003426 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003424:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003426:	2300      	movs	r3, #0
 8003428:	61bb      	str	r3, [r7, #24]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003452:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003462:	605a      	str	r2, [r3, #4]
 8003464:	e049      	b.n	80034fa <HAL_I2C_Mem_Read_DMA+0x312>
 8003466:	bf00      	nop
 8003468:	20000004 	.word	0x20000004
 800346c:	14f8b589 	.word	0x14f8b589
 8003470:	ffff0000 	.word	0xffff0000
 8003474:	08003855 	.word	0x08003855
 8003478:	08003a13 	.word	0x08003a13
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003490:	f043 0210 	orr.w	r2, r3, #16
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e02d      	b.n	8003500 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80034a4:	88f8      	ldrh	r0, [r7, #6]
 80034a6:	893a      	ldrh	r2, [r7, #8]
 80034a8:	8979      	ldrh	r1, [r7, #10]
 80034aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	2323      	movs	r3, #35	@ 0x23
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	4603      	mov	r3, r0
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 f8e5 	bl	8003684 <I2C_RequestMemoryRead>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e01d      	b.n	8003500 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034e8:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e000      	b.n	8003500 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80034fe:	2302      	movs	r3, #2
  }
}
 8003500:	4618      	mov	r0, r3
 8003502:	3728      	adds	r7, #40	@ 0x28
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af02      	add	r7, sp, #8
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	4608      	mov	r0, r1
 8003562:	4611      	mov	r1, r2
 8003564:	461a      	mov	r2, r3
 8003566:	4603      	mov	r3, r0
 8003568:	817b      	strh	r3, [r7, #10]
 800356a:	460b      	mov	r3, r1
 800356c:	813b      	strh	r3, [r7, #8]
 800356e:	4613      	mov	r3, r2
 8003570:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003580:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	2200      	movs	r2, #0
 800358a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 fa7c 	bl	8003a8c <I2C_WaitOnFlagUntilTimeout>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00d      	beq.n	80035b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035a8:	d103      	bne.n	80035b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e05f      	b.n	8003676 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035b6:	897b      	ldrh	r3, [r7, #10]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	461a      	mov	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c8:	6a3a      	ldr	r2, [r7, #32]
 80035ca:	492d      	ldr	r1, [pc, #180]	@ (8003680 <I2C_RequestMemoryWrite+0x128>)
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 fad7 	bl	8003b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e04c      	b.n	8003676 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035f4:	6a39      	ldr	r1, [r7, #32]
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 fb62 	bl	8003cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00d      	beq.n	800361e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	2b04      	cmp	r3, #4
 8003608:	d107      	bne.n	800361a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003618:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e02b      	b.n	8003676 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800361e:	88fb      	ldrh	r3, [r7, #6]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d105      	bne.n	8003630 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003624:	893b      	ldrh	r3, [r7, #8]
 8003626:	b2da      	uxtb	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	611a      	str	r2, [r3, #16]
 800362e:	e021      	b.n	8003674 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003630:	893b      	ldrh	r3, [r7, #8]
 8003632:	0a1b      	lsrs	r3, r3, #8
 8003634:	b29b      	uxth	r3, r3
 8003636:	b2da      	uxtb	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800363e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003640:	6a39      	ldr	r1, [r7, #32]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fb3c 	bl	8003cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00d      	beq.n	800366a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003652:	2b04      	cmp	r3, #4
 8003654:	d107      	bne.n	8003666 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003664:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e005      	b.n	8003676 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800366a:	893b      	ldrh	r3, [r7, #8]
 800366c:	b2da      	uxtb	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	00010002 	.word	0x00010002

08003684 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	4608      	mov	r0, r1
 800368e:	4611      	mov	r1, r2
 8003690:	461a      	mov	r2, r3
 8003692:	4603      	mov	r3, r0
 8003694:	817b      	strh	r3, [r7, #10]
 8003696:	460b      	mov	r3, r1
 8003698:	813b      	strh	r3, [r7, #8]
 800369a:	4613      	mov	r3, r2
 800369c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f9de 	bl	8003a8c <I2C_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00d      	beq.n	80036f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036e4:	d103      	bne.n	80036ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e0aa      	b.n	8003848 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036f2:	897b      	ldrh	r3, [r7, #10]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	461a      	mov	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003700:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003704:	6a3a      	ldr	r2, [r7, #32]
 8003706:	4952      	ldr	r1, [pc, #328]	@ (8003850 <I2C_RequestMemoryRead+0x1cc>)
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 fa39 	bl	8003b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e097      	b.n	8003848 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800372e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003730:	6a39      	ldr	r1, [r7, #32]
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 fac4 	bl	8003cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00d      	beq.n	800375a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	2b04      	cmp	r3, #4
 8003744:	d107      	bne.n	8003756 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003754:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e076      	b.n	8003848 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800375a:	88fb      	ldrh	r3, [r7, #6]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d105      	bne.n	800376c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003760:	893b      	ldrh	r3, [r7, #8]
 8003762:	b2da      	uxtb	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	611a      	str	r2, [r3, #16]
 800376a:	e021      	b.n	80037b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800376c:	893b      	ldrh	r3, [r7, #8]
 800376e:	0a1b      	lsrs	r3, r3, #8
 8003770:	b29b      	uxth	r3, r3
 8003772:	b2da      	uxtb	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800377a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800377c:	6a39      	ldr	r1, [r7, #32]
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 fa9e 	bl	8003cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00d      	beq.n	80037a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378e:	2b04      	cmp	r3, #4
 8003790:	d107      	bne.n	80037a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e050      	b.n	8003848 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037a6:	893b      	ldrh	r3, [r7, #8]
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037b2:	6a39      	ldr	r1, [r7, #32]
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 fa83 	bl	8003cc0 <I2C_WaitOnTXEFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00d      	beq.n	80037dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d107      	bne.n	80037d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e035      	b.n	8003848 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 f947 	bl	8003a8c <I2C_WaitOnFlagUntilTimeout>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00d      	beq.n	8003820 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003812:	d103      	bne.n	800381c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800381a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e013      	b.n	8003848 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003820:	897b      	ldrh	r3, [r7, #10]
 8003822:	b2db      	uxtb	r3, r3
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	b2da      	uxtb	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003832:	6a3a      	ldr	r2, [r7, #32]
 8003834:	4906      	ldr	r1, [pc, #24]	@ (8003850 <I2C_RequestMemoryRead+0x1cc>)
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f9a2 	bl	8003b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	00010002 	.word	0x00010002

08003854 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003860:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003868:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003870:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003876:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003886:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003894:	2200      	movs	r2, #0
 8003896:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a4:	2200      	movs	r2, #0
 80038a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80038a8:	7cfb      	ldrb	r3, [r7, #19]
 80038aa:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80038ae:	2b21      	cmp	r3, #33	@ 0x21
 80038b0:	d007      	beq.n	80038c2 <I2C_DMAXferCplt+0x6e>
 80038b2:	7cfb      	ldrb	r3, [r7, #19]
 80038b4:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80038b8:	2b22      	cmp	r3, #34	@ 0x22
 80038ba:	d131      	bne.n	8003920 <I2C_DMAXferCplt+0xcc>
 80038bc:	7cbb      	ldrb	r3, [r7, #18]
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d12e      	bne.n	8003920 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038d0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2200      	movs	r2, #0
 80038d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80038d8:	7cfb      	ldrb	r3, [r7, #19]
 80038da:	2b29      	cmp	r3, #41	@ 0x29
 80038dc:	d10a      	bne.n	80038f4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2221      	movs	r2, #33	@ 0x21
 80038e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2228      	movs	r2, #40	@ 0x28
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80038ec:	6978      	ldr	r0, [r7, #20]
 80038ee:	f7ff fe15 	bl	800351c <HAL_I2C_SlaveTxCpltCallback>
 80038f2:	e00c      	b.n	800390e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80038f8:	d109      	bne.n	800390e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2222      	movs	r2, #34	@ 0x22
 80038fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2228      	movs	r2, #40	@ 0x28
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003908:	6978      	ldr	r0, [r7, #20]
 800390a:	f7ff fe11 	bl	8003530 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800391c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800391e:	e074      	b.n	8003a0a <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d06e      	beq.n	8003a0a <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b01      	cmp	r3, #1
 8003934:	d107      	bne.n	8003946 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003944:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003954:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800395c:	d009      	beq.n	8003972 <I2C_DMAXferCplt+0x11e>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2b08      	cmp	r3, #8
 8003962:	d006      	beq.n	8003972 <I2C_DMAXferCplt+0x11e>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800396a:	d002      	beq.n	8003972 <I2C_DMAXferCplt+0x11e>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b20      	cmp	r3, #32
 8003970:	d107      	bne.n	8003982 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003980:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003990:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039a0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2200      	movs	r2, #0
 80039a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80039b0:	6978      	ldr	r0, [r7, #20]
 80039b2:	f7ff fdc7 	bl	8003544 <HAL_I2C_ErrorCallback>
}
 80039b6:	e028      	b.n	8003a0a <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b40      	cmp	r3, #64	@ 0x40
 80039ca:	d10a      	bne.n	80039e2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	2200      	movs	r2, #0
 80039d8:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80039da:	6978      	ldr	r0, [r7, #20]
 80039dc:	f7fd fb6c 	bl	80010b8 <HAL_I2C_MemRxCpltCallback>
}
 80039e0:	e013      	b.n	8003a0a <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d002      	beq.n	80039f6 <I2C_DMAXferCplt+0x1a2>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d103      	bne.n	80039fe <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2200      	movs	r2, #0
 80039fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80039fc:	e002      	b.n	8003a04 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2212      	movs	r2, #18
 8003a02:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a04:	6978      	ldr	r0, [r7, #20]
 8003a06:	f7ff fd7f 	bl	8003508 <HAL_I2C_MasterRxCpltCallback>
}
 8003a0a:	bf00      	nop
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7fe ff0b 	bl	800285c <HAL_DMA_GetError>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d01b      	beq.n	8003a84 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a5a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	f043 0210 	orr.w	r2, r3, #16
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f7ff fd60 	bl	8003544 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a9c:	e048      	b.n	8003b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa4:	d044      	beq.n	8003b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa6:	f7fe fa99 	bl	8001fdc <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d302      	bcc.n	8003abc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d139      	bne.n	8003b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	0c1b      	lsrs	r3, r3, #16
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d10d      	bne.n	8003ae2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	43da      	mvns	r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	bf0c      	ite	eq
 8003ad8:	2301      	moveq	r3, #1
 8003ada:	2300      	movne	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	e00c      	b.n	8003afc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	43da      	mvns	r2, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	4013      	ands	r3, r2
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf0c      	ite	eq
 8003af4:	2301      	moveq	r3, #1
 8003af6:	2300      	movne	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d116      	bne.n	8003b30 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1c:	f043 0220 	orr.w	r2, r3, #32
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e023      	b.n	8003b78 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	0c1b      	lsrs	r3, r3, #16
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d10d      	bne.n	8003b56 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	43da      	mvns	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	4013      	ands	r3, r2
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	bf0c      	ite	eq
 8003b4c:	2301      	moveq	r3, #1
 8003b4e:	2300      	movne	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	461a      	mov	r2, r3
 8003b54:	e00c      	b.n	8003b70 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	43da      	mvns	r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	4013      	ands	r3, r2
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	bf0c      	ite	eq
 8003b68:	2301      	moveq	r3, #1
 8003b6a:	2300      	movne	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d093      	beq.n	8003a9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b8e:	e071      	b.n	8003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b9e:	d123      	bne.n	8003be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd4:	f043 0204 	orr.w	r2, r3, #4
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e067      	b.n	8003cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bee:	d041      	beq.n	8003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf0:	f7fe f9f4 	bl	8001fdc <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d302      	bcc.n	8003c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d136      	bne.n	8003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	0c1b      	lsrs	r3, r3, #16
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d10c      	bne.n	8003c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	43da      	mvns	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	bf14      	ite	ne
 8003c22:	2301      	movne	r3, #1
 8003c24:	2300      	moveq	r3, #0
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	e00b      	b.n	8003c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	43da      	mvns	r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	4013      	ands	r3, r2
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bf14      	ite	ne
 8003c3c:	2301      	movne	r3, #1
 8003c3e:	2300      	moveq	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d016      	beq.n	8003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c60:	f043 0220 	orr.w	r2, r3, #32
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e021      	b.n	8003cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	0c1b      	lsrs	r3, r3, #16
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d10c      	bne.n	8003c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	43da      	mvns	r2, r3
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	bf14      	ite	ne
 8003c90:	2301      	movne	r3, #1
 8003c92:	2300      	moveq	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	e00b      	b.n	8003cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	43da      	mvns	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	bf14      	ite	ne
 8003caa:	2301      	movne	r3, #1
 8003cac:	2300      	moveq	r3, #0
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f47f af6d 	bne.w	8003b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ccc:	e034      	b.n	8003d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f886 	bl	8003de0 <I2C_IsAcknowledgeFailed>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e034      	b.n	8003d48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce4:	d028      	beq.n	8003d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce6:	f7fe f979 	bl	8001fdc <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d302      	bcc.n	8003cfc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d11d      	bne.n	8003d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d06:	2b80      	cmp	r3, #128	@ 0x80
 8003d08:	d016      	beq.n	8003d38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d24:	f043 0220 	orr.w	r2, r3, #32
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e007      	b.n	8003d48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d42:	2b80      	cmp	r3, #128	@ 0x80
 8003d44:	d1c3      	bne.n	8003cce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d5c:	e034      	b.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f83e 	bl	8003de0 <I2C_IsAcknowledgeFailed>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e034      	b.n	8003dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d74:	d028      	beq.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d76:	f7fe f931 	bl	8001fdc <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d302      	bcc.n	8003d8c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d11d      	bne.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d016      	beq.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db4:	f043 0220 	orr.w	r2, r3, #32
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e007      	b.n	8003dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d1c3      	bne.n	8003d5e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003df6:	d11b      	bne.n	8003e30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1c:	f043 0204 	orr.w	r2, r3, #4
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e000      	b.n	8003e32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
	...

08003e40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e267      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d075      	beq.n	8003f4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e5e:	4b88      	ldr	r3, [pc, #544]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d00c      	beq.n	8003e84 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e6a:	4b85      	ldr	r3, [pc, #532]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d112      	bne.n	8003e9c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e76:	4b82      	ldr	r3, [pc, #520]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e82:	d10b      	bne.n	8003e9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e84:	4b7e      	ldr	r3, [pc, #504]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d05b      	beq.n	8003f48 <HAL_RCC_OscConfig+0x108>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d157      	bne.n	8003f48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e242      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ea4:	d106      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x74>
 8003ea6:	4b76      	ldr	r3, [pc, #472]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a75      	ldr	r2, [pc, #468]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	e01d      	b.n	8003ef0 <HAL_RCC_OscConfig+0xb0>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x98>
 8003ebe:	4b70      	ldr	r3, [pc, #448]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a6f      	ldr	r2, [pc, #444]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	4b6d      	ldr	r3, [pc, #436]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a6c      	ldr	r2, [pc, #432]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	e00b      	b.n	8003ef0 <HAL_RCC_OscConfig+0xb0>
 8003ed8:	4b69      	ldr	r3, [pc, #420]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a68      	ldr	r2, [pc, #416]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	4b66      	ldr	r3, [pc, #408]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a65      	ldr	r2, [pc, #404]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003eea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d013      	beq.n	8003f20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7fe f870 	bl	8001fdc <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f00:	f7fe f86c 	bl	8001fdc <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b64      	cmp	r3, #100	@ 0x64
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e207      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f12:	4b5b      	ldr	r3, [pc, #364]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0xc0>
 8003f1e:	e014      	b.n	8003f4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f20:	f7fe f85c 	bl	8001fdc <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f28:	f7fe f858 	bl	8001fdc <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b64      	cmp	r3, #100	@ 0x64
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e1f3      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f3a:	4b51      	ldr	r3, [pc, #324]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0xe8>
 8003f46:	e000      	b.n	8003f4a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d063      	beq.n	800401e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f56:	4b4a      	ldr	r3, [pc, #296]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00b      	beq.n	8003f7a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f62:	4b47      	ldr	r3, [pc, #284]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d11c      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f6e:	4b44      	ldr	r3, [pc, #272]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d116      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f7a:	4b41      	ldr	r3, [pc, #260]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d005      	beq.n	8003f92 <HAL_RCC_OscConfig+0x152>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d001      	beq.n	8003f92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e1c7      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f92:	4b3b      	ldr	r3, [pc, #236]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4937      	ldr	r1, [pc, #220]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fa6:	e03a      	b.n	800401e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d020      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fb0:	4b34      	ldr	r3, [pc, #208]	@ (8004084 <HAL_RCC_OscConfig+0x244>)
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb6:	f7fe f811 	bl	8001fdc <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fbe:	f7fe f80d 	bl	8001fdc <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e1a8      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd0:	4b2b      	ldr	r3, [pc, #172]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0f0      	beq.n	8003fbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fdc:	4b28      	ldr	r3, [pc, #160]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	4925      	ldr	r1, [pc, #148]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	600b      	str	r3, [r1, #0]
 8003ff0:	e015      	b.n	800401e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ff2:	4b24      	ldr	r3, [pc, #144]	@ (8004084 <HAL_RCC_OscConfig+0x244>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fd fff0 	bl	8001fdc <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004000:	f7fd ffec 	bl	8001fdc <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e187      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004012:	4b1b      	ldr	r3, [pc, #108]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f0      	bne.n	8004000 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	d036      	beq.n	8004098 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d016      	beq.n	8004060 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004032:	4b15      	ldr	r3, [pc, #84]	@ (8004088 <HAL_RCC_OscConfig+0x248>)
 8004034:	2201      	movs	r2, #1
 8004036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004038:	f7fd ffd0 	bl	8001fdc <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004040:	f7fd ffcc 	bl	8001fdc <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e167      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004052:	4b0b      	ldr	r3, [pc, #44]	@ (8004080 <HAL_RCC_OscConfig+0x240>)
 8004054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0x200>
 800405e:	e01b      	b.n	8004098 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004060:	4b09      	ldr	r3, [pc, #36]	@ (8004088 <HAL_RCC_OscConfig+0x248>)
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004066:	f7fd ffb9 	bl	8001fdc <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800406c:	e00e      	b.n	800408c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800406e:	f7fd ffb5 	bl	8001fdc <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d907      	bls.n	800408c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e150      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
 8004080:	40023800 	.word	0x40023800
 8004084:	42470000 	.word	0x42470000
 8004088:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800408c:	4b88      	ldr	r3, [pc, #544]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 800408e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1ea      	bne.n	800406e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8097 	beq.w	80041d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040a6:	2300      	movs	r3, #0
 80040a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040aa:	4b81      	ldr	r3, [pc, #516]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 80040ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10f      	bne.n	80040d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	4b7d      	ldr	r3, [pc, #500]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	4a7c      	ldr	r2, [pc, #496]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 80040c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040c6:	4b7a      	ldr	r3, [pc, #488]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ce:	60bb      	str	r3, [r7, #8]
 80040d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d2:	2301      	movs	r3, #1
 80040d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d6:	4b77      	ldr	r3, [pc, #476]	@ (80042b4 <HAL_RCC_OscConfig+0x474>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d118      	bne.n	8004114 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040e2:	4b74      	ldr	r3, [pc, #464]	@ (80042b4 <HAL_RCC_OscConfig+0x474>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a73      	ldr	r2, [pc, #460]	@ (80042b4 <HAL_RCC_OscConfig+0x474>)
 80040e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ee:	f7fd ff75 	bl	8001fdc <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f6:	f7fd ff71 	bl	8001fdc <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e10c      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004108:	4b6a      	ldr	r3, [pc, #424]	@ (80042b4 <HAL_RCC_OscConfig+0x474>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d106      	bne.n	800412a <HAL_RCC_OscConfig+0x2ea>
 800411c:	4b64      	ldr	r3, [pc, #400]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 800411e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004120:	4a63      	ldr	r2, [pc, #396]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	6713      	str	r3, [r2, #112]	@ 0x70
 8004128:	e01c      	b.n	8004164 <HAL_RCC_OscConfig+0x324>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b05      	cmp	r3, #5
 8004130:	d10c      	bne.n	800414c <HAL_RCC_OscConfig+0x30c>
 8004132:	4b5f      	ldr	r3, [pc, #380]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 8004134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004136:	4a5e      	ldr	r2, [pc, #376]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 8004138:	f043 0304 	orr.w	r3, r3, #4
 800413c:	6713      	str	r3, [r2, #112]	@ 0x70
 800413e:	4b5c      	ldr	r3, [pc, #368]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 8004140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004142:	4a5b      	ldr	r2, [pc, #364]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 8004144:	f043 0301 	orr.w	r3, r3, #1
 8004148:	6713      	str	r3, [r2, #112]	@ 0x70
 800414a:	e00b      	b.n	8004164 <HAL_RCC_OscConfig+0x324>
 800414c:	4b58      	ldr	r3, [pc, #352]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 800414e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004150:	4a57      	ldr	r2, [pc, #348]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 8004152:	f023 0301 	bic.w	r3, r3, #1
 8004156:	6713      	str	r3, [r2, #112]	@ 0x70
 8004158:	4b55      	ldr	r3, [pc, #340]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 800415a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800415c:	4a54      	ldr	r2, [pc, #336]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 800415e:	f023 0304 	bic.w	r3, r3, #4
 8004162:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d015      	beq.n	8004198 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416c:	f7fd ff36 	bl	8001fdc <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004172:	e00a      	b.n	800418a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004174:	f7fd ff32 	bl	8001fdc <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004182:	4293      	cmp	r3, r2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e0cb      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800418a:	4b49      	ldr	r3, [pc, #292]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0ee      	beq.n	8004174 <HAL_RCC_OscConfig+0x334>
 8004196:	e014      	b.n	80041c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004198:	f7fd ff20 	bl	8001fdc <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800419e:	e00a      	b.n	80041b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a0:	f7fd ff1c 	bl	8001fdc <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e0b5      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b6:	4b3e      	ldr	r3, [pc, #248]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 80041b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1ee      	bne.n	80041a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d105      	bne.n	80041d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c8:	4b39      	ldr	r3, [pc, #228]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 80041ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041cc:	4a38      	ldr	r2, [pc, #224]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 80041ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 80a1 	beq.w	8004320 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041de:	4b34      	ldr	r3, [pc, #208]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d05c      	beq.n	80042a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d141      	bne.n	8004276 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f2:	4b31      	ldr	r3, [pc, #196]	@ (80042b8 <HAL_RCC_OscConfig+0x478>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f8:	f7fd fef0 	bl	8001fdc <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004200:	f7fd feec 	bl	8001fdc <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e087      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004212:	4b27      	ldr	r3, [pc, #156]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69da      	ldr	r2, [r3, #28]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422c:	019b      	lsls	r3, r3, #6
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004234:	085b      	lsrs	r3, r3, #1
 8004236:	3b01      	subs	r3, #1
 8004238:	041b      	lsls	r3, r3, #16
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004240:	061b      	lsls	r3, r3, #24
 8004242:	491b      	ldr	r1, [pc, #108]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 8004244:	4313      	orrs	r3, r2
 8004246:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004248:	4b1b      	ldr	r3, [pc, #108]	@ (80042b8 <HAL_RCC_OscConfig+0x478>)
 800424a:	2201      	movs	r2, #1
 800424c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800424e:	f7fd fec5 	bl	8001fdc <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004256:	f7fd fec1 	bl	8001fdc <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e05c      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004268:	4b11      	ldr	r3, [pc, #68]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0f0      	beq.n	8004256 <HAL_RCC_OscConfig+0x416>
 8004274:	e054      	b.n	8004320 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004276:	4b10      	ldr	r3, [pc, #64]	@ (80042b8 <HAL_RCC_OscConfig+0x478>)
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f7fd feae 	bl	8001fdc <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004284:	f7fd feaa 	bl	8001fdc <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e045      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004296:	4b06      	ldr	r3, [pc, #24]	@ (80042b0 <HAL_RCC_OscConfig+0x470>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0x444>
 80042a2:	e03d      	b.n	8004320 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d107      	bne.n	80042bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e038      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
 80042b0:	40023800 	.word	0x40023800
 80042b4:	40007000 	.word	0x40007000
 80042b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042bc:	4b1b      	ldr	r3, [pc, #108]	@ (800432c <HAL_RCC_OscConfig+0x4ec>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d028      	beq.n	800431c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d121      	bne.n	800431c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d11a      	bne.n	800431c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042ec:	4013      	ands	r3, r2
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d111      	bne.n	800431c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004302:	085b      	lsrs	r3, r3, #1
 8004304:	3b01      	subs	r3, #1
 8004306:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004308:	429a      	cmp	r2, r3
 800430a:	d107      	bne.n	800431c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004316:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004318:	429a      	cmp	r2, r3
 800431a:	d001      	beq.n	8004320 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40023800 	.word	0x40023800

08004330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e0cc      	b.n	80044de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004344:	4b68      	ldr	r3, [pc, #416]	@ (80044e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d90c      	bls.n	800436c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004352:	4b65      	ldr	r3, [pc, #404]	@ (80044e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800435a:	4b63      	ldr	r3, [pc, #396]	@ (80044e8 <HAL_RCC_ClockConfig+0x1b8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0307 	and.w	r3, r3, #7
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d001      	beq.n	800436c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e0b8      	b.n	80044de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d020      	beq.n	80043ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004384:	4b59      	ldr	r3, [pc, #356]	@ (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	4a58      	ldr	r2, [pc, #352]	@ (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800438e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b00      	cmp	r3, #0
 800439a:	d005      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800439c:	4b53      	ldr	r3, [pc, #332]	@ (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	4a52      	ldr	r2, [pc, #328]	@ (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80043a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043a8:	4b50      	ldr	r3, [pc, #320]	@ (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	494d      	ldr	r1, [pc, #308]	@ (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d044      	beq.n	8004450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d107      	bne.n	80043de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ce:	4b47      	ldr	r3, [pc, #284]	@ (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d119      	bne.n	800440e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e07f      	b.n	80044de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d003      	beq.n	80043ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d107      	bne.n	80043fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ee:	4b3f      	ldr	r3, [pc, #252]	@ (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d109      	bne.n	800440e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e06f      	b.n	80044de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043fe:	4b3b      	ldr	r3, [pc, #236]	@ (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e067      	b.n	80044de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800440e:	4b37      	ldr	r3, [pc, #220]	@ (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f023 0203 	bic.w	r2, r3, #3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	4934      	ldr	r1, [pc, #208]	@ (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	4313      	orrs	r3, r2
 800441e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004420:	f7fd fddc 	bl	8001fdc <HAL_GetTick>
 8004424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004426:	e00a      	b.n	800443e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004428:	f7fd fdd8 	bl	8001fdc <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004436:	4293      	cmp	r3, r2
 8004438:	d901      	bls.n	800443e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e04f      	b.n	80044de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800443e:	4b2b      	ldr	r3, [pc, #172]	@ (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 020c 	and.w	r2, r3, #12
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	429a      	cmp	r2, r3
 800444e:	d1eb      	bne.n	8004428 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004450:	4b25      	ldr	r3, [pc, #148]	@ (80044e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d20c      	bcs.n	8004478 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800445e:	4b22      	ldr	r3, [pc, #136]	@ (80044e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004466:	4b20      	ldr	r3, [pc, #128]	@ (80044e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d001      	beq.n	8004478 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e032      	b.n	80044de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d008      	beq.n	8004496 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004484:	4b19      	ldr	r3, [pc, #100]	@ (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	4916      	ldr	r1, [pc, #88]	@ (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	4313      	orrs	r3, r2
 8004494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d009      	beq.n	80044b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044a2:	4b12      	ldr	r3, [pc, #72]	@ (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	490e      	ldr	r1, [pc, #56]	@ (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044b6:	f000 f821 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 80044ba:	4602      	mov	r2, r0
 80044bc:	4b0b      	ldr	r3, [pc, #44]	@ (80044ec <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	091b      	lsrs	r3, r3, #4
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	490a      	ldr	r1, [pc, #40]	@ (80044f0 <HAL_RCC_ClockConfig+0x1c0>)
 80044c8:	5ccb      	ldrb	r3, [r1, r3]
 80044ca:	fa22 f303 	lsr.w	r3, r2, r3
 80044ce:	4a09      	ldr	r2, [pc, #36]	@ (80044f4 <HAL_RCC_ClockConfig+0x1c4>)
 80044d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80044d2:	4b09      	ldr	r3, [pc, #36]	@ (80044f8 <HAL_RCC_ClockConfig+0x1c8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fd fd3c 	bl	8001f54 <HAL_InitTick>

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40023c00 	.word	0x40023c00
 80044ec:	40023800 	.word	0x40023800
 80044f0:	08009e44 	.word	0x08009e44
 80044f4:	20000004 	.word	0x20000004
 80044f8:	20000008 	.word	0x20000008

080044fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004500:	b094      	sub	sp, #80	@ 0x50
 8004502:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004514:	4b79      	ldr	r3, [pc, #484]	@ (80046fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 030c 	and.w	r3, r3, #12
 800451c:	2b08      	cmp	r3, #8
 800451e:	d00d      	beq.n	800453c <HAL_RCC_GetSysClockFreq+0x40>
 8004520:	2b08      	cmp	r3, #8
 8004522:	f200 80e1 	bhi.w	80046e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <HAL_RCC_GetSysClockFreq+0x34>
 800452a:	2b04      	cmp	r3, #4
 800452c:	d003      	beq.n	8004536 <HAL_RCC_GetSysClockFreq+0x3a>
 800452e:	e0db      	b.n	80046e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004530:	4b73      	ldr	r3, [pc, #460]	@ (8004700 <HAL_RCC_GetSysClockFreq+0x204>)
 8004532:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004534:	e0db      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004536:	4b73      	ldr	r3, [pc, #460]	@ (8004704 <HAL_RCC_GetSysClockFreq+0x208>)
 8004538:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800453a:	e0d8      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800453c:	4b6f      	ldr	r3, [pc, #444]	@ (80046fc <HAL_RCC_GetSysClockFreq+0x200>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004544:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004546:	4b6d      	ldr	r3, [pc, #436]	@ (80046fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d063      	beq.n	800461a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004552:	4b6a      	ldr	r3, [pc, #424]	@ (80046fc <HAL_RCC_GetSysClockFreq+0x200>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	099b      	lsrs	r3, r3, #6
 8004558:	2200      	movs	r2, #0
 800455a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800455c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800455e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004564:	633b      	str	r3, [r7, #48]	@ 0x30
 8004566:	2300      	movs	r3, #0
 8004568:	637b      	str	r3, [r7, #52]	@ 0x34
 800456a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800456e:	4622      	mov	r2, r4
 8004570:	462b      	mov	r3, r5
 8004572:	f04f 0000 	mov.w	r0, #0
 8004576:	f04f 0100 	mov.w	r1, #0
 800457a:	0159      	lsls	r1, r3, #5
 800457c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004580:	0150      	lsls	r0, r2, #5
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4621      	mov	r1, r4
 8004588:	1a51      	subs	r1, r2, r1
 800458a:	6139      	str	r1, [r7, #16]
 800458c:	4629      	mov	r1, r5
 800458e:	eb63 0301 	sbc.w	r3, r3, r1
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045a0:	4659      	mov	r1, fp
 80045a2:	018b      	lsls	r3, r1, #6
 80045a4:	4651      	mov	r1, sl
 80045a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045aa:	4651      	mov	r1, sl
 80045ac:	018a      	lsls	r2, r1, #6
 80045ae:	4651      	mov	r1, sl
 80045b0:	ebb2 0801 	subs.w	r8, r2, r1
 80045b4:	4659      	mov	r1, fp
 80045b6:	eb63 0901 	sbc.w	r9, r3, r1
 80045ba:	f04f 0200 	mov.w	r2, #0
 80045be:	f04f 0300 	mov.w	r3, #0
 80045c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045ce:	4690      	mov	r8, r2
 80045d0:	4699      	mov	r9, r3
 80045d2:	4623      	mov	r3, r4
 80045d4:	eb18 0303 	adds.w	r3, r8, r3
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	462b      	mov	r3, r5
 80045dc:	eb49 0303 	adc.w	r3, r9, r3
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	f04f 0200 	mov.w	r2, #0
 80045e6:	f04f 0300 	mov.w	r3, #0
 80045ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045ee:	4629      	mov	r1, r5
 80045f0:	024b      	lsls	r3, r1, #9
 80045f2:	4621      	mov	r1, r4
 80045f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045f8:	4621      	mov	r1, r4
 80045fa:	024a      	lsls	r2, r1, #9
 80045fc:	4610      	mov	r0, r2
 80045fe:	4619      	mov	r1, r3
 8004600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004602:	2200      	movs	r2, #0
 8004604:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004606:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004608:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800460c:	f7fc fb1c 	bl	8000c48 <__aeabi_uldivmod>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4613      	mov	r3, r2
 8004616:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004618:	e058      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800461a:	4b38      	ldr	r3, [pc, #224]	@ (80046fc <HAL_RCC_GetSysClockFreq+0x200>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	099b      	lsrs	r3, r3, #6
 8004620:	2200      	movs	r2, #0
 8004622:	4618      	mov	r0, r3
 8004624:	4611      	mov	r1, r2
 8004626:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800462a:	623b      	str	r3, [r7, #32]
 800462c:	2300      	movs	r3, #0
 800462e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004630:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004634:	4642      	mov	r2, r8
 8004636:	464b      	mov	r3, r9
 8004638:	f04f 0000 	mov.w	r0, #0
 800463c:	f04f 0100 	mov.w	r1, #0
 8004640:	0159      	lsls	r1, r3, #5
 8004642:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004646:	0150      	lsls	r0, r2, #5
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	4641      	mov	r1, r8
 800464e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004652:	4649      	mov	r1, r9
 8004654:	eb63 0b01 	sbc.w	fp, r3, r1
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004664:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004668:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800466c:	ebb2 040a 	subs.w	r4, r2, sl
 8004670:	eb63 050b 	sbc.w	r5, r3, fp
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	f04f 0300 	mov.w	r3, #0
 800467c:	00eb      	lsls	r3, r5, #3
 800467e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004682:	00e2      	lsls	r2, r4, #3
 8004684:	4614      	mov	r4, r2
 8004686:	461d      	mov	r5, r3
 8004688:	4643      	mov	r3, r8
 800468a:	18e3      	adds	r3, r4, r3
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	464b      	mov	r3, r9
 8004690:	eb45 0303 	adc.w	r3, r5, r3
 8004694:	607b      	str	r3, [r7, #4]
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	f04f 0300 	mov.w	r3, #0
 800469e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046a2:	4629      	mov	r1, r5
 80046a4:	028b      	lsls	r3, r1, #10
 80046a6:	4621      	mov	r1, r4
 80046a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046ac:	4621      	mov	r1, r4
 80046ae:	028a      	lsls	r2, r1, #10
 80046b0:	4610      	mov	r0, r2
 80046b2:	4619      	mov	r1, r3
 80046b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046b6:	2200      	movs	r2, #0
 80046b8:	61bb      	str	r3, [r7, #24]
 80046ba:	61fa      	str	r2, [r7, #28]
 80046bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046c0:	f7fc fac2 	bl	8000c48 <__aeabi_uldivmod>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4613      	mov	r3, r2
 80046ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80046cc:	4b0b      	ldr	r3, [pc, #44]	@ (80046fc <HAL_RCC_GetSysClockFreq+0x200>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	0c1b      	lsrs	r3, r3, #16
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	3301      	adds	r3, #1
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80046dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046e6:	e002      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046e8:	4b05      	ldr	r3, [pc, #20]	@ (8004700 <HAL_RCC_GetSysClockFreq+0x204>)
 80046ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3750      	adds	r7, #80	@ 0x50
 80046f4:	46bd      	mov	sp, r7
 80046f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046fa:	bf00      	nop
 80046fc:	40023800 	.word	0x40023800
 8004700:	00f42400 	.word	0x00f42400
 8004704:	007a1200 	.word	0x007a1200

08004708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800470c:	4b03      	ldr	r3, [pc, #12]	@ (800471c <HAL_RCC_GetHCLKFreq+0x14>)
 800470e:	681b      	ldr	r3, [r3, #0]
}
 8004710:	4618      	mov	r0, r3
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	20000004 	.word	0x20000004

08004720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004724:	f7ff fff0 	bl	8004708 <HAL_RCC_GetHCLKFreq>
 8004728:	4602      	mov	r2, r0
 800472a:	4b05      	ldr	r3, [pc, #20]	@ (8004740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	0a9b      	lsrs	r3, r3, #10
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	4903      	ldr	r1, [pc, #12]	@ (8004744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004736:	5ccb      	ldrb	r3, [r1, r3]
 8004738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800473c:	4618      	mov	r0, r3
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40023800 	.word	0x40023800
 8004744:	08009e54 	.word	0x08009e54

08004748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800474c:	f7ff ffdc 	bl	8004708 <HAL_RCC_GetHCLKFreq>
 8004750:	4602      	mov	r2, r0
 8004752:	4b05      	ldr	r3, [pc, #20]	@ (8004768 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	0b5b      	lsrs	r3, r3, #13
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	4903      	ldr	r1, [pc, #12]	@ (800476c <HAL_RCC_GetPCLK2Freq+0x24>)
 800475e:	5ccb      	ldrb	r3, [r1, r3]
 8004760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004764:	4618      	mov	r0, r3
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40023800 	.word	0x40023800
 800476c:	08009e54 	.word	0x08009e54

08004770 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e041      	b.n	8004806 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fd f9b6 	bl	8001b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3304      	adds	r3, #4
 80047ac:	4619      	mov	r1, r3
 80047ae:	4610      	mov	r0, r2
 80047b0:	f000 fa7e 	bl	8004cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b01      	cmp	r3, #1
 8004822:	d001      	beq.n	8004828 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e04e      	b.n	80048c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0201 	orr.w	r2, r2, #1
 800483e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a23      	ldr	r2, [pc, #140]	@ (80048d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d022      	beq.n	8004890 <HAL_TIM_Base_Start_IT+0x80>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004852:	d01d      	beq.n	8004890 <HAL_TIM_Base_Start_IT+0x80>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a1f      	ldr	r2, [pc, #124]	@ (80048d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d018      	beq.n	8004890 <HAL_TIM_Base_Start_IT+0x80>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a1e      	ldr	r2, [pc, #120]	@ (80048dc <HAL_TIM_Base_Start_IT+0xcc>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d013      	beq.n	8004890 <HAL_TIM_Base_Start_IT+0x80>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a1c      	ldr	r2, [pc, #112]	@ (80048e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00e      	beq.n	8004890 <HAL_TIM_Base_Start_IT+0x80>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a1b      	ldr	r2, [pc, #108]	@ (80048e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d009      	beq.n	8004890 <HAL_TIM_Base_Start_IT+0x80>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a19      	ldr	r2, [pc, #100]	@ (80048e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d004      	beq.n	8004890 <HAL_TIM_Base_Start_IT+0x80>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a18      	ldr	r2, [pc, #96]	@ (80048ec <HAL_TIM_Base_Start_IT+0xdc>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d111      	bne.n	80048b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2b06      	cmp	r3, #6
 80048a0:	d010      	beq.n	80048c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0201 	orr.w	r2, r2, #1
 80048b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b2:	e007      	b.n	80048c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0201 	orr.w	r2, r2, #1
 80048c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40010000 	.word	0x40010000
 80048d8:	40000400 	.word	0x40000400
 80048dc:	40000800 	.word	0x40000800
 80048e0:	40000c00 	.word	0x40000c00
 80048e4:	40010400 	.word	0x40010400
 80048e8:	40014000 	.word	0x40014000
 80048ec:	40001800 	.word	0x40001800

080048f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d020      	beq.n	8004954 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d01b      	beq.n	8004954 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f06f 0202 	mvn.w	r2, #2
 8004924:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f999 	bl	8004c72 <HAL_TIM_IC_CaptureCallback>
 8004940:	e005      	b.n	800494e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f98b 	bl	8004c5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f99c 	bl	8004c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	2b00      	cmp	r3, #0
 800495c:	d020      	beq.n	80049a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01b      	beq.n	80049a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0204 	mvn.w	r2, #4
 8004970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2202      	movs	r2, #2
 8004976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f973 	bl	8004c72 <HAL_TIM_IC_CaptureCallback>
 800498c:	e005      	b.n	800499a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f965 	bl	8004c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f976 	bl	8004c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d020      	beq.n	80049ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01b      	beq.n	80049ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0208 	mvn.w	r2, #8
 80049bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2204      	movs	r2, #4
 80049c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f94d 	bl	8004c72 <HAL_TIM_IC_CaptureCallback>
 80049d8:	e005      	b.n	80049e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f93f 	bl	8004c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f950 	bl	8004c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f003 0310 	and.w	r3, r3, #16
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d020      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01b      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0210 	mvn.w	r2, #16
 8004a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f927 	bl	8004c72 <HAL_TIM_IC_CaptureCallback>
 8004a24:	e005      	b.n	8004a32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f919 	bl	8004c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f92a 	bl	8004c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00c      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d007      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0201 	mvn.w	r2, #1
 8004a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7fc fb44 	bl	80010e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00c      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d007      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fade 	bl	800503c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00c      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d007      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f8fb 	bl	8004c9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00c      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f003 0320 	and.w	r3, r3, #32
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d007      	beq.n	8004ac8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0220 	mvn.w	r2, #32
 8004ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fab0 	bl	8005028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ac8:	bf00      	nop
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_TIM_ConfigClockSource+0x1c>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	e0b4      	b.n	8004c56 <HAL_TIM_ConfigClockSource+0x186>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b24:	d03e      	beq.n	8004ba4 <HAL_TIM_ConfigClockSource+0xd4>
 8004b26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b2a:	f200 8087 	bhi.w	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b32:	f000 8086 	beq.w	8004c42 <HAL_TIM_ConfigClockSource+0x172>
 8004b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b3a:	d87f      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b3c:	2b70      	cmp	r3, #112	@ 0x70
 8004b3e:	d01a      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0xa6>
 8004b40:	2b70      	cmp	r3, #112	@ 0x70
 8004b42:	d87b      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b44:	2b60      	cmp	r3, #96	@ 0x60
 8004b46:	d050      	beq.n	8004bea <HAL_TIM_ConfigClockSource+0x11a>
 8004b48:	2b60      	cmp	r3, #96	@ 0x60
 8004b4a:	d877      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b4c:	2b50      	cmp	r3, #80	@ 0x50
 8004b4e:	d03c      	beq.n	8004bca <HAL_TIM_ConfigClockSource+0xfa>
 8004b50:	2b50      	cmp	r3, #80	@ 0x50
 8004b52:	d873      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b54:	2b40      	cmp	r3, #64	@ 0x40
 8004b56:	d058      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x13a>
 8004b58:	2b40      	cmp	r3, #64	@ 0x40
 8004b5a:	d86f      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b5c:	2b30      	cmp	r3, #48	@ 0x30
 8004b5e:	d064      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x15a>
 8004b60:	2b30      	cmp	r3, #48	@ 0x30
 8004b62:	d86b      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	d060      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x15a>
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d867      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d05c      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x15a>
 8004b70:	2b10      	cmp	r3, #16
 8004b72:	d05a      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x15a>
 8004b74:	e062      	b.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b86:	f000 f9b3 	bl	8004ef0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	609a      	str	r2, [r3, #8]
      break;
 8004ba2:	e04f      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bb4:	f000 f99c 	bl	8004ef0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bc6:	609a      	str	r2, [r3, #8]
      break;
 8004bc8:	e03c      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f000 f910 	bl	8004dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2150      	movs	r1, #80	@ 0x50
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 f969 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 8004be8:	e02c      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f000 f92f 	bl	8004e5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2160      	movs	r1, #96	@ 0x60
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 f959 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 8004c08:	e01c      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c16:	461a      	mov	r2, r3
 8004c18:	f000 f8f0 	bl	8004dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2140      	movs	r1, #64	@ 0x40
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 f949 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 8004c28:	e00c      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4619      	mov	r1, r3
 8004c34:	4610      	mov	r0, r2
 8004c36:	f000 f940 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 8004c3a:	e003      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c40:	e000      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b083      	sub	sp, #12
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
	...

08004cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a43      	ldr	r2, [pc, #268]	@ (8004dd0 <TIM_Base_SetConfig+0x120>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d013      	beq.n	8004cf0 <TIM_Base_SetConfig+0x40>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cce:	d00f      	beq.n	8004cf0 <TIM_Base_SetConfig+0x40>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a40      	ldr	r2, [pc, #256]	@ (8004dd4 <TIM_Base_SetConfig+0x124>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d00b      	beq.n	8004cf0 <TIM_Base_SetConfig+0x40>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a3f      	ldr	r2, [pc, #252]	@ (8004dd8 <TIM_Base_SetConfig+0x128>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d007      	beq.n	8004cf0 <TIM_Base_SetConfig+0x40>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a3e      	ldr	r2, [pc, #248]	@ (8004ddc <TIM_Base_SetConfig+0x12c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d003      	beq.n	8004cf0 <TIM_Base_SetConfig+0x40>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a3d      	ldr	r2, [pc, #244]	@ (8004de0 <TIM_Base_SetConfig+0x130>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d108      	bne.n	8004d02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a32      	ldr	r2, [pc, #200]	@ (8004dd0 <TIM_Base_SetConfig+0x120>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d02b      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d10:	d027      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a2f      	ldr	r2, [pc, #188]	@ (8004dd4 <TIM_Base_SetConfig+0x124>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d023      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a2e      	ldr	r2, [pc, #184]	@ (8004dd8 <TIM_Base_SetConfig+0x128>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d01f      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a2d      	ldr	r2, [pc, #180]	@ (8004ddc <TIM_Base_SetConfig+0x12c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d01b      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a2c      	ldr	r2, [pc, #176]	@ (8004de0 <TIM_Base_SetConfig+0x130>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d017      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a2b      	ldr	r2, [pc, #172]	@ (8004de4 <TIM_Base_SetConfig+0x134>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d013      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a2a      	ldr	r2, [pc, #168]	@ (8004de8 <TIM_Base_SetConfig+0x138>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00f      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a29      	ldr	r2, [pc, #164]	@ (8004dec <TIM_Base_SetConfig+0x13c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d00b      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a28      	ldr	r2, [pc, #160]	@ (8004df0 <TIM_Base_SetConfig+0x140>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d007      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a27      	ldr	r2, [pc, #156]	@ (8004df4 <TIM_Base_SetConfig+0x144>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d003      	beq.n	8004d62 <TIM_Base_SetConfig+0xb2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a26      	ldr	r2, [pc, #152]	@ (8004df8 <TIM_Base_SetConfig+0x148>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d108      	bne.n	8004d74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a0e      	ldr	r2, [pc, #56]	@ (8004dd0 <TIM_Base_SetConfig+0x120>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d003      	beq.n	8004da2 <TIM_Base_SetConfig+0xf2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a10      	ldr	r2, [pc, #64]	@ (8004de0 <TIM_Base_SetConfig+0x130>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d103      	bne.n	8004daa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	691a      	ldr	r2, [r3, #16]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f043 0204 	orr.w	r2, r3, #4
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	601a      	str	r2, [r3, #0]
}
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40010000 	.word	0x40010000
 8004dd4:	40000400 	.word	0x40000400
 8004dd8:	40000800 	.word	0x40000800
 8004ddc:	40000c00 	.word	0x40000c00
 8004de0:	40010400 	.word	0x40010400
 8004de4:	40014000 	.word	0x40014000
 8004de8:	40014400 	.word	0x40014400
 8004dec:	40014800 	.word	0x40014800
 8004df0:	40001800 	.word	0x40001800
 8004df4:	40001c00 	.word	0x40001c00
 8004df8:	40002000 	.word	0x40002000

08004dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f023 0201 	bic.w	r2, r3, #1
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f023 030a 	bic.w	r3, r3, #10
 8004e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b087      	sub	sp, #28
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f023 0210 	bic.w	r2, r3, #16
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	031b      	lsls	r3, r3, #12
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	621a      	str	r2, [r3, #32]
}
 8004eae:	bf00      	nop
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b085      	sub	sp, #20
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f043 0307 	orr.w	r3, r3, #7
 8004edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	609a      	str	r2, [r3, #8]
}
 8004ee4:	bf00      	nop
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	021a      	lsls	r2, r3, #8
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	609a      	str	r2, [r3, #8]
}
 8004f24:	bf00      	nop
 8004f26:	371c      	adds	r7, #28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e05a      	b.n	8004ffe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a21      	ldr	r2, [pc, #132]	@ (800500c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d022      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f94:	d01d      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8005010 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d018      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8005014 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1a      	ldr	r2, [pc, #104]	@ (8005018 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00e      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a18      	ldr	r2, [pc, #96]	@ (800501c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d009      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a17      	ldr	r2, [pc, #92]	@ (8005020 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d004      	beq.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a15      	ldr	r2, [pc, #84]	@ (8005024 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d10c      	bne.n	8004fec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40010000 	.word	0x40010000
 8005010:	40000400 	.word	0x40000400
 8005014:	40000800 	.word	0x40000800
 8005018:	40000c00 	.word	0x40000c00
 800501c:	40010400 	.word	0x40010400
 8005020:	40014000 	.word	0x40014000
 8005024:	40001800 	.word	0x40001800

08005028 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e042      	b.n	80050e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d106      	bne.n	800507c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7fc fd6e 	bl	8001b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2224      	movs	r2, #36	@ 0x24
 8005080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005092:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fde3 	bl	8005c60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	691a      	ldr	r2, [r3, #16]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695a      	ldr	r2, [r3, #20]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08c      	sub	sp, #48	@ 0x30
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	4613      	mov	r3, r2
 80050fc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b20      	cmp	r3, #32
 8005108:	d162      	bne.n	80051d0 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <HAL_UART_Transmit_DMA+0x26>
 8005110:	88fb      	ldrh	r3, [r7, #6]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e05b      	b.n	80051d2 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	88fa      	ldrh	r2, [r7, #6]
 8005124:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	88fa      	ldrh	r2, [r7, #6]
 800512a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2221      	movs	r2, #33	@ 0x21
 8005136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513e:	4a27      	ldr	r2, [pc, #156]	@ (80051dc <HAL_UART_Transmit_DMA+0xec>)
 8005140:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005146:	4a26      	ldr	r2, [pc, #152]	@ (80051e0 <HAL_UART_Transmit_DMA+0xf0>)
 8005148:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514e:	4a25      	ldr	r2, [pc, #148]	@ (80051e4 <HAL_UART_Transmit_DMA+0xf4>)
 8005150:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005156:	2200      	movs	r2, #0
 8005158:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800515a:	f107 0308 	add.w	r3, r7, #8
 800515e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005166:	6819      	ldr	r1, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3304      	adds	r3, #4
 800516e:	461a      	mov	r2, r3
 8005170:	88fb      	ldrh	r3, [r7, #6]
 8005172:	f7fd f8ff 	bl	8002374 <HAL_DMA_Start_IT>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d008      	beq.n	800518e <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2210      	movs	r2, #16
 8005180:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2220      	movs	r2, #32
 8005186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e021      	b.n	80051d2 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005196:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3314      	adds	r3, #20
 800519e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	e853 3f00 	ldrex	r3, [r3]
 80051a6:	617b      	str	r3, [r7, #20]
   return(result);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3314      	adds	r3, #20
 80051b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80051ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051bc:	6a39      	ldr	r1, [r7, #32]
 80051be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051c0:	e841 2300 	strex	r3, r2, [r1]
 80051c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e5      	bne.n	8005198 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e000      	b.n	80051d2 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80051d0:	2302      	movs	r3, #2
  }
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3730      	adds	r7, #48	@ 0x30
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	08005791 	.word	0x08005791
 80051e0:	0800582b 	.word	0x0800582b
 80051e4:	08005847 	.word	0x08005847

080051e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b0ba      	sub	sp, #232	@ 0xe8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800520e:	2300      	movs	r3, #0
 8005210:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005214:	2300      	movs	r3, #0
 8005216:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800521a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005226:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10f      	bne.n	800524e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800522e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005232:	f003 0320 	and.w	r3, r3, #32
 8005236:	2b00      	cmp	r3, #0
 8005238:	d009      	beq.n	800524e <HAL_UART_IRQHandler+0x66>
 800523a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fc4b 	bl	8005ae2 <UART_Receive_IT>
      return;
 800524c:	e273      	b.n	8005736 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800524e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 80de 	beq.w	8005414 <HAL_UART_IRQHandler+0x22c>
 8005258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d106      	bne.n	8005272 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005268:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 80d1 	beq.w	8005414 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00b      	beq.n	8005296 <HAL_UART_IRQHandler+0xae>
 800527e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005286:	2b00      	cmp	r3, #0
 8005288:	d005      	beq.n	8005296 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800528e:	f043 0201 	orr.w	r2, r3, #1
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800529a:	f003 0304 	and.w	r3, r3, #4
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00b      	beq.n	80052ba <HAL_UART_IRQHandler+0xd2>
 80052a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d005      	beq.n	80052ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b2:	f043 0202 	orr.w	r2, r3, #2
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00b      	beq.n	80052de <HAL_UART_IRQHandler+0xf6>
 80052c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d005      	beq.n	80052de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d6:	f043 0204 	orr.w	r2, r3, #4
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80052de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d011      	beq.n	800530e <HAL_UART_IRQHandler+0x126>
 80052ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d105      	bne.n	8005302 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80052f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d005      	beq.n	800530e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005306:	f043 0208 	orr.w	r2, r3, #8
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 820a 	beq.w	800572c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800531c:	f003 0320 	and.w	r3, r3, #32
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <HAL_UART_IRQHandler+0x14e>
 8005324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005328:	f003 0320 	and.w	r3, r3, #32
 800532c:	2b00      	cmp	r3, #0
 800532e:	d002      	beq.n	8005336 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fbd6 	bl	8005ae2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005340:	2b40      	cmp	r3, #64	@ 0x40
 8005342:	bf0c      	ite	eq
 8005344:	2301      	moveq	r3, #1
 8005346:	2300      	movne	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d103      	bne.n	8005362 <HAL_UART_IRQHandler+0x17a>
 800535a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d04f      	beq.n	8005402 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fae1 	bl	800592a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005372:	2b40      	cmp	r3, #64	@ 0x40
 8005374:	d141      	bne.n	80053fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3314      	adds	r3, #20
 800537c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005380:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005384:	e853 3f00 	ldrex	r3, [r3]
 8005388:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800538c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005390:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005394:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3314      	adds	r3, #20
 800539e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80053a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80053a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80053ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80053ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1d9      	bne.n	8005376 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d013      	beq.n	80053f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ce:	4a8a      	ldr	r2, [pc, #552]	@ (80055f8 <HAL_UART_IRQHandler+0x410>)
 80053d0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fd f894 	bl	8002504 <HAL_DMA_Abort_IT>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d016      	beq.n	8005410 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80053ec:	4610      	mov	r0, r2
 80053ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f0:	e00e      	b.n	8005410 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f9b6 	bl	8005764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f8:	e00a      	b.n	8005410 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f9b2 	bl	8005764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005400:	e006      	b.n	8005410 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f9ae 	bl	8005764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800540e:	e18d      	b.n	800572c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005410:	bf00      	nop
    return;
 8005412:	e18b      	b.n	800572c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005418:	2b01      	cmp	r3, #1
 800541a:	f040 8167 	bne.w	80056ec <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800541e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005422:	f003 0310 	and.w	r3, r3, #16
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 8160 	beq.w	80056ec <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800542c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005430:	f003 0310 	and.w	r3, r3, #16
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 8159 	beq.w	80056ec <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800543a:	2300      	movs	r3, #0
 800543c:	60bb      	str	r3, [r7, #8]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	60bb      	str	r3, [r7, #8]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	60bb      	str	r3, [r7, #8]
 800544e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800545a:	2b40      	cmp	r3, #64	@ 0x40
 800545c:	f040 80ce 	bne.w	80055fc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800546c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 80a9 	beq.w	80055c8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800547a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800547e:	429a      	cmp	r2, r3
 8005480:	f080 80a2 	bcs.w	80055c8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800548a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005496:	f000 8088 	beq.w	80055aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	330c      	adds	r3, #12
 80054a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054a8:	e853 3f00 	ldrex	r3, [r3]
 80054ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80054b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80054b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	330c      	adds	r3, #12
 80054c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80054c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80054ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80054d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80054d6:	e841 2300 	strex	r3, r2, [r1]
 80054da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80054de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1d9      	bne.n	800549a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3314      	adds	r3, #20
 80054ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054f0:	e853 3f00 	ldrex	r3, [r3]
 80054f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80054f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054f8:	f023 0301 	bic.w	r3, r3, #1
 80054fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3314      	adds	r3, #20
 8005506:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800550a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800550e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005510:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005512:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005516:	e841 2300 	strex	r3, r2, [r1]
 800551a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800551c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1e1      	bne.n	80054e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3314      	adds	r3, #20
 8005528:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800552c:	e853 3f00 	ldrex	r3, [r3]
 8005530:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005532:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005534:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005538:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3314      	adds	r3, #20
 8005542:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005546:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005548:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800554c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800554e:	e841 2300 	strex	r3, r2, [r1]
 8005552:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005554:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1e3      	bne.n	8005522 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2220      	movs	r2, #32
 800555e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	330c      	adds	r3, #12
 800556e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005572:	e853 3f00 	ldrex	r3, [r3]
 8005576:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005578:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800557a:	f023 0310 	bic.w	r3, r3, #16
 800557e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	330c      	adds	r3, #12
 8005588:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800558c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800558e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005590:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005592:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005594:	e841 2300 	strex	r3, r2, [r1]
 8005598:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800559a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e3      	bne.n	8005568 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fc ff3d 	bl	8002424 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2202      	movs	r2, #2
 80055ae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	b29b      	uxth	r3, r3
 80055be:	4619      	mov	r1, r3
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f8d9 	bl	8005778 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80055c6:	e0b3      	b.n	8005730 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055d0:	429a      	cmp	r2, r3
 80055d2:	f040 80ad 	bne.w	8005730 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055e0:	f040 80a6 	bne.w	8005730 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055ee:	4619      	mov	r1, r3
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f8c1 	bl	8005778 <HAL_UARTEx_RxEventCallback>
      return;
 80055f6:	e09b      	b.n	8005730 <HAL_UART_IRQHandler+0x548>
 80055f8:	080059f1 	.word	0x080059f1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005604:	b29b      	uxth	r3, r3
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005610:	b29b      	uxth	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 808e 	beq.w	8005734 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005618:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 8089 	beq.w	8005734 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	330c      	adds	r3, #12
 8005628:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562c:	e853 3f00 	ldrex	r3, [r3]
 8005630:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005634:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005638:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	330c      	adds	r3, #12
 8005642:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005646:	647a      	str	r2, [r7, #68]	@ 0x44
 8005648:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800564c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e3      	bne.n	8005622 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3314      	adds	r3, #20
 8005660:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	623b      	str	r3, [r7, #32]
   return(result);
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	f023 0301 	bic.w	r3, r3, #1
 8005670:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3314      	adds	r3, #20
 800567a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800567e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005680:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005684:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005686:	e841 2300 	strex	r3, r2, [r1]
 800568a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800568c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e3      	bne.n	800565a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	330c      	adds	r3, #12
 80056a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	e853 3f00 	ldrex	r3, [r3]
 80056ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f023 0310 	bic.w	r3, r3, #16
 80056b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	330c      	adds	r3, #12
 80056c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80056c4:	61fa      	str	r2, [r7, #28]
 80056c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c8:	69b9      	ldr	r1, [r7, #24]
 80056ca:	69fa      	ldr	r2, [r7, #28]
 80056cc:	e841 2300 	strex	r3, r2, [r1]
 80056d0:	617b      	str	r3, [r7, #20]
   return(result);
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1e3      	bne.n	80056a0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80056e2:	4619      	mov	r1, r3
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f847 	bl	8005778 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056ea:	e023      	b.n	8005734 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d009      	beq.n	800570c <HAL_UART_IRQHandler+0x524>
 80056f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f984 	bl	8005a12 <UART_Transmit_IT>
    return;
 800570a:	e014      	b.n	8005736 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800570c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00e      	beq.n	8005736 <HAL_UART_IRQHandler+0x54e>
 8005718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800571c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005720:	2b00      	cmp	r3, #0
 8005722:	d008      	beq.n	8005736 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f9c4 	bl	8005ab2 <UART_EndTransmit_IT>
    return;
 800572a:	e004      	b.n	8005736 <HAL_UART_IRQHandler+0x54e>
    return;
 800572c:	bf00      	nop
 800572e:	e002      	b.n	8005736 <HAL_UART_IRQHandler+0x54e>
      return;
 8005730:	bf00      	nop
 8005732:	e000      	b.n	8005736 <HAL_UART_IRQHandler+0x54e>
      return;
 8005734:	bf00      	nop
  }
}
 8005736:	37e8      	adds	r7, #232	@ 0xe8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b090      	sub	sp, #64	@ 0x40
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800579c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d137      	bne.n	800581c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80057ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ae:	2200      	movs	r2, #0
 80057b0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80057b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3314      	adds	r3, #20
 80057b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	623b      	str	r3, [r7, #32]
   return(result);
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3314      	adds	r3, #20
 80057d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80057d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1e5      	bne.n	80057b2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	330c      	adds	r3, #12
 80057ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80057fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	330c      	adds	r3, #12
 8005804:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005806:	61fa      	str	r2, [r7, #28]
 8005808:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	69b9      	ldr	r1, [r7, #24]
 800580c:	69fa      	ldr	r2, [r7, #28]
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	617b      	str	r3, [r7, #20]
   return(result);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e5      	bne.n	80057e6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800581a:	e002      	b.n	8005822 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800581c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800581e:	f7fb fc35 	bl	800108c <HAL_UART_TxCpltCallback>
}
 8005822:	bf00      	nop
 8005824:	3740      	adds	r7, #64	@ 0x40
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b084      	sub	sp, #16
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005836:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f7ff ff7f 	bl	800573c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800583e:	bf00      	nop
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005856:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005862:	2b80      	cmp	r3, #128	@ 0x80
 8005864:	bf0c      	ite	eq
 8005866:	2301      	moveq	r3, #1
 8005868:	2300      	movne	r3, #0
 800586a:	b2db      	uxtb	r3, r3
 800586c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b21      	cmp	r3, #33	@ 0x21
 8005878:	d108      	bne.n	800588c <UART_DMAError+0x46>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d005      	beq.n	800588c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2200      	movs	r2, #0
 8005884:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005886:	68b8      	ldr	r0, [r7, #8]
 8005888:	f000 f827 	bl	80058da <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005896:	2b40      	cmp	r3, #64	@ 0x40
 8005898:	bf0c      	ite	eq
 800589a:	2301      	moveq	r3, #1
 800589c:	2300      	movne	r3, #0
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b22      	cmp	r3, #34	@ 0x22
 80058ac:	d108      	bne.n	80058c0 <UART_DMAError+0x7a>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2200      	movs	r2, #0
 80058b8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80058ba:	68b8      	ldr	r0, [r7, #8]
 80058bc:	f000 f835 	bl	800592a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058c4:	f043 0210 	orr.w	r2, r3, #16
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058cc:	68b8      	ldr	r0, [r7, #8]
 80058ce:	f7ff ff49 	bl	8005764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058d2:	bf00      	nop
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80058da:	b480      	push	{r7}
 80058dc:	b089      	sub	sp, #36	@ 0x24
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	330c      	adds	r3, #12
 80058e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	e853 3f00 	ldrex	r3, [r3]
 80058f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80058f8:	61fb      	str	r3, [r7, #28]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	330c      	adds	r3, #12
 8005900:	69fa      	ldr	r2, [r7, #28]
 8005902:	61ba      	str	r2, [r7, #24]
 8005904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005906:	6979      	ldr	r1, [r7, #20]
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	e841 2300 	strex	r3, r2, [r1]
 800590e:	613b      	str	r3, [r7, #16]
   return(result);
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1e5      	bne.n	80058e2 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2220      	movs	r2, #32
 800591a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800591e:	bf00      	nop
 8005920:	3724      	adds	r7, #36	@ 0x24
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800592a:	b480      	push	{r7}
 800592c:	b095      	sub	sp, #84	@ 0x54
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	330c      	adds	r3, #12
 8005938:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800593c:	e853 3f00 	ldrex	r3, [r3]
 8005940:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005944:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005948:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	330c      	adds	r3, #12
 8005950:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005952:	643a      	str	r2, [r7, #64]	@ 0x40
 8005954:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005956:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005958:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e5      	bne.n	8005932 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3314      	adds	r3, #20
 800596c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	61fb      	str	r3, [r7, #28]
   return(result);
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	f023 0301 	bic.w	r3, r3, #1
 800597c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3314      	adds	r3, #20
 8005984:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005986:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005988:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800598c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e5      	bne.n	8005966 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d119      	bne.n	80059d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	330c      	adds	r3, #12
 80059a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	e853 3f00 	ldrex	r3, [r3]
 80059b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f023 0310 	bic.w	r3, r3, #16
 80059b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	330c      	adds	r3, #12
 80059c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059c2:	61ba      	str	r2, [r7, #24]
 80059c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c6:	6979      	ldr	r1, [r7, #20]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	613b      	str	r3, [r7, #16]
   return(result);
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1e5      	bne.n	80059a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2220      	movs	r2, #32
 80059da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80059e4:	bf00      	nop
 80059e6:	3754      	adds	r7, #84	@ 0x54
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f7ff fead 	bl	8005764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a0a:	bf00      	nop
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b085      	sub	sp, #20
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b21      	cmp	r3, #33	@ 0x21
 8005a24:	d13e      	bne.n	8005aa4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a2e:	d114      	bne.n	8005a5a <UART_Transmit_IT+0x48>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d110      	bne.n	8005a5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	1c9a      	adds	r2, r3, #2
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	621a      	str	r2, [r3, #32]
 8005a58:	e008      	b.n	8005a6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	1c59      	adds	r1, r3, #1
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6211      	str	r1, [r2, #32]
 8005a64:	781a      	ldrb	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10f      	bne.n	8005aa0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	e000      	b.n	8005aa6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005aa4:	2302      	movs	r3, #2
  }
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b082      	sub	sp, #8
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ac8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2220      	movs	r2, #32
 8005ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7fb fada 	bl	800108c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b08c      	sub	sp, #48	@ 0x30
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b22      	cmp	r3, #34	@ 0x22
 8005afc:	f040 80aa 	bne.w	8005c54 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b08:	d115      	bne.n	8005b36 <UART_Receive_IT+0x54>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d111      	bne.n	8005b36 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b16:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b2e:	1c9a      	adds	r2, r3, #2
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b34:	e024      	b.n	8005b80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b44:	d007      	beq.n	8005b56 <UART_Receive_IT+0x74>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10a      	bne.n	8005b64 <UART_Receive_IT+0x82>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d106      	bne.n	8005b64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	e008      	b.n	8005b76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	3b01      	subs	r3, #1
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d15d      	bne.n	8005c50 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68da      	ldr	r2, [r3, #12]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0220 	bic.w	r2, r2, #32
 8005ba2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68da      	ldr	r2, [r3, #12]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695a      	ldr	r2, [r3, #20]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0201 	bic.w	r2, r2, #1
 8005bc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d135      	bne.n	8005c46 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	330c      	adds	r3, #12
 8005be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	e853 3f00 	ldrex	r3, [r3]
 8005bee:	613b      	str	r3, [r7, #16]
   return(result);
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f023 0310 	bic.w	r3, r3, #16
 8005bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	330c      	adds	r3, #12
 8005bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c00:	623a      	str	r2, [r7, #32]
 8005c02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c04:	69f9      	ldr	r1, [r7, #28]
 8005c06:	6a3a      	ldr	r2, [r7, #32]
 8005c08:	e841 2300 	strex	r3, r2, [r1]
 8005c0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1e5      	bne.n	8005be0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0310 	and.w	r3, r3, #16
 8005c1e:	2b10      	cmp	r3, #16
 8005c20:	d10a      	bne.n	8005c38 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	60fb      	str	r3, [r7, #12]
 8005c36:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7ff fd9a 	bl	8005778 <HAL_UARTEx_RxEventCallback>
 8005c44:	e002      	b.n	8005c4c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7ff fd82 	bl	8005750 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	e002      	b.n	8005c56 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	e000      	b.n	8005c56 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005c54:	2302      	movs	r3, #2
  }
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3730      	adds	r7, #48	@ 0x30
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
	...

08005c60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c64:	b0c0      	sub	sp, #256	@ 0x100
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c7c:	68d9      	ldr	r1, [r3, #12]
 8005c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	ea40 0301 	orr.w	r3, r0, r1
 8005c88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005cb8:	f021 010c 	bic.w	r1, r1, #12
 8005cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005cc6:	430b      	orrs	r3, r1
 8005cc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cda:	6999      	ldr	r1, [r3, #24]
 8005cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	ea40 0301 	orr.w	r3, r0, r1
 8005ce6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	4b8f      	ldr	r3, [pc, #572]	@ (8005f2c <UART_SetConfig+0x2cc>)
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d005      	beq.n	8005d00 <UART_SetConfig+0xa0>
 8005cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	4b8d      	ldr	r3, [pc, #564]	@ (8005f30 <UART_SetConfig+0x2d0>)
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d104      	bne.n	8005d0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d00:	f7fe fd22 	bl	8004748 <HAL_RCC_GetPCLK2Freq>
 8005d04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005d08:	e003      	b.n	8005d12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d0a:	f7fe fd09 	bl	8004720 <HAL_RCC_GetPCLK1Freq>
 8005d0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d1c:	f040 810c 	bne.w	8005f38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d24:	2200      	movs	r2, #0
 8005d26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005d2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005d32:	4622      	mov	r2, r4
 8005d34:	462b      	mov	r3, r5
 8005d36:	1891      	adds	r1, r2, r2
 8005d38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005d3a:	415b      	adcs	r3, r3
 8005d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d42:	4621      	mov	r1, r4
 8005d44:	eb12 0801 	adds.w	r8, r2, r1
 8005d48:	4629      	mov	r1, r5
 8005d4a:	eb43 0901 	adc.w	r9, r3, r1
 8005d4e:	f04f 0200 	mov.w	r2, #0
 8005d52:	f04f 0300 	mov.w	r3, #0
 8005d56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d62:	4690      	mov	r8, r2
 8005d64:	4699      	mov	r9, r3
 8005d66:	4623      	mov	r3, r4
 8005d68:	eb18 0303 	adds.w	r3, r8, r3
 8005d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d70:	462b      	mov	r3, r5
 8005d72:	eb49 0303 	adc.w	r3, r9, r3
 8005d76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005d8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d8e:	460b      	mov	r3, r1
 8005d90:	18db      	adds	r3, r3, r3
 8005d92:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d94:	4613      	mov	r3, r2
 8005d96:	eb42 0303 	adc.w	r3, r2, r3
 8005d9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005da0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005da4:	f7fa ff50 	bl	8000c48 <__aeabi_uldivmod>
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
 8005dac:	4b61      	ldr	r3, [pc, #388]	@ (8005f34 <UART_SetConfig+0x2d4>)
 8005dae:	fba3 2302 	umull	r2, r3, r3, r2
 8005db2:	095b      	lsrs	r3, r3, #5
 8005db4:	011c      	lsls	r4, r3, #4
 8005db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005dc0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005dc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005dc8:	4642      	mov	r2, r8
 8005dca:	464b      	mov	r3, r9
 8005dcc:	1891      	adds	r1, r2, r2
 8005dce:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005dd0:	415b      	adcs	r3, r3
 8005dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005dd8:	4641      	mov	r1, r8
 8005dda:	eb12 0a01 	adds.w	sl, r2, r1
 8005dde:	4649      	mov	r1, r9
 8005de0:	eb43 0b01 	adc.w	fp, r3, r1
 8005de4:	f04f 0200 	mov.w	r2, #0
 8005de8:	f04f 0300 	mov.w	r3, #0
 8005dec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005df0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005df4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005df8:	4692      	mov	sl, r2
 8005dfa:	469b      	mov	fp, r3
 8005dfc:	4643      	mov	r3, r8
 8005dfe:	eb1a 0303 	adds.w	r3, sl, r3
 8005e02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e06:	464b      	mov	r3, r9
 8005e08:	eb4b 0303 	adc.w	r3, fp, r3
 8005e0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005e20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e24:	460b      	mov	r3, r1
 8005e26:	18db      	adds	r3, r3, r3
 8005e28:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	eb42 0303 	adc.w	r3, r2, r3
 8005e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005e3a:	f7fa ff05 	bl	8000c48 <__aeabi_uldivmod>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	4611      	mov	r1, r2
 8005e44:	4b3b      	ldr	r3, [pc, #236]	@ (8005f34 <UART_SetConfig+0x2d4>)
 8005e46:	fba3 2301 	umull	r2, r3, r3, r1
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	2264      	movs	r2, #100	@ 0x64
 8005e4e:	fb02 f303 	mul.w	r3, r2, r3
 8005e52:	1acb      	subs	r3, r1, r3
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005e5a:	4b36      	ldr	r3, [pc, #216]	@ (8005f34 <UART_SetConfig+0x2d4>)
 8005e5c:	fba3 2302 	umull	r2, r3, r3, r2
 8005e60:	095b      	lsrs	r3, r3, #5
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005e68:	441c      	add	r4, r3
 8005e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005e78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005e7c:	4642      	mov	r2, r8
 8005e7e:	464b      	mov	r3, r9
 8005e80:	1891      	adds	r1, r2, r2
 8005e82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005e84:	415b      	adcs	r3, r3
 8005e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005e8c:	4641      	mov	r1, r8
 8005e8e:	1851      	adds	r1, r2, r1
 8005e90:	6339      	str	r1, [r7, #48]	@ 0x30
 8005e92:	4649      	mov	r1, r9
 8005e94:	414b      	adcs	r3, r1
 8005e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	f04f 0300 	mov.w	r3, #0
 8005ea0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ea4:	4659      	mov	r1, fp
 8005ea6:	00cb      	lsls	r3, r1, #3
 8005ea8:	4651      	mov	r1, sl
 8005eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eae:	4651      	mov	r1, sl
 8005eb0:	00ca      	lsls	r2, r1, #3
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	4642      	mov	r2, r8
 8005eba:	189b      	adds	r3, r3, r2
 8005ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ec0:	464b      	mov	r3, r9
 8005ec2:	460a      	mov	r2, r1
 8005ec4:	eb42 0303 	adc.w	r3, r2, r3
 8005ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ed8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005edc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	18db      	adds	r3, r3, r3
 8005ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	eb42 0303 	adc.w	r3, r2, r3
 8005eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005eee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ef2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005ef6:	f7fa fea7 	bl	8000c48 <__aeabi_uldivmod>
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	4b0d      	ldr	r3, [pc, #52]	@ (8005f34 <UART_SetConfig+0x2d4>)
 8005f00:	fba3 1302 	umull	r1, r3, r3, r2
 8005f04:	095b      	lsrs	r3, r3, #5
 8005f06:	2164      	movs	r1, #100	@ 0x64
 8005f08:	fb01 f303 	mul.w	r3, r1, r3
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	3332      	adds	r3, #50	@ 0x32
 8005f12:	4a08      	ldr	r2, [pc, #32]	@ (8005f34 <UART_SetConfig+0x2d4>)
 8005f14:	fba2 2303 	umull	r2, r3, r2, r3
 8005f18:	095b      	lsrs	r3, r3, #5
 8005f1a:	f003 0207 	and.w	r2, r3, #7
 8005f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4422      	add	r2, r4
 8005f26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f28:	e106      	b.n	8006138 <UART_SetConfig+0x4d8>
 8005f2a:	bf00      	nop
 8005f2c:	40011000 	.word	0x40011000
 8005f30:	40011400 	.word	0x40011400
 8005f34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f42:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005f46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005f4a:	4642      	mov	r2, r8
 8005f4c:	464b      	mov	r3, r9
 8005f4e:	1891      	adds	r1, r2, r2
 8005f50:	6239      	str	r1, [r7, #32]
 8005f52:	415b      	adcs	r3, r3
 8005f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f5a:	4641      	mov	r1, r8
 8005f5c:	1854      	adds	r4, r2, r1
 8005f5e:	4649      	mov	r1, r9
 8005f60:	eb43 0501 	adc.w	r5, r3, r1
 8005f64:	f04f 0200 	mov.w	r2, #0
 8005f68:	f04f 0300 	mov.w	r3, #0
 8005f6c:	00eb      	lsls	r3, r5, #3
 8005f6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f72:	00e2      	lsls	r2, r4, #3
 8005f74:	4614      	mov	r4, r2
 8005f76:	461d      	mov	r5, r3
 8005f78:	4643      	mov	r3, r8
 8005f7a:	18e3      	adds	r3, r4, r3
 8005f7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f80:	464b      	mov	r3, r9
 8005f82:	eb45 0303 	adc.w	r3, r5, r3
 8005f86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f9a:	f04f 0200 	mov.w	r2, #0
 8005f9e:	f04f 0300 	mov.w	r3, #0
 8005fa2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	008b      	lsls	r3, r1, #2
 8005faa:	4621      	mov	r1, r4
 8005fac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fb0:	4621      	mov	r1, r4
 8005fb2:	008a      	lsls	r2, r1, #2
 8005fb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005fb8:	f7fa fe46 	bl	8000c48 <__aeabi_uldivmod>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4b60      	ldr	r3, [pc, #384]	@ (8006144 <UART_SetConfig+0x4e4>)
 8005fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8005fc6:	095b      	lsrs	r3, r3, #5
 8005fc8:	011c      	lsls	r4, r3, #4
 8005fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005fd4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005fd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005fdc:	4642      	mov	r2, r8
 8005fde:	464b      	mov	r3, r9
 8005fe0:	1891      	adds	r1, r2, r2
 8005fe2:	61b9      	str	r1, [r7, #24]
 8005fe4:	415b      	adcs	r3, r3
 8005fe6:	61fb      	str	r3, [r7, #28]
 8005fe8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fec:	4641      	mov	r1, r8
 8005fee:	1851      	adds	r1, r2, r1
 8005ff0:	6139      	str	r1, [r7, #16]
 8005ff2:	4649      	mov	r1, r9
 8005ff4:	414b      	adcs	r3, r1
 8005ff6:	617b      	str	r3, [r7, #20]
 8005ff8:	f04f 0200 	mov.w	r2, #0
 8005ffc:	f04f 0300 	mov.w	r3, #0
 8006000:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006004:	4659      	mov	r1, fp
 8006006:	00cb      	lsls	r3, r1, #3
 8006008:	4651      	mov	r1, sl
 800600a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800600e:	4651      	mov	r1, sl
 8006010:	00ca      	lsls	r2, r1, #3
 8006012:	4610      	mov	r0, r2
 8006014:	4619      	mov	r1, r3
 8006016:	4603      	mov	r3, r0
 8006018:	4642      	mov	r2, r8
 800601a:	189b      	adds	r3, r3, r2
 800601c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006020:	464b      	mov	r3, r9
 8006022:	460a      	mov	r2, r1
 8006024:	eb42 0303 	adc.w	r3, r2, r3
 8006028:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800602c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006036:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006044:	4649      	mov	r1, r9
 8006046:	008b      	lsls	r3, r1, #2
 8006048:	4641      	mov	r1, r8
 800604a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800604e:	4641      	mov	r1, r8
 8006050:	008a      	lsls	r2, r1, #2
 8006052:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006056:	f7fa fdf7 	bl	8000c48 <__aeabi_uldivmod>
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	4611      	mov	r1, r2
 8006060:	4b38      	ldr	r3, [pc, #224]	@ (8006144 <UART_SetConfig+0x4e4>)
 8006062:	fba3 2301 	umull	r2, r3, r3, r1
 8006066:	095b      	lsrs	r3, r3, #5
 8006068:	2264      	movs	r2, #100	@ 0x64
 800606a:	fb02 f303 	mul.w	r3, r2, r3
 800606e:	1acb      	subs	r3, r1, r3
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	3332      	adds	r3, #50	@ 0x32
 8006074:	4a33      	ldr	r2, [pc, #204]	@ (8006144 <UART_SetConfig+0x4e4>)
 8006076:	fba2 2303 	umull	r2, r3, r2, r3
 800607a:	095b      	lsrs	r3, r3, #5
 800607c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006080:	441c      	add	r4, r3
 8006082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006086:	2200      	movs	r2, #0
 8006088:	673b      	str	r3, [r7, #112]	@ 0x70
 800608a:	677a      	str	r2, [r7, #116]	@ 0x74
 800608c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006090:	4642      	mov	r2, r8
 8006092:	464b      	mov	r3, r9
 8006094:	1891      	adds	r1, r2, r2
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	415b      	adcs	r3, r3
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060a0:	4641      	mov	r1, r8
 80060a2:	1851      	adds	r1, r2, r1
 80060a4:	6039      	str	r1, [r7, #0]
 80060a6:	4649      	mov	r1, r9
 80060a8:	414b      	adcs	r3, r1
 80060aa:	607b      	str	r3, [r7, #4]
 80060ac:	f04f 0200 	mov.w	r2, #0
 80060b0:	f04f 0300 	mov.w	r3, #0
 80060b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060b8:	4659      	mov	r1, fp
 80060ba:	00cb      	lsls	r3, r1, #3
 80060bc:	4651      	mov	r1, sl
 80060be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060c2:	4651      	mov	r1, sl
 80060c4:	00ca      	lsls	r2, r1, #3
 80060c6:	4610      	mov	r0, r2
 80060c8:	4619      	mov	r1, r3
 80060ca:	4603      	mov	r3, r0
 80060cc:	4642      	mov	r2, r8
 80060ce:	189b      	adds	r3, r3, r2
 80060d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060d2:	464b      	mov	r3, r9
 80060d4:	460a      	mov	r2, r1
 80060d6:	eb42 0303 	adc.w	r3, r2, r3
 80060da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80060e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	f04f 0300 	mov.w	r3, #0
 80060f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80060f4:	4649      	mov	r1, r9
 80060f6:	008b      	lsls	r3, r1, #2
 80060f8:	4641      	mov	r1, r8
 80060fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060fe:	4641      	mov	r1, r8
 8006100:	008a      	lsls	r2, r1, #2
 8006102:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006106:	f7fa fd9f 	bl	8000c48 <__aeabi_uldivmod>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4b0d      	ldr	r3, [pc, #52]	@ (8006144 <UART_SetConfig+0x4e4>)
 8006110:	fba3 1302 	umull	r1, r3, r3, r2
 8006114:	095b      	lsrs	r3, r3, #5
 8006116:	2164      	movs	r1, #100	@ 0x64
 8006118:	fb01 f303 	mul.w	r3, r1, r3
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	3332      	adds	r3, #50	@ 0x32
 8006122:	4a08      	ldr	r2, [pc, #32]	@ (8006144 <UART_SetConfig+0x4e4>)
 8006124:	fba2 2303 	umull	r2, r3, r2, r3
 8006128:	095b      	lsrs	r3, r3, #5
 800612a:	f003 020f 	and.w	r2, r3, #15
 800612e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4422      	add	r2, r4
 8006136:	609a      	str	r2, [r3, #8]
}
 8006138:	bf00      	nop
 800613a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800613e:	46bd      	mov	sp, r7
 8006140:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006144:	51eb851f 	.word	0x51eb851f

08006148 <__cvt>:
 8006148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800614c:	ec57 6b10 	vmov	r6, r7, d0
 8006150:	2f00      	cmp	r7, #0
 8006152:	460c      	mov	r4, r1
 8006154:	4619      	mov	r1, r3
 8006156:	463b      	mov	r3, r7
 8006158:	bfbb      	ittet	lt
 800615a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800615e:	461f      	movlt	r7, r3
 8006160:	2300      	movge	r3, #0
 8006162:	232d      	movlt	r3, #45	@ 0x2d
 8006164:	700b      	strb	r3, [r1, #0]
 8006166:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006168:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800616c:	4691      	mov	r9, r2
 800616e:	f023 0820 	bic.w	r8, r3, #32
 8006172:	bfbc      	itt	lt
 8006174:	4632      	movlt	r2, r6
 8006176:	4616      	movlt	r6, r2
 8006178:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800617c:	d005      	beq.n	800618a <__cvt+0x42>
 800617e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006182:	d100      	bne.n	8006186 <__cvt+0x3e>
 8006184:	3401      	adds	r4, #1
 8006186:	2102      	movs	r1, #2
 8006188:	e000      	b.n	800618c <__cvt+0x44>
 800618a:	2103      	movs	r1, #3
 800618c:	ab03      	add	r3, sp, #12
 800618e:	9301      	str	r3, [sp, #4]
 8006190:	ab02      	add	r3, sp, #8
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	ec47 6b10 	vmov	d0, r6, r7
 8006198:	4653      	mov	r3, sl
 800619a:	4622      	mov	r2, r4
 800619c:	f000 fe5c 	bl	8006e58 <_dtoa_r>
 80061a0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80061a4:	4605      	mov	r5, r0
 80061a6:	d119      	bne.n	80061dc <__cvt+0x94>
 80061a8:	f019 0f01 	tst.w	r9, #1
 80061ac:	d00e      	beq.n	80061cc <__cvt+0x84>
 80061ae:	eb00 0904 	add.w	r9, r0, r4
 80061b2:	2200      	movs	r2, #0
 80061b4:	2300      	movs	r3, #0
 80061b6:	4630      	mov	r0, r6
 80061b8:	4639      	mov	r1, r7
 80061ba:	f7fa fc85 	bl	8000ac8 <__aeabi_dcmpeq>
 80061be:	b108      	cbz	r0, 80061c4 <__cvt+0x7c>
 80061c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80061c4:	2230      	movs	r2, #48	@ 0x30
 80061c6:	9b03      	ldr	r3, [sp, #12]
 80061c8:	454b      	cmp	r3, r9
 80061ca:	d31e      	bcc.n	800620a <__cvt+0xc2>
 80061cc:	9b03      	ldr	r3, [sp, #12]
 80061ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061d0:	1b5b      	subs	r3, r3, r5
 80061d2:	4628      	mov	r0, r5
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	b004      	add	sp, #16
 80061d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061e0:	eb00 0904 	add.w	r9, r0, r4
 80061e4:	d1e5      	bne.n	80061b2 <__cvt+0x6a>
 80061e6:	7803      	ldrb	r3, [r0, #0]
 80061e8:	2b30      	cmp	r3, #48	@ 0x30
 80061ea:	d10a      	bne.n	8006202 <__cvt+0xba>
 80061ec:	2200      	movs	r2, #0
 80061ee:	2300      	movs	r3, #0
 80061f0:	4630      	mov	r0, r6
 80061f2:	4639      	mov	r1, r7
 80061f4:	f7fa fc68 	bl	8000ac8 <__aeabi_dcmpeq>
 80061f8:	b918      	cbnz	r0, 8006202 <__cvt+0xba>
 80061fa:	f1c4 0401 	rsb	r4, r4, #1
 80061fe:	f8ca 4000 	str.w	r4, [sl]
 8006202:	f8da 3000 	ldr.w	r3, [sl]
 8006206:	4499      	add	r9, r3
 8006208:	e7d3      	b.n	80061b2 <__cvt+0x6a>
 800620a:	1c59      	adds	r1, r3, #1
 800620c:	9103      	str	r1, [sp, #12]
 800620e:	701a      	strb	r2, [r3, #0]
 8006210:	e7d9      	b.n	80061c6 <__cvt+0x7e>

08006212 <__exponent>:
 8006212:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006214:	2900      	cmp	r1, #0
 8006216:	bfba      	itte	lt
 8006218:	4249      	neglt	r1, r1
 800621a:	232d      	movlt	r3, #45	@ 0x2d
 800621c:	232b      	movge	r3, #43	@ 0x2b
 800621e:	2909      	cmp	r1, #9
 8006220:	7002      	strb	r2, [r0, #0]
 8006222:	7043      	strb	r3, [r0, #1]
 8006224:	dd29      	ble.n	800627a <__exponent+0x68>
 8006226:	f10d 0307 	add.w	r3, sp, #7
 800622a:	461d      	mov	r5, r3
 800622c:	270a      	movs	r7, #10
 800622e:	461a      	mov	r2, r3
 8006230:	fbb1 f6f7 	udiv	r6, r1, r7
 8006234:	fb07 1416 	mls	r4, r7, r6, r1
 8006238:	3430      	adds	r4, #48	@ 0x30
 800623a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800623e:	460c      	mov	r4, r1
 8006240:	2c63      	cmp	r4, #99	@ 0x63
 8006242:	f103 33ff 	add.w	r3, r3, #4294967295
 8006246:	4631      	mov	r1, r6
 8006248:	dcf1      	bgt.n	800622e <__exponent+0x1c>
 800624a:	3130      	adds	r1, #48	@ 0x30
 800624c:	1e94      	subs	r4, r2, #2
 800624e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006252:	1c41      	adds	r1, r0, #1
 8006254:	4623      	mov	r3, r4
 8006256:	42ab      	cmp	r3, r5
 8006258:	d30a      	bcc.n	8006270 <__exponent+0x5e>
 800625a:	f10d 0309 	add.w	r3, sp, #9
 800625e:	1a9b      	subs	r3, r3, r2
 8006260:	42ac      	cmp	r4, r5
 8006262:	bf88      	it	hi
 8006264:	2300      	movhi	r3, #0
 8006266:	3302      	adds	r3, #2
 8006268:	4403      	add	r3, r0
 800626a:	1a18      	subs	r0, r3, r0
 800626c:	b003      	add	sp, #12
 800626e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006270:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006274:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006278:	e7ed      	b.n	8006256 <__exponent+0x44>
 800627a:	2330      	movs	r3, #48	@ 0x30
 800627c:	3130      	adds	r1, #48	@ 0x30
 800627e:	7083      	strb	r3, [r0, #2]
 8006280:	70c1      	strb	r1, [r0, #3]
 8006282:	1d03      	adds	r3, r0, #4
 8006284:	e7f1      	b.n	800626a <__exponent+0x58>
	...

08006288 <_printf_float>:
 8006288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800628c:	b08d      	sub	sp, #52	@ 0x34
 800628e:	460c      	mov	r4, r1
 8006290:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006294:	4616      	mov	r6, r2
 8006296:	461f      	mov	r7, r3
 8006298:	4605      	mov	r5, r0
 800629a:	f000 fcdb 	bl	8006c54 <_localeconv_r>
 800629e:	6803      	ldr	r3, [r0, #0]
 80062a0:	9304      	str	r3, [sp, #16]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7f9 ffe4 	bl	8000270 <strlen>
 80062a8:	2300      	movs	r3, #0
 80062aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80062ac:	f8d8 3000 	ldr.w	r3, [r8]
 80062b0:	9005      	str	r0, [sp, #20]
 80062b2:	3307      	adds	r3, #7
 80062b4:	f023 0307 	bic.w	r3, r3, #7
 80062b8:	f103 0208 	add.w	r2, r3, #8
 80062bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80062c0:	f8d4 b000 	ldr.w	fp, [r4]
 80062c4:	f8c8 2000 	str.w	r2, [r8]
 80062c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80062d0:	9307      	str	r3, [sp, #28]
 80062d2:	f8cd 8018 	str.w	r8, [sp, #24]
 80062d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80062da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062de:	4b9c      	ldr	r3, [pc, #624]	@ (8006550 <_printf_float+0x2c8>)
 80062e0:	f04f 32ff 	mov.w	r2, #4294967295
 80062e4:	f7fa fc22 	bl	8000b2c <__aeabi_dcmpun>
 80062e8:	bb70      	cbnz	r0, 8006348 <_printf_float+0xc0>
 80062ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062ee:	4b98      	ldr	r3, [pc, #608]	@ (8006550 <_printf_float+0x2c8>)
 80062f0:	f04f 32ff 	mov.w	r2, #4294967295
 80062f4:	f7fa fbfc 	bl	8000af0 <__aeabi_dcmple>
 80062f8:	bb30      	cbnz	r0, 8006348 <_printf_float+0xc0>
 80062fa:	2200      	movs	r2, #0
 80062fc:	2300      	movs	r3, #0
 80062fe:	4640      	mov	r0, r8
 8006300:	4649      	mov	r1, r9
 8006302:	f7fa fbeb 	bl	8000adc <__aeabi_dcmplt>
 8006306:	b110      	cbz	r0, 800630e <_printf_float+0x86>
 8006308:	232d      	movs	r3, #45	@ 0x2d
 800630a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800630e:	4a91      	ldr	r2, [pc, #580]	@ (8006554 <_printf_float+0x2cc>)
 8006310:	4b91      	ldr	r3, [pc, #580]	@ (8006558 <_printf_float+0x2d0>)
 8006312:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006316:	bf94      	ite	ls
 8006318:	4690      	movls	r8, r2
 800631a:	4698      	movhi	r8, r3
 800631c:	2303      	movs	r3, #3
 800631e:	6123      	str	r3, [r4, #16]
 8006320:	f02b 0304 	bic.w	r3, fp, #4
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	f04f 0900 	mov.w	r9, #0
 800632a:	9700      	str	r7, [sp, #0]
 800632c:	4633      	mov	r3, r6
 800632e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006330:	4621      	mov	r1, r4
 8006332:	4628      	mov	r0, r5
 8006334:	f000 f9d2 	bl	80066dc <_printf_common>
 8006338:	3001      	adds	r0, #1
 800633a:	f040 808d 	bne.w	8006458 <_printf_float+0x1d0>
 800633e:	f04f 30ff 	mov.w	r0, #4294967295
 8006342:	b00d      	add	sp, #52	@ 0x34
 8006344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006348:	4642      	mov	r2, r8
 800634a:	464b      	mov	r3, r9
 800634c:	4640      	mov	r0, r8
 800634e:	4649      	mov	r1, r9
 8006350:	f7fa fbec 	bl	8000b2c <__aeabi_dcmpun>
 8006354:	b140      	cbz	r0, 8006368 <_printf_float+0xe0>
 8006356:	464b      	mov	r3, r9
 8006358:	2b00      	cmp	r3, #0
 800635a:	bfbc      	itt	lt
 800635c:	232d      	movlt	r3, #45	@ 0x2d
 800635e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006362:	4a7e      	ldr	r2, [pc, #504]	@ (800655c <_printf_float+0x2d4>)
 8006364:	4b7e      	ldr	r3, [pc, #504]	@ (8006560 <_printf_float+0x2d8>)
 8006366:	e7d4      	b.n	8006312 <_printf_float+0x8a>
 8006368:	6863      	ldr	r3, [r4, #4]
 800636a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800636e:	9206      	str	r2, [sp, #24]
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	d13b      	bne.n	80063ec <_printf_float+0x164>
 8006374:	2306      	movs	r3, #6
 8006376:	6063      	str	r3, [r4, #4]
 8006378:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800637c:	2300      	movs	r3, #0
 800637e:	6022      	str	r2, [r4, #0]
 8006380:	9303      	str	r3, [sp, #12]
 8006382:	ab0a      	add	r3, sp, #40	@ 0x28
 8006384:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006388:	ab09      	add	r3, sp, #36	@ 0x24
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	6861      	ldr	r1, [r4, #4]
 800638e:	ec49 8b10 	vmov	d0, r8, r9
 8006392:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006396:	4628      	mov	r0, r5
 8006398:	f7ff fed6 	bl	8006148 <__cvt>
 800639c:	9b06      	ldr	r3, [sp, #24]
 800639e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80063a0:	2b47      	cmp	r3, #71	@ 0x47
 80063a2:	4680      	mov	r8, r0
 80063a4:	d129      	bne.n	80063fa <_printf_float+0x172>
 80063a6:	1cc8      	adds	r0, r1, #3
 80063a8:	db02      	blt.n	80063b0 <_printf_float+0x128>
 80063aa:	6863      	ldr	r3, [r4, #4]
 80063ac:	4299      	cmp	r1, r3
 80063ae:	dd41      	ble.n	8006434 <_printf_float+0x1ac>
 80063b0:	f1aa 0a02 	sub.w	sl, sl, #2
 80063b4:	fa5f fa8a 	uxtb.w	sl, sl
 80063b8:	3901      	subs	r1, #1
 80063ba:	4652      	mov	r2, sl
 80063bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80063c0:	9109      	str	r1, [sp, #36]	@ 0x24
 80063c2:	f7ff ff26 	bl	8006212 <__exponent>
 80063c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063c8:	1813      	adds	r3, r2, r0
 80063ca:	2a01      	cmp	r2, #1
 80063cc:	4681      	mov	r9, r0
 80063ce:	6123      	str	r3, [r4, #16]
 80063d0:	dc02      	bgt.n	80063d8 <_printf_float+0x150>
 80063d2:	6822      	ldr	r2, [r4, #0]
 80063d4:	07d2      	lsls	r2, r2, #31
 80063d6:	d501      	bpl.n	80063dc <_printf_float+0x154>
 80063d8:	3301      	adds	r3, #1
 80063da:	6123      	str	r3, [r4, #16]
 80063dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d0a2      	beq.n	800632a <_printf_float+0xa2>
 80063e4:	232d      	movs	r3, #45	@ 0x2d
 80063e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063ea:	e79e      	b.n	800632a <_printf_float+0xa2>
 80063ec:	9a06      	ldr	r2, [sp, #24]
 80063ee:	2a47      	cmp	r2, #71	@ 0x47
 80063f0:	d1c2      	bne.n	8006378 <_printf_float+0xf0>
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1c0      	bne.n	8006378 <_printf_float+0xf0>
 80063f6:	2301      	movs	r3, #1
 80063f8:	e7bd      	b.n	8006376 <_printf_float+0xee>
 80063fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80063fe:	d9db      	bls.n	80063b8 <_printf_float+0x130>
 8006400:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006404:	d118      	bne.n	8006438 <_printf_float+0x1b0>
 8006406:	2900      	cmp	r1, #0
 8006408:	6863      	ldr	r3, [r4, #4]
 800640a:	dd0b      	ble.n	8006424 <_printf_float+0x19c>
 800640c:	6121      	str	r1, [r4, #16]
 800640e:	b913      	cbnz	r3, 8006416 <_printf_float+0x18e>
 8006410:	6822      	ldr	r2, [r4, #0]
 8006412:	07d0      	lsls	r0, r2, #31
 8006414:	d502      	bpl.n	800641c <_printf_float+0x194>
 8006416:	3301      	adds	r3, #1
 8006418:	440b      	add	r3, r1
 800641a:	6123      	str	r3, [r4, #16]
 800641c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800641e:	f04f 0900 	mov.w	r9, #0
 8006422:	e7db      	b.n	80063dc <_printf_float+0x154>
 8006424:	b913      	cbnz	r3, 800642c <_printf_float+0x1a4>
 8006426:	6822      	ldr	r2, [r4, #0]
 8006428:	07d2      	lsls	r2, r2, #31
 800642a:	d501      	bpl.n	8006430 <_printf_float+0x1a8>
 800642c:	3302      	adds	r3, #2
 800642e:	e7f4      	b.n	800641a <_printf_float+0x192>
 8006430:	2301      	movs	r3, #1
 8006432:	e7f2      	b.n	800641a <_printf_float+0x192>
 8006434:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006438:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800643a:	4299      	cmp	r1, r3
 800643c:	db05      	blt.n	800644a <_printf_float+0x1c2>
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	6121      	str	r1, [r4, #16]
 8006442:	07d8      	lsls	r0, r3, #31
 8006444:	d5ea      	bpl.n	800641c <_printf_float+0x194>
 8006446:	1c4b      	adds	r3, r1, #1
 8006448:	e7e7      	b.n	800641a <_printf_float+0x192>
 800644a:	2900      	cmp	r1, #0
 800644c:	bfd4      	ite	le
 800644e:	f1c1 0202 	rsble	r2, r1, #2
 8006452:	2201      	movgt	r2, #1
 8006454:	4413      	add	r3, r2
 8006456:	e7e0      	b.n	800641a <_printf_float+0x192>
 8006458:	6823      	ldr	r3, [r4, #0]
 800645a:	055a      	lsls	r2, r3, #21
 800645c:	d407      	bmi.n	800646e <_printf_float+0x1e6>
 800645e:	6923      	ldr	r3, [r4, #16]
 8006460:	4642      	mov	r2, r8
 8006462:	4631      	mov	r1, r6
 8006464:	4628      	mov	r0, r5
 8006466:	47b8      	blx	r7
 8006468:	3001      	adds	r0, #1
 800646a:	d12b      	bne.n	80064c4 <_printf_float+0x23c>
 800646c:	e767      	b.n	800633e <_printf_float+0xb6>
 800646e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006472:	f240 80dd 	bls.w	8006630 <_printf_float+0x3a8>
 8006476:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800647a:	2200      	movs	r2, #0
 800647c:	2300      	movs	r3, #0
 800647e:	f7fa fb23 	bl	8000ac8 <__aeabi_dcmpeq>
 8006482:	2800      	cmp	r0, #0
 8006484:	d033      	beq.n	80064ee <_printf_float+0x266>
 8006486:	4a37      	ldr	r2, [pc, #220]	@ (8006564 <_printf_float+0x2dc>)
 8006488:	2301      	movs	r3, #1
 800648a:	4631      	mov	r1, r6
 800648c:	4628      	mov	r0, r5
 800648e:	47b8      	blx	r7
 8006490:	3001      	adds	r0, #1
 8006492:	f43f af54 	beq.w	800633e <_printf_float+0xb6>
 8006496:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800649a:	4543      	cmp	r3, r8
 800649c:	db02      	blt.n	80064a4 <_printf_float+0x21c>
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	07d8      	lsls	r0, r3, #31
 80064a2:	d50f      	bpl.n	80064c4 <_printf_float+0x23c>
 80064a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064a8:	4631      	mov	r1, r6
 80064aa:	4628      	mov	r0, r5
 80064ac:	47b8      	blx	r7
 80064ae:	3001      	adds	r0, #1
 80064b0:	f43f af45 	beq.w	800633e <_printf_float+0xb6>
 80064b4:	f04f 0900 	mov.w	r9, #0
 80064b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80064bc:	f104 0a1a 	add.w	sl, r4, #26
 80064c0:	45c8      	cmp	r8, r9
 80064c2:	dc09      	bgt.n	80064d8 <_printf_float+0x250>
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	079b      	lsls	r3, r3, #30
 80064c8:	f100 8103 	bmi.w	80066d2 <_printf_float+0x44a>
 80064cc:	68e0      	ldr	r0, [r4, #12]
 80064ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064d0:	4298      	cmp	r0, r3
 80064d2:	bfb8      	it	lt
 80064d4:	4618      	movlt	r0, r3
 80064d6:	e734      	b.n	8006342 <_printf_float+0xba>
 80064d8:	2301      	movs	r3, #1
 80064da:	4652      	mov	r2, sl
 80064dc:	4631      	mov	r1, r6
 80064de:	4628      	mov	r0, r5
 80064e0:	47b8      	blx	r7
 80064e2:	3001      	adds	r0, #1
 80064e4:	f43f af2b 	beq.w	800633e <_printf_float+0xb6>
 80064e8:	f109 0901 	add.w	r9, r9, #1
 80064ec:	e7e8      	b.n	80064c0 <_printf_float+0x238>
 80064ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	dc39      	bgt.n	8006568 <_printf_float+0x2e0>
 80064f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006564 <_printf_float+0x2dc>)
 80064f6:	2301      	movs	r3, #1
 80064f8:	4631      	mov	r1, r6
 80064fa:	4628      	mov	r0, r5
 80064fc:	47b8      	blx	r7
 80064fe:	3001      	adds	r0, #1
 8006500:	f43f af1d 	beq.w	800633e <_printf_float+0xb6>
 8006504:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006508:	ea59 0303 	orrs.w	r3, r9, r3
 800650c:	d102      	bne.n	8006514 <_printf_float+0x28c>
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	07d9      	lsls	r1, r3, #31
 8006512:	d5d7      	bpl.n	80064c4 <_printf_float+0x23c>
 8006514:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006518:	4631      	mov	r1, r6
 800651a:	4628      	mov	r0, r5
 800651c:	47b8      	blx	r7
 800651e:	3001      	adds	r0, #1
 8006520:	f43f af0d 	beq.w	800633e <_printf_float+0xb6>
 8006524:	f04f 0a00 	mov.w	sl, #0
 8006528:	f104 0b1a 	add.w	fp, r4, #26
 800652c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800652e:	425b      	negs	r3, r3
 8006530:	4553      	cmp	r3, sl
 8006532:	dc01      	bgt.n	8006538 <_printf_float+0x2b0>
 8006534:	464b      	mov	r3, r9
 8006536:	e793      	b.n	8006460 <_printf_float+0x1d8>
 8006538:	2301      	movs	r3, #1
 800653a:	465a      	mov	r2, fp
 800653c:	4631      	mov	r1, r6
 800653e:	4628      	mov	r0, r5
 8006540:	47b8      	blx	r7
 8006542:	3001      	adds	r0, #1
 8006544:	f43f aefb 	beq.w	800633e <_printf_float+0xb6>
 8006548:	f10a 0a01 	add.w	sl, sl, #1
 800654c:	e7ee      	b.n	800652c <_printf_float+0x2a4>
 800654e:	bf00      	nop
 8006550:	7fefffff 	.word	0x7fefffff
 8006554:	08009e64 	.word	0x08009e64
 8006558:	08009e68 	.word	0x08009e68
 800655c:	08009e6c 	.word	0x08009e6c
 8006560:	08009e70 	.word	0x08009e70
 8006564:	08009e74 	.word	0x08009e74
 8006568:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800656a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800656e:	4553      	cmp	r3, sl
 8006570:	bfa8      	it	ge
 8006572:	4653      	movge	r3, sl
 8006574:	2b00      	cmp	r3, #0
 8006576:	4699      	mov	r9, r3
 8006578:	dc36      	bgt.n	80065e8 <_printf_float+0x360>
 800657a:	f04f 0b00 	mov.w	fp, #0
 800657e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006582:	f104 021a 	add.w	r2, r4, #26
 8006586:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006588:	9306      	str	r3, [sp, #24]
 800658a:	eba3 0309 	sub.w	r3, r3, r9
 800658e:	455b      	cmp	r3, fp
 8006590:	dc31      	bgt.n	80065f6 <_printf_float+0x36e>
 8006592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006594:	459a      	cmp	sl, r3
 8006596:	dc3a      	bgt.n	800660e <_printf_float+0x386>
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	07da      	lsls	r2, r3, #31
 800659c:	d437      	bmi.n	800660e <_printf_float+0x386>
 800659e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065a0:	ebaa 0903 	sub.w	r9, sl, r3
 80065a4:	9b06      	ldr	r3, [sp, #24]
 80065a6:	ebaa 0303 	sub.w	r3, sl, r3
 80065aa:	4599      	cmp	r9, r3
 80065ac:	bfa8      	it	ge
 80065ae:	4699      	movge	r9, r3
 80065b0:	f1b9 0f00 	cmp.w	r9, #0
 80065b4:	dc33      	bgt.n	800661e <_printf_float+0x396>
 80065b6:	f04f 0800 	mov.w	r8, #0
 80065ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065be:	f104 0b1a 	add.w	fp, r4, #26
 80065c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065c4:	ebaa 0303 	sub.w	r3, sl, r3
 80065c8:	eba3 0309 	sub.w	r3, r3, r9
 80065cc:	4543      	cmp	r3, r8
 80065ce:	f77f af79 	ble.w	80064c4 <_printf_float+0x23c>
 80065d2:	2301      	movs	r3, #1
 80065d4:	465a      	mov	r2, fp
 80065d6:	4631      	mov	r1, r6
 80065d8:	4628      	mov	r0, r5
 80065da:	47b8      	blx	r7
 80065dc:	3001      	adds	r0, #1
 80065de:	f43f aeae 	beq.w	800633e <_printf_float+0xb6>
 80065e2:	f108 0801 	add.w	r8, r8, #1
 80065e6:	e7ec      	b.n	80065c2 <_printf_float+0x33a>
 80065e8:	4642      	mov	r2, r8
 80065ea:	4631      	mov	r1, r6
 80065ec:	4628      	mov	r0, r5
 80065ee:	47b8      	blx	r7
 80065f0:	3001      	adds	r0, #1
 80065f2:	d1c2      	bne.n	800657a <_printf_float+0x2f2>
 80065f4:	e6a3      	b.n	800633e <_printf_float+0xb6>
 80065f6:	2301      	movs	r3, #1
 80065f8:	4631      	mov	r1, r6
 80065fa:	4628      	mov	r0, r5
 80065fc:	9206      	str	r2, [sp, #24]
 80065fe:	47b8      	blx	r7
 8006600:	3001      	adds	r0, #1
 8006602:	f43f ae9c 	beq.w	800633e <_printf_float+0xb6>
 8006606:	9a06      	ldr	r2, [sp, #24]
 8006608:	f10b 0b01 	add.w	fp, fp, #1
 800660c:	e7bb      	b.n	8006586 <_printf_float+0x2fe>
 800660e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006612:	4631      	mov	r1, r6
 8006614:	4628      	mov	r0, r5
 8006616:	47b8      	blx	r7
 8006618:	3001      	adds	r0, #1
 800661a:	d1c0      	bne.n	800659e <_printf_float+0x316>
 800661c:	e68f      	b.n	800633e <_printf_float+0xb6>
 800661e:	9a06      	ldr	r2, [sp, #24]
 8006620:	464b      	mov	r3, r9
 8006622:	4442      	add	r2, r8
 8006624:	4631      	mov	r1, r6
 8006626:	4628      	mov	r0, r5
 8006628:	47b8      	blx	r7
 800662a:	3001      	adds	r0, #1
 800662c:	d1c3      	bne.n	80065b6 <_printf_float+0x32e>
 800662e:	e686      	b.n	800633e <_printf_float+0xb6>
 8006630:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006634:	f1ba 0f01 	cmp.w	sl, #1
 8006638:	dc01      	bgt.n	800663e <_printf_float+0x3b6>
 800663a:	07db      	lsls	r3, r3, #31
 800663c:	d536      	bpl.n	80066ac <_printf_float+0x424>
 800663e:	2301      	movs	r3, #1
 8006640:	4642      	mov	r2, r8
 8006642:	4631      	mov	r1, r6
 8006644:	4628      	mov	r0, r5
 8006646:	47b8      	blx	r7
 8006648:	3001      	adds	r0, #1
 800664a:	f43f ae78 	beq.w	800633e <_printf_float+0xb6>
 800664e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006652:	4631      	mov	r1, r6
 8006654:	4628      	mov	r0, r5
 8006656:	47b8      	blx	r7
 8006658:	3001      	adds	r0, #1
 800665a:	f43f ae70 	beq.w	800633e <_printf_float+0xb6>
 800665e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006662:	2200      	movs	r2, #0
 8006664:	2300      	movs	r3, #0
 8006666:	f10a 3aff 	add.w	sl, sl, #4294967295
 800666a:	f7fa fa2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800666e:	b9c0      	cbnz	r0, 80066a2 <_printf_float+0x41a>
 8006670:	4653      	mov	r3, sl
 8006672:	f108 0201 	add.w	r2, r8, #1
 8006676:	4631      	mov	r1, r6
 8006678:	4628      	mov	r0, r5
 800667a:	47b8      	blx	r7
 800667c:	3001      	adds	r0, #1
 800667e:	d10c      	bne.n	800669a <_printf_float+0x412>
 8006680:	e65d      	b.n	800633e <_printf_float+0xb6>
 8006682:	2301      	movs	r3, #1
 8006684:	465a      	mov	r2, fp
 8006686:	4631      	mov	r1, r6
 8006688:	4628      	mov	r0, r5
 800668a:	47b8      	blx	r7
 800668c:	3001      	adds	r0, #1
 800668e:	f43f ae56 	beq.w	800633e <_printf_float+0xb6>
 8006692:	f108 0801 	add.w	r8, r8, #1
 8006696:	45d0      	cmp	r8, sl
 8006698:	dbf3      	blt.n	8006682 <_printf_float+0x3fa>
 800669a:	464b      	mov	r3, r9
 800669c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80066a0:	e6df      	b.n	8006462 <_printf_float+0x1da>
 80066a2:	f04f 0800 	mov.w	r8, #0
 80066a6:	f104 0b1a 	add.w	fp, r4, #26
 80066aa:	e7f4      	b.n	8006696 <_printf_float+0x40e>
 80066ac:	2301      	movs	r3, #1
 80066ae:	4642      	mov	r2, r8
 80066b0:	e7e1      	b.n	8006676 <_printf_float+0x3ee>
 80066b2:	2301      	movs	r3, #1
 80066b4:	464a      	mov	r2, r9
 80066b6:	4631      	mov	r1, r6
 80066b8:	4628      	mov	r0, r5
 80066ba:	47b8      	blx	r7
 80066bc:	3001      	adds	r0, #1
 80066be:	f43f ae3e 	beq.w	800633e <_printf_float+0xb6>
 80066c2:	f108 0801 	add.w	r8, r8, #1
 80066c6:	68e3      	ldr	r3, [r4, #12]
 80066c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066ca:	1a5b      	subs	r3, r3, r1
 80066cc:	4543      	cmp	r3, r8
 80066ce:	dcf0      	bgt.n	80066b2 <_printf_float+0x42a>
 80066d0:	e6fc      	b.n	80064cc <_printf_float+0x244>
 80066d2:	f04f 0800 	mov.w	r8, #0
 80066d6:	f104 0919 	add.w	r9, r4, #25
 80066da:	e7f4      	b.n	80066c6 <_printf_float+0x43e>

080066dc <_printf_common>:
 80066dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066e0:	4616      	mov	r6, r2
 80066e2:	4698      	mov	r8, r3
 80066e4:	688a      	ldr	r2, [r1, #8]
 80066e6:	690b      	ldr	r3, [r1, #16]
 80066e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066ec:	4293      	cmp	r3, r2
 80066ee:	bfb8      	it	lt
 80066f0:	4613      	movlt	r3, r2
 80066f2:	6033      	str	r3, [r6, #0]
 80066f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066f8:	4607      	mov	r7, r0
 80066fa:	460c      	mov	r4, r1
 80066fc:	b10a      	cbz	r2, 8006702 <_printf_common+0x26>
 80066fe:	3301      	adds	r3, #1
 8006700:	6033      	str	r3, [r6, #0]
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	0699      	lsls	r1, r3, #26
 8006706:	bf42      	ittt	mi
 8006708:	6833      	ldrmi	r3, [r6, #0]
 800670a:	3302      	addmi	r3, #2
 800670c:	6033      	strmi	r3, [r6, #0]
 800670e:	6825      	ldr	r5, [r4, #0]
 8006710:	f015 0506 	ands.w	r5, r5, #6
 8006714:	d106      	bne.n	8006724 <_printf_common+0x48>
 8006716:	f104 0a19 	add.w	sl, r4, #25
 800671a:	68e3      	ldr	r3, [r4, #12]
 800671c:	6832      	ldr	r2, [r6, #0]
 800671e:	1a9b      	subs	r3, r3, r2
 8006720:	42ab      	cmp	r3, r5
 8006722:	dc26      	bgt.n	8006772 <_printf_common+0x96>
 8006724:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006728:	6822      	ldr	r2, [r4, #0]
 800672a:	3b00      	subs	r3, #0
 800672c:	bf18      	it	ne
 800672e:	2301      	movne	r3, #1
 8006730:	0692      	lsls	r2, r2, #26
 8006732:	d42b      	bmi.n	800678c <_printf_common+0xb0>
 8006734:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006738:	4641      	mov	r1, r8
 800673a:	4638      	mov	r0, r7
 800673c:	47c8      	blx	r9
 800673e:	3001      	adds	r0, #1
 8006740:	d01e      	beq.n	8006780 <_printf_common+0xa4>
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	6922      	ldr	r2, [r4, #16]
 8006746:	f003 0306 	and.w	r3, r3, #6
 800674a:	2b04      	cmp	r3, #4
 800674c:	bf02      	ittt	eq
 800674e:	68e5      	ldreq	r5, [r4, #12]
 8006750:	6833      	ldreq	r3, [r6, #0]
 8006752:	1aed      	subeq	r5, r5, r3
 8006754:	68a3      	ldr	r3, [r4, #8]
 8006756:	bf0c      	ite	eq
 8006758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800675c:	2500      	movne	r5, #0
 800675e:	4293      	cmp	r3, r2
 8006760:	bfc4      	itt	gt
 8006762:	1a9b      	subgt	r3, r3, r2
 8006764:	18ed      	addgt	r5, r5, r3
 8006766:	2600      	movs	r6, #0
 8006768:	341a      	adds	r4, #26
 800676a:	42b5      	cmp	r5, r6
 800676c:	d11a      	bne.n	80067a4 <_printf_common+0xc8>
 800676e:	2000      	movs	r0, #0
 8006770:	e008      	b.n	8006784 <_printf_common+0xa8>
 8006772:	2301      	movs	r3, #1
 8006774:	4652      	mov	r2, sl
 8006776:	4641      	mov	r1, r8
 8006778:	4638      	mov	r0, r7
 800677a:	47c8      	blx	r9
 800677c:	3001      	adds	r0, #1
 800677e:	d103      	bne.n	8006788 <_printf_common+0xac>
 8006780:	f04f 30ff 	mov.w	r0, #4294967295
 8006784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006788:	3501      	adds	r5, #1
 800678a:	e7c6      	b.n	800671a <_printf_common+0x3e>
 800678c:	18e1      	adds	r1, r4, r3
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	2030      	movs	r0, #48	@ 0x30
 8006792:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006796:	4422      	add	r2, r4
 8006798:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800679c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067a0:	3302      	adds	r3, #2
 80067a2:	e7c7      	b.n	8006734 <_printf_common+0x58>
 80067a4:	2301      	movs	r3, #1
 80067a6:	4622      	mov	r2, r4
 80067a8:	4641      	mov	r1, r8
 80067aa:	4638      	mov	r0, r7
 80067ac:	47c8      	blx	r9
 80067ae:	3001      	adds	r0, #1
 80067b0:	d0e6      	beq.n	8006780 <_printf_common+0xa4>
 80067b2:	3601      	adds	r6, #1
 80067b4:	e7d9      	b.n	800676a <_printf_common+0x8e>
	...

080067b8 <_printf_i>:
 80067b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067bc:	7e0f      	ldrb	r7, [r1, #24]
 80067be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067c0:	2f78      	cmp	r7, #120	@ 0x78
 80067c2:	4691      	mov	r9, r2
 80067c4:	4680      	mov	r8, r0
 80067c6:	460c      	mov	r4, r1
 80067c8:	469a      	mov	sl, r3
 80067ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067ce:	d807      	bhi.n	80067e0 <_printf_i+0x28>
 80067d0:	2f62      	cmp	r7, #98	@ 0x62
 80067d2:	d80a      	bhi.n	80067ea <_printf_i+0x32>
 80067d4:	2f00      	cmp	r7, #0
 80067d6:	f000 80d2 	beq.w	800697e <_printf_i+0x1c6>
 80067da:	2f58      	cmp	r7, #88	@ 0x58
 80067dc:	f000 80b9 	beq.w	8006952 <_printf_i+0x19a>
 80067e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067e8:	e03a      	b.n	8006860 <_printf_i+0xa8>
 80067ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067ee:	2b15      	cmp	r3, #21
 80067f0:	d8f6      	bhi.n	80067e0 <_printf_i+0x28>
 80067f2:	a101      	add	r1, pc, #4	@ (adr r1, 80067f8 <_printf_i+0x40>)
 80067f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067f8:	08006851 	.word	0x08006851
 80067fc:	08006865 	.word	0x08006865
 8006800:	080067e1 	.word	0x080067e1
 8006804:	080067e1 	.word	0x080067e1
 8006808:	080067e1 	.word	0x080067e1
 800680c:	080067e1 	.word	0x080067e1
 8006810:	08006865 	.word	0x08006865
 8006814:	080067e1 	.word	0x080067e1
 8006818:	080067e1 	.word	0x080067e1
 800681c:	080067e1 	.word	0x080067e1
 8006820:	080067e1 	.word	0x080067e1
 8006824:	08006965 	.word	0x08006965
 8006828:	0800688f 	.word	0x0800688f
 800682c:	0800691f 	.word	0x0800691f
 8006830:	080067e1 	.word	0x080067e1
 8006834:	080067e1 	.word	0x080067e1
 8006838:	08006987 	.word	0x08006987
 800683c:	080067e1 	.word	0x080067e1
 8006840:	0800688f 	.word	0x0800688f
 8006844:	080067e1 	.word	0x080067e1
 8006848:	080067e1 	.word	0x080067e1
 800684c:	08006927 	.word	0x08006927
 8006850:	6833      	ldr	r3, [r6, #0]
 8006852:	1d1a      	adds	r2, r3, #4
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6032      	str	r2, [r6, #0]
 8006858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800685c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006860:	2301      	movs	r3, #1
 8006862:	e09d      	b.n	80069a0 <_printf_i+0x1e8>
 8006864:	6833      	ldr	r3, [r6, #0]
 8006866:	6820      	ldr	r0, [r4, #0]
 8006868:	1d19      	adds	r1, r3, #4
 800686a:	6031      	str	r1, [r6, #0]
 800686c:	0606      	lsls	r6, r0, #24
 800686e:	d501      	bpl.n	8006874 <_printf_i+0xbc>
 8006870:	681d      	ldr	r5, [r3, #0]
 8006872:	e003      	b.n	800687c <_printf_i+0xc4>
 8006874:	0645      	lsls	r5, r0, #25
 8006876:	d5fb      	bpl.n	8006870 <_printf_i+0xb8>
 8006878:	f9b3 5000 	ldrsh.w	r5, [r3]
 800687c:	2d00      	cmp	r5, #0
 800687e:	da03      	bge.n	8006888 <_printf_i+0xd0>
 8006880:	232d      	movs	r3, #45	@ 0x2d
 8006882:	426d      	negs	r5, r5
 8006884:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006888:	4859      	ldr	r0, [pc, #356]	@ (80069f0 <_printf_i+0x238>)
 800688a:	230a      	movs	r3, #10
 800688c:	e011      	b.n	80068b2 <_printf_i+0xfa>
 800688e:	6821      	ldr	r1, [r4, #0]
 8006890:	6833      	ldr	r3, [r6, #0]
 8006892:	0608      	lsls	r0, r1, #24
 8006894:	f853 5b04 	ldr.w	r5, [r3], #4
 8006898:	d402      	bmi.n	80068a0 <_printf_i+0xe8>
 800689a:	0649      	lsls	r1, r1, #25
 800689c:	bf48      	it	mi
 800689e:	b2ad      	uxthmi	r5, r5
 80068a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80068a2:	4853      	ldr	r0, [pc, #332]	@ (80069f0 <_printf_i+0x238>)
 80068a4:	6033      	str	r3, [r6, #0]
 80068a6:	bf14      	ite	ne
 80068a8:	230a      	movne	r3, #10
 80068aa:	2308      	moveq	r3, #8
 80068ac:	2100      	movs	r1, #0
 80068ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068b2:	6866      	ldr	r6, [r4, #4]
 80068b4:	60a6      	str	r6, [r4, #8]
 80068b6:	2e00      	cmp	r6, #0
 80068b8:	bfa2      	ittt	ge
 80068ba:	6821      	ldrge	r1, [r4, #0]
 80068bc:	f021 0104 	bicge.w	r1, r1, #4
 80068c0:	6021      	strge	r1, [r4, #0]
 80068c2:	b90d      	cbnz	r5, 80068c8 <_printf_i+0x110>
 80068c4:	2e00      	cmp	r6, #0
 80068c6:	d04b      	beq.n	8006960 <_printf_i+0x1a8>
 80068c8:	4616      	mov	r6, r2
 80068ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80068ce:	fb03 5711 	mls	r7, r3, r1, r5
 80068d2:	5dc7      	ldrb	r7, [r0, r7]
 80068d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068d8:	462f      	mov	r7, r5
 80068da:	42bb      	cmp	r3, r7
 80068dc:	460d      	mov	r5, r1
 80068de:	d9f4      	bls.n	80068ca <_printf_i+0x112>
 80068e0:	2b08      	cmp	r3, #8
 80068e2:	d10b      	bne.n	80068fc <_printf_i+0x144>
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	07df      	lsls	r7, r3, #31
 80068e8:	d508      	bpl.n	80068fc <_printf_i+0x144>
 80068ea:	6923      	ldr	r3, [r4, #16]
 80068ec:	6861      	ldr	r1, [r4, #4]
 80068ee:	4299      	cmp	r1, r3
 80068f0:	bfde      	ittt	le
 80068f2:	2330      	movle	r3, #48	@ 0x30
 80068f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068fc:	1b92      	subs	r2, r2, r6
 80068fe:	6122      	str	r2, [r4, #16]
 8006900:	f8cd a000 	str.w	sl, [sp]
 8006904:	464b      	mov	r3, r9
 8006906:	aa03      	add	r2, sp, #12
 8006908:	4621      	mov	r1, r4
 800690a:	4640      	mov	r0, r8
 800690c:	f7ff fee6 	bl	80066dc <_printf_common>
 8006910:	3001      	adds	r0, #1
 8006912:	d14a      	bne.n	80069aa <_printf_i+0x1f2>
 8006914:	f04f 30ff 	mov.w	r0, #4294967295
 8006918:	b004      	add	sp, #16
 800691a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800691e:	6823      	ldr	r3, [r4, #0]
 8006920:	f043 0320 	orr.w	r3, r3, #32
 8006924:	6023      	str	r3, [r4, #0]
 8006926:	4833      	ldr	r0, [pc, #204]	@ (80069f4 <_printf_i+0x23c>)
 8006928:	2778      	movs	r7, #120	@ 0x78
 800692a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	6831      	ldr	r1, [r6, #0]
 8006932:	061f      	lsls	r7, r3, #24
 8006934:	f851 5b04 	ldr.w	r5, [r1], #4
 8006938:	d402      	bmi.n	8006940 <_printf_i+0x188>
 800693a:	065f      	lsls	r7, r3, #25
 800693c:	bf48      	it	mi
 800693e:	b2ad      	uxthmi	r5, r5
 8006940:	6031      	str	r1, [r6, #0]
 8006942:	07d9      	lsls	r1, r3, #31
 8006944:	bf44      	itt	mi
 8006946:	f043 0320 	orrmi.w	r3, r3, #32
 800694a:	6023      	strmi	r3, [r4, #0]
 800694c:	b11d      	cbz	r5, 8006956 <_printf_i+0x19e>
 800694e:	2310      	movs	r3, #16
 8006950:	e7ac      	b.n	80068ac <_printf_i+0xf4>
 8006952:	4827      	ldr	r0, [pc, #156]	@ (80069f0 <_printf_i+0x238>)
 8006954:	e7e9      	b.n	800692a <_printf_i+0x172>
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	f023 0320 	bic.w	r3, r3, #32
 800695c:	6023      	str	r3, [r4, #0]
 800695e:	e7f6      	b.n	800694e <_printf_i+0x196>
 8006960:	4616      	mov	r6, r2
 8006962:	e7bd      	b.n	80068e0 <_printf_i+0x128>
 8006964:	6833      	ldr	r3, [r6, #0]
 8006966:	6825      	ldr	r5, [r4, #0]
 8006968:	6961      	ldr	r1, [r4, #20]
 800696a:	1d18      	adds	r0, r3, #4
 800696c:	6030      	str	r0, [r6, #0]
 800696e:	062e      	lsls	r6, r5, #24
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	d501      	bpl.n	8006978 <_printf_i+0x1c0>
 8006974:	6019      	str	r1, [r3, #0]
 8006976:	e002      	b.n	800697e <_printf_i+0x1c6>
 8006978:	0668      	lsls	r0, r5, #25
 800697a:	d5fb      	bpl.n	8006974 <_printf_i+0x1bc>
 800697c:	8019      	strh	r1, [r3, #0]
 800697e:	2300      	movs	r3, #0
 8006980:	6123      	str	r3, [r4, #16]
 8006982:	4616      	mov	r6, r2
 8006984:	e7bc      	b.n	8006900 <_printf_i+0x148>
 8006986:	6833      	ldr	r3, [r6, #0]
 8006988:	1d1a      	adds	r2, r3, #4
 800698a:	6032      	str	r2, [r6, #0]
 800698c:	681e      	ldr	r6, [r3, #0]
 800698e:	6862      	ldr	r2, [r4, #4]
 8006990:	2100      	movs	r1, #0
 8006992:	4630      	mov	r0, r6
 8006994:	f7f9 fc1c 	bl	80001d0 <memchr>
 8006998:	b108      	cbz	r0, 800699e <_printf_i+0x1e6>
 800699a:	1b80      	subs	r0, r0, r6
 800699c:	6060      	str	r0, [r4, #4]
 800699e:	6863      	ldr	r3, [r4, #4]
 80069a0:	6123      	str	r3, [r4, #16]
 80069a2:	2300      	movs	r3, #0
 80069a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069a8:	e7aa      	b.n	8006900 <_printf_i+0x148>
 80069aa:	6923      	ldr	r3, [r4, #16]
 80069ac:	4632      	mov	r2, r6
 80069ae:	4649      	mov	r1, r9
 80069b0:	4640      	mov	r0, r8
 80069b2:	47d0      	blx	sl
 80069b4:	3001      	adds	r0, #1
 80069b6:	d0ad      	beq.n	8006914 <_printf_i+0x15c>
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	079b      	lsls	r3, r3, #30
 80069bc:	d413      	bmi.n	80069e6 <_printf_i+0x22e>
 80069be:	68e0      	ldr	r0, [r4, #12]
 80069c0:	9b03      	ldr	r3, [sp, #12]
 80069c2:	4298      	cmp	r0, r3
 80069c4:	bfb8      	it	lt
 80069c6:	4618      	movlt	r0, r3
 80069c8:	e7a6      	b.n	8006918 <_printf_i+0x160>
 80069ca:	2301      	movs	r3, #1
 80069cc:	4632      	mov	r2, r6
 80069ce:	4649      	mov	r1, r9
 80069d0:	4640      	mov	r0, r8
 80069d2:	47d0      	blx	sl
 80069d4:	3001      	adds	r0, #1
 80069d6:	d09d      	beq.n	8006914 <_printf_i+0x15c>
 80069d8:	3501      	adds	r5, #1
 80069da:	68e3      	ldr	r3, [r4, #12]
 80069dc:	9903      	ldr	r1, [sp, #12]
 80069de:	1a5b      	subs	r3, r3, r1
 80069e0:	42ab      	cmp	r3, r5
 80069e2:	dcf2      	bgt.n	80069ca <_printf_i+0x212>
 80069e4:	e7eb      	b.n	80069be <_printf_i+0x206>
 80069e6:	2500      	movs	r5, #0
 80069e8:	f104 0619 	add.w	r6, r4, #25
 80069ec:	e7f5      	b.n	80069da <_printf_i+0x222>
 80069ee:	bf00      	nop
 80069f0:	08009e76 	.word	0x08009e76
 80069f4:	08009e87 	.word	0x08009e87

080069f8 <std>:
 80069f8:	2300      	movs	r3, #0
 80069fa:	b510      	push	{r4, lr}
 80069fc:	4604      	mov	r4, r0
 80069fe:	e9c0 3300 	strd	r3, r3, [r0]
 8006a02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a06:	6083      	str	r3, [r0, #8]
 8006a08:	8181      	strh	r1, [r0, #12]
 8006a0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a0c:	81c2      	strh	r2, [r0, #14]
 8006a0e:	6183      	str	r3, [r0, #24]
 8006a10:	4619      	mov	r1, r3
 8006a12:	2208      	movs	r2, #8
 8006a14:	305c      	adds	r0, #92	@ 0x5c
 8006a16:	f000 f914 	bl	8006c42 <memset>
 8006a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a50 <std+0x58>)
 8006a1c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a54 <std+0x5c>)
 8006a20:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a22:	4b0d      	ldr	r3, [pc, #52]	@ (8006a58 <std+0x60>)
 8006a24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a26:	4b0d      	ldr	r3, [pc, #52]	@ (8006a5c <std+0x64>)
 8006a28:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a60 <std+0x68>)
 8006a2c:	6224      	str	r4, [r4, #32]
 8006a2e:	429c      	cmp	r4, r3
 8006a30:	d006      	beq.n	8006a40 <std+0x48>
 8006a32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a36:	4294      	cmp	r4, r2
 8006a38:	d002      	beq.n	8006a40 <std+0x48>
 8006a3a:	33d0      	adds	r3, #208	@ 0xd0
 8006a3c:	429c      	cmp	r4, r3
 8006a3e:	d105      	bne.n	8006a4c <std+0x54>
 8006a40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a48:	f000 b978 	b.w	8006d3c <__retarget_lock_init_recursive>
 8006a4c:	bd10      	pop	{r4, pc}
 8006a4e:	bf00      	nop
 8006a50:	08006bbd 	.word	0x08006bbd
 8006a54:	08006bdf 	.word	0x08006bdf
 8006a58:	08006c17 	.word	0x08006c17
 8006a5c:	08006c3b 	.word	0x08006c3b
 8006a60:	20000518 	.word	0x20000518

08006a64 <stdio_exit_handler>:
 8006a64:	4a02      	ldr	r2, [pc, #8]	@ (8006a70 <stdio_exit_handler+0xc>)
 8006a66:	4903      	ldr	r1, [pc, #12]	@ (8006a74 <stdio_exit_handler+0x10>)
 8006a68:	4803      	ldr	r0, [pc, #12]	@ (8006a78 <stdio_exit_handler+0x14>)
 8006a6a:	f000 b869 	b.w	8006b40 <_fwalk_sglue>
 8006a6e:	bf00      	nop
 8006a70:	20000010 	.word	0x20000010
 8006a74:	0800869d 	.word	0x0800869d
 8006a78:	20000020 	.word	0x20000020

08006a7c <cleanup_stdio>:
 8006a7c:	6841      	ldr	r1, [r0, #4]
 8006a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ab0 <cleanup_stdio+0x34>)
 8006a80:	4299      	cmp	r1, r3
 8006a82:	b510      	push	{r4, lr}
 8006a84:	4604      	mov	r4, r0
 8006a86:	d001      	beq.n	8006a8c <cleanup_stdio+0x10>
 8006a88:	f001 fe08 	bl	800869c <_fflush_r>
 8006a8c:	68a1      	ldr	r1, [r4, #8]
 8006a8e:	4b09      	ldr	r3, [pc, #36]	@ (8006ab4 <cleanup_stdio+0x38>)
 8006a90:	4299      	cmp	r1, r3
 8006a92:	d002      	beq.n	8006a9a <cleanup_stdio+0x1e>
 8006a94:	4620      	mov	r0, r4
 8006a96:	f001 fe01 	bl	800869c <_fflush_r>
 8006a9a:	68e1      	ldr	r1, [r4, #12]
 8006a9c:	4b06      	ldr	r3, [pc, #24]	@ (8006ab8 <cleanup_stdio+0x3c>)
 8006a9e:	4299      	cmp	r1, r3
 8006aa0:	d004      	beq.n	8006aac <cleanup_stdio+0x30>
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aa8:	f001 bdf8 	b.w	800869c <_fflush_r>
 8006aac:	bd10      	pop	{r4, pc}
 8006aae:	bf00      	nop
 8006ab0:	20000518 	.word	0x20000518
 8006ab4:	20000580 	.word	0x20000580
 8006ab8:	200005e8 	.word	0x200005e8

08006abc <global_stdio_init.part.0>:
 8006abc:	b510      	push	{r4, lr}
 8006abe:	4b0b      	ldr	r3, [pc, #44]	@ (8006aec <global_stdio_init.part.0+0x30>)
 8006ac0:	4c0b      	ldr	r4, [pc, #44]	@ (8006af0 <global_stdio_init.part.0+0x34>)
 8006ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8006af4 <global_stdio_init.part.0+0x38>)
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2104      	movs	r1, #4
 8006acc:	f7ff ff94 	bl	80069f8 <std>
 8006ad0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	2109      	movs	r1, #9
 8006ad8:	f7ff ff8e 	bl	80069f8 <std>
 8006adc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ae6:	2112      	movs	r1, #18
 8006ae8:	f7ff bf86 	b.w	80069f8 <std>
 8006aec:	20000650 	.word	0x20000650
 8006af0:	20000518 	.word	0x20000518
 8006af4:	08006a65 	.word	0x08006a65

08006af8 <__sfp_lock_acquire>:
 8006af8:	4801      	ldr	r0, [pc, #4]	@ (8006b00 <__sfp_lock_acquire+0x8>)
 8006afa:	f000 b920 	b.w	8006d3e <__retarget_lock_acquire_recursive>
 8006afe:	bf00      	nop
 8006b00:	20000659 	.word	0x20000659

08006b04 <__sfp_lock_release>:
 8006b04:	4801      	ldr	r0, [pc, #4]	@ (8006b0c <__sfp_lock_release+0x8>)
 8006b06:	f000 b91b 	b.w	8006d40 <__retarget_lock_release_recursive>
 8006b0a:	bf00      	nop
 8006b0c:	20000659 	.word	0x20000659

08006b10 <__sinit>:
 8006b10:	b510      	push	{r4, lr}
 8006b12:	4604      	mov	r4, r0
 8006b14:	f7ff fff0 	bl	8006af8 <__sfp_lock_acquire>
 8006b18:	6a23      	ldr	r3, [r4, #32]
 8006b1a:	b11b      	cbz	r3, 8006b24 <__sinit+0x14>
 8006b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b20:	f7ff bff0 	b.w	8006b04 <__sfp_lock_release>
 8006b24:	4b04      	ldr	r3, [pc, #16]	@ (8006b38 <__sinit+0x28>)
 8006b26:	6223      	str	r3, [r4, #32]
 8006b28:	4b04      	ldr	r3, [pc, #16]	@ (8006b3c <__sinit+0x2c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1f5      	bne.n	8006b1c <__sinit+0xc>
 8006b30:	f7ff ffc4 	bl	8006abc <global_stdio_init.part.0>
 8006b34:	e7f2      	b.n	8006b1c <__sinit+0xc>
 8006b36:	bf00      	nop
 8006b38:	08006a7d 	.word	0x08006a7d
 8006b3c:	20000650 	.word	0x20000650

08006b40 <_fwalk_sglue>:
 8006b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b44:	4607      	mov	r7, r0
 8006b46:	4688      	mov	r8, r1
 8006b48:	4614      	mov	r4, r2
 8006b4a:	2600      	movs	r6, #0
 8006b4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b50:	f1b9 0901 	subs.w	r9, r9, #1
 8006b54:	d505      	bpl.n	8006b62 <_fwalk_sglue+0x22>
 8006b56:	6824      	ldr	r4, [r4, #0]
 8006b58:	2c00      	cmp	r4, #0
 8006b5a:	d1f7      	bne.n	8006b4c <_fwalk_sglue+0xc>
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b62:	89ab      	ldrh	r3, [r5, #12]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d907      	bls.n	8006b78 <_fwalk_sglue+0x38>
 8006b68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	d003      	beq.n	8006b78 <_fwalk_sglue+0x38>
 8006b70:	4629      	mov	r1, r5
 8006b72:	4638      	mov	r0, r7
 8006b74:	47c0      	blx	r8
 8006b76:	4306      	orrs	r6, r0
 8006b78:	3568      	adds	r5, #104	@ 0x68
 8006b7a:	e7e9      	b.n	8006b50 <_fwalk_sglue+0x10>

08006b7c <siprintf>:
 8006b7c:	b40e      	push	{r1, r2, r3}
 8006b7e:	b500      	push	{lr}
 8006b80:	b09c      	sub	sp, #112	@ 0x70
 8006b82:	ab1d      	add	r3, sp, #116	@ 0x74
 8006b84:	9002      	str	r0, [sp, #8]
 8006b86:	9006      	str	r0, [sp, #24]
 8006b88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b8c:	4809      	ldr	r0, [pc, #36]	@ (8006bb4 <siprintf+0x38>)
 8006b8e:	9107      	str	r1, [sp, #28]
 8006b90:	9104      	str	r1, [sp, #16]
 8006b92:	4909      	ldr	r1, [pc, #36]	@ (8006bb8 <siprintf+0x3c>)
 8006b94:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b98:	9105      	str	r1, [sp, #20]
 8006b9a:	6800      	ldr	r0, [r0, #0]
 8006b9c:	9301      	str	r3, [sp, #4]
 8006b9e:	a902      	add	r1, sp, #8
 8006ba0:	f001 fbfc 	bl	800839c <_svfiprintf_r>
 8006ba4:	9b02      	ldr	r3, [sp, #8]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	701a      	strb	r2, [r3, #0]
 8006baa:	b01c      	add	sp, #112	@ 0x70
 8006bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bb0:	b003      	add	sp, #12
 8006bb2:	4770      	bx	lr
 8006bb4:	2000001c 	.word	0x2000001c
 8006bb8:	ffff0208 	.word	0xffff0208

08006bbc <__sread>:
 8006bbc:	b510      	push	{r4, lr}
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc4:	f000 f86c 	bl	8006ca0 <_read_r>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	bfab      	itete	ge
 8006bcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006bce:	89a3      	ldrhlt	r3, [r4, #12]
 8006bd0:	181b      	addge	r3, r3, r0
 8006bd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006bd6:	bfac      	ite	ge
 8006bd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006bda:	81a3      	strhlt	r3, [r4, #12]
 8006bdc:	bd10      	pop	{r4, pc}

08006bde <__swrite>:
 8006bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be2:	461f      	mov	r7, r3
 8006be4:	898b      	ldrh	r3, [r1, #12]
 8006be6:	05db      	lsls	r3, r3, #23
 8006be8:	4605      	mov	r5, r0
 8006bea:	460c      	mov	r4, r1
 8006bec:	4616      	mov	r6, r2
 8006bee:	d505      	bpl.n	8006bfc <__swrite+0x1e>
 8006bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f000 f840 	bl	8006c7c <_lseek_r>
 8006bfc:	89a3      	ldrh	r3, [r4, #12]
 8006bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c06:	81a3      	strh	r3, [r4, #12]
 8006c08:	4632      	mov	r2, r6
 8006c0a:	463b      	mov	r3, r7
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c12:	f000 b857 	b.w	8006cc4 <_write_r>

08006c16 <__sseek>:
 8006c16:	b510      	push	{r4, lr}
 8006c18:	460c      	mov	r4, r1
 8006c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c1e:	f000 f82d 	bl	8006c7c <_lseek_r>
 8006c22:	1c43      	adds	r3, r0, #1
 8006c24:	89a3      	ldrh	r3, [r4, #12]
 8006c26:	bf15      	itete	ne
 8006c28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c32:	81a3      	strheq	r3, [r4, #12]
 8006c34:	bf18      	it	ne
 8006c36:	81a3      	strhne	r3, [r4, #12]
 8006c38:	bd10      	pop	{r4, pc}

08006c3a <__sclose>:
 8006c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c3e:	f000 b80d 	b.w	8006c5c <_close_r>

08006c42 <memset>:
 8006c42:	4402      	add	r2, r0
 8006c44:	4603      	mov	r3, r0
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d100      	bne.n	8006c4c <memset+0xa>
 8006c4a:	4770      	bx	lr
 8006c4c:	f803 1b01 	strb.w	r1, [r3], #1
 8006c50:	e7f9      	b.n	8006c46 <memset+0x4>
	...

08006c54 <_localeconv_r>:
 8006c54:	4800      	ldr	r0, [pc, #0]	@ (8006c58 <_localeconv_r+0x4>)
 8006c56:	4770      	bx	lr
 8006c58:	2000015c 	.word	0x2000015c

08006c5c <_close_r>:
 8006c5c:	b538      	push	{r3, r4, r5, lr}
 8006c5e:	4d06      	ldr	r5, [pc, #24]	@ (8006c78 <_close_r+0x1c>)
 8006c60:	2300      	movs	r3, #0
 8006c62:	4604      	mov	r4, r0
 8006c64:	4608      	mov	r0, r1
 8006c66:	602b      	str	r3, [r5, #0]
 8006c68:	f7fb f8ac 	bl	8001dc4 <_close>
 8006c6c:	1c43      	adds	r3, r0, #1
 8006c6e:	d102      	bne.n	8006c76 <_close_r+0x1a>
 8006c70:	682b      	ldr	r3, [r5, #0]
 8006c72:	b103      	cbz	r3, 8006c76 <_close_r+0x1a>
 8006c74:	6023      	str	r3, [r4, #0]
 8006c76:	bd38      	pop	{r3, r4, r5, pc}
 8006c78:	20000654 	.word	0x20000654

08006c7c <_lseek_r>:
 8006c7c:	b538      	push	{r3, r4, r5, lr}
 8006c7e:	4d07      	ldr	r5, [pc, #28]	@ (8006c9c <_lseek_r+0x20>)
 8006c80:	4604      	mov	r4, r0
 8006c82:	4608      	mov	r0, r1
 8006c84:	4611      	mov	r1, r2
 8006c86:	2200      	movs	r2, #0
 8006c88:	602a      	str	r2, [r5, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f7fb f8c1 	bl	8001e12 <_lseek>
 8006c90:	1c43      	adds	r3, r0, #1
 8006c92:	d102      	bne.n	8006c9a <_lseek_r+0x1e>
 8006c94:	682b      	ldr	r3, [r5, #0]
 8006c96:	b103      	cbz	r3, 8006c9a <_lseek_r+0x1e>
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	bd38      	pop	{r3, r4, r5, pc}
 8006c9c:	20000654 	.word	0x20000654

08006ca0 <_read_r>:
 8006ca0:	b538      	push	{r3, r4, r5, lr}
 8006ca2:	4d07      	ldr	r5, [pc, #28]	@ (8006cc0 <_read_r+0x20>)
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	4608      	mov	r0, r1
 8006ca8:	4611      	mov	r1, r2
 8006caa:	2200      	movs	r2, #0
 8006cac:	602a      	str	r2, [r5, #0]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f7fb f84f 	bl	8001d52 <_read>
 8006cb4:	1c43      	adds	r3, r0, #1
 8006cb6:	d102      	bne.n	8006cbe <_read_r+0x1e>
 8006cb8:	682b      	ldr	r3, [r5, #0]
 8006cba:	b103      	cbz	r3, 8006cbe <_read_r+0x1e>
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	bd38      	pop	{r3, r4, r5, pc}
 8006cc0:	20000654 	.word	0x20000654

08006cc4 <_write_r>:
 8006cc4:	b538      	push	{r3, r4, r5, lr}
 8006cc6:	4d07      	ldr	r5, [pc, #28]	@ (8006ce4 <_write_r+0x20>)
 8006cc8:	4604      	mov	r4, r0
 8006cca:	4608      	mov	r0, r1
 8006ccc:	4611      	mov	r1, r2
 8006cce:	2200      	movs	r2, #0
 8006cd0:	602a      	str	r2, [r5, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	f7fb f85a 	bl	8001d8c <_write>
 8006cd8:	1c43      	adds	r3, r0, #1
 8006cda:	d102      	bne.n	8006ce2 <_write_r+0x1e>
 8006cdc:	682b      	ldr	r3, [r5, #0]
 8006cde:	b103      	cbz	r3, 8006ce2 <_write_r+0x1e>
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	bd38      	pop	{r3, r4, r5, pc}
 8006ce4:	20000654 	.word	0x20000654

08006ce8 <__errno>:
 8006ce8:	4b01      	ldr	r3, [pc, #4]	@ (8006cf0 <__errno+0x8>)
 8006cea:	6818      	ldr	r0, [r3, #0]
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	2000001c 	.word	0x2000001c

08006cf4 <__libc_init_array>:
 8006cf4:	b570      	push	{r4, r5, r6, lr}
 8006cf6:	4d0d      	ldr	r5, [pc, #52]	@ (8006d2c <__libc_init_array+0x38>)
 8006cf8:	4c0d      	ldr	r4, [pc, #52]	@ (8006d30 <__libc_init_array+0x3c>)
 8006cfa:	1b64      	subs	r4, r4, r5
 8006cfc:	10a4      	asrs	r4, r4, #2
 8006cfe:	2600      	movs	r6, #0
 8006d00:	42a6      	cmp	r6, r4
 8006d02:	d109      	bne.n	8006d18 <__libc_init_array+0x24>
 8006d04:	4d0b      	ldr	r5, [pc, #44]	@ (8006d34 <__libc_init_array+0x40>)
 8006d06:	4c0c      	ldr	r4, [pc, #48]	@ (8006d38 <__libc_init_array+0x44>)
 8006d08:	f003 f888 	bl	8009e1c <_init>
 8006d0c:	1b64      	subs	r4, r4, r5
 8006d0e:	10a4      	asrs	r4, r4, #2
 8006d10:	2600      	movs	r6, #0
 8006d12:	42a6      	cmp	r6, r4
 8006d14:	d105      	bne.n	8006d22 <__libc_init_array+0x2e>
 8006d16:	bd70      	pop	{r4, r5, r6, pc}
 8006d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d1c:	4798      	blx	r3
 8006d1e:	3601      	adds	r6, #1
 8006d20:	e7ee      	b.n	8006d00 <__libc_init_array+0xc>
 8006d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d26:	4798      	blx	r3
 8006d28:	3601      	adds	r6, #1
 8006d2a:	e7f2      	b.n	8006d12 <__libc_init_array+0x1e>
 8006d2c:	0800a5e8 	.word	0x0800a5e8
 8006d30:	0800a5e8 	.word	0x0800a5e8
 8006d34:	0800a5e8 	.word	0x0800a5e8
 8006d38:	0800a5ec 	.word	0x0800a5ec

08006d3c <__retarget_lock_init_recursive>:
 8006d3c:	4770      	bx	lr

08006d3e <__retarget_lock_acquire_recursive>:
 8006d3e:	4770      	bx	lr

08006d40 <__retarget_lock_release_recursive>:
 8006d40:	4770      	bx	lr

08006d42 <quorem>:
 8006d42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d46:	6903      	ldr	r3, [r0, #16]
 8006d48:	690c      	ldr	r4, [r1, #16]
 8006d4a:	42a3      	cmp	r3, r4
 8006d4c:	4607      	mov	r7, r0
 8006d4e:	db7e      	blt.n	8006e4e <quorem+0x10c>
 8006d50:	3c01      	subs	r4, #1
 8006d52:	f101 0814 	add.w	r8, r1, #20
 8006d56:	00a3      	lsls	r3, r4, #2
 8006d58:	f100 0514 	add.w	r5, r0, #20
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d62:	9301      	str	r3, [sp, #4]
 8006d64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d74:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d78:	d32e      	bcc.n	8006dd8 <quorem+0x96>
 8006d7a:	f04f 0a00 	mov.w	sl, #0
 8006d7e:	46c4      	mov	ip, r8
 8006d80:	46ae      	mov	lr, r5
 8006d82:	46d3      	mov	fp, sl
 8006d84:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d88:	b298      	uxth	r0, r3
 8006d8a:	fb06 a000 	mla	r0, r6, r0, sl
 8006d8e:	0c02      	lsrs	r2, r0, #16
 8006d90:	0c1b      	lsrs	r3, r3, #16
 8006d92:	fb06 2303 	mla	r3, r6, r3, r2
 8006d96:	f8de 2000 	ldr.w	r2, [lr]
 8006d9a:	b280      	uxth	r0, r0
 8006d9c:	b292      	uxth	r2, r2
 8006d9e:	1a12      	subs	r2, r2, r0
 8006da0:	445a      	add	r2, fp
 8006da2:	f8de 0000 	ldr.w	r0, [lr]
 8006da6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006db0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006db4:	b292      	uxth	r2, r2
 8006db6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006dba:	45e1      	cmp	r9, ip
 8006dbc:	f84e 2b04 	str.w	r2, [lr], #4
 8006dc0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006dc4:	d2de      	bcs.n	8006d84 <quorem+0x42>
 8006dc6:	9b00      	ldr	r3, [sp, #0]
 8006dc8:	58eb      	ldr	r3, [r5, r3]
 8006dca:	b92b      	cbnz	r3, 8006dd8 <quorem+0x96>
 8006dcc:	9b01      	ldr	r3, [sp, #4]
 8006dce:	3b04      	subs	r3, #4
 8006dd0:	429d      	cmp	r5, r3
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	d32f      	bcc.n	8006e36 <quorem+0xf4>
 8006dd6:	613c      	str	r4, [r7, #16]
 8006dd8:	4638      	mov	r0, r7
 8006dda:	f001 f97b 	bl	80080d4 <__mcmp>
 8006dde:	2800      	cmp	r0, #0
 8006de0:	db25      	blt.n	8006e2e <quorem+0xec>
 8006de2:	4629      	mov	r1, r5
 8006de4:	2000      	movs	r0, #0
 8006de6:	f858 2b04 	ldr.w	r2, [r8], #4
 8006dea:	f8d1 c000 	ldr.w	ip, [r1]
 8006dee:	fa1f fe82 	uxth.w	lr, r2
 8006df2:	fa1f f38c 	uxth.w	r3, ip
 8006df6:	eba3 030e 	sub.w	r3, r3, lr
 8006dfa:	4403      	add	r3, r0
 8006dfc:	0c12      	lsrs	r2, r2, #16
 8006dfe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006e02:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e0c:	45c1      	cmp	r9, r8
 8006e0e:	f841 3b04 	str.w	r3, [r1], #4
 8006e12:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e16:	d2e6      	bcs.n	8006de6 <quorem+0xa4>
 8006e18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e20:	b922      	cbnz	r2, 8006e2c <quorem+0xea>
 8006e22:	3b04      	subs	r3, #4
 8006e24:	429d      	cmp	r5, r3
 8006e26:	461a      	mov	r2, r3
 8006e28:	d30b      	bcc.n	8006e42 <quorem+0x100>
 8006e2a:	613c      	str	r4, [r7, #16]
 8006e2c:	3601      	adds	r6, #1
 8006e2e:	4630      	mov	r0, r6
 8006e30:	b003      	add	sp, #12
 8006e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e36:	6812      	ldr	r2, [r2, #0]
 8006e38:	3b04      	subs	r3, #4
 8006e3a:	2a00      	cmp	r2, #0
 8006e3c:	d1cb      	bne.n	8006dd6 <quorem+0x94>
 8006e3e:	3c01      	subs	r4, #1
 8006e40:	e7c6      	b.n	8006dd0 <quorem+0x8e>
 8006e42:	6812      	ldr	r2, [r2, #0]
 8006e44:	3b04      	subs	r3, #4
 8006e46:	2a00      	cmp	r2, #0
 8006e48:	d1ef      	bne.n	8006e2a <quorem+0xe8>
 8006e4a:	3c01      	subs	r4, #1
 8006e4c:	e7ea      	b.n	8006e24 <quorem+0xe2>
 8006e4e:	2000      	movs	r0, #0
 8006e50:	e7ee      	b.n	8006e30 <quorem+0xee>
 8006e52:	0000      	movs	r0, r0
 8006e54:	0000      	movs	r0, r0
	...

08006e58 <_dtoa_r>:
 8006e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5c:	69c7      	ldr	r7, [r0, #28]
 8006e5e:	b099      	sub	sp, #100	@ 0x64
 8006e60:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006e64:	ec55 4b10 	vmov	r4, r5, d0
 8006e68:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006e6a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e6c:	4683      	mov	fp, r0
 8006e6e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e72:	b97f      	cbnz	r7, 8006e94 <_dtoa_r+0x3c>
 8006e74:	2010      	movs	r0, #16
 8006e76:	f000 fdfd 	bl	8007a74 <malloc>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006e80:	b920      	cbnz	r0, 8006e8c <_dtoa_r+0x34>
 8006e82:	4ba7      	ldr	r3, [pc, #668]	@ (8007120 <_dtoa_r+0x2c8>)
 8006e84:	21ef      	movs	r1, #239	@ 0xef
 8006e86:	48a7      	ldr	r0, [pc, #668]	@ (8007124 <_dtoa_r+0x2cc>)
 8006e88:	f001 fc68 	bl	800875c <__assert_func>
 8006e8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006e90:	6007      	str	r7, [r0, #0]
 8006e92:	60c7      	str	r7, [r0, #12]
 8006e94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e98:	6819      	ldr	r1, [r3, #0]
 8006e9a:	b159      	cbz	r1, 8006eb4 <_dtoa_r+0x5c>
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	604a      	str	r2, [r1, #4]
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	4093      	lsls	r3, r2
 8006ea4:	608b      	str	r3, [r1, #8]
 8006ea6:	4658      	mov	r0, fp
 8006ea8:	f000 feda 	bl	8007c60 <_Bfree>
 8006eac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	1e2b      	subs	r3, r5, #0
 8006eb6:	bfb9      	ittee	lt
 8006eb8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006ebc:	9303      	strlt	r3, [sp, #12]
 8006ebe:	2300      	movge	r3, #0
 8006ec0:	6033      	strge	r3, [r6, #0]
 8006ec2:	9f03      	ldr	r7, [sp, #12]
 8006ec4:	4b98      	ldr	r3, [pc, #608]	@ (8007128 <_dtoa_r+0x2d0>)
 8006ec6:	bfbc      	itt	lt
 8006ec8:	2201      	movlt	r2, #1
 8006eca:	6032      	strlt	r2, [r6, #0]
 8006ecc:	43bb      	bics	r3, r7
 8006ece:	d112      	bne.n	8006ef6 <_dtoa_r+0x9e>
 8006ed0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ed2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006edc:	4323      	orrs	r3, r4
 8006ede:	f000 854d 	beq.w	800797c <_dtoa_r+0xb24>
 8006ee2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ee4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800713c <_dtoa_r+0x2e4>
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f000 854f 	beq.w	800798c <_dtoa_r+0xb34>
 8006eee:	f10a 0303 	add.w	r3, sl, #3
 8006ef2:	f000 bd49 	b.w	8007988 <_dtoa_r+0xb30>
 8006ef6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006efa:	2200      	movs	r2, #0
 8006efc:	ec51 0b17 	vmov	r0, r1, d7
 8006f00:	2300      	movs	r3, #0
 8006f02:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006f06:	f7f9 fddf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f0a:	4680      	mov	r8, r0
 8006f0c:	b158      	cbz	r0, 8006f26 <_dtoa_r+0xce>
 8006f0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006f10:	2301      	movs	r3, #1
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f16:	b113      	cbz	r3, 8006f1e <_dtoa_r+0xc6>
 8006f18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006f1a:	4b84      	ldr	r3, [pc, #528]	@ (800712c <_dtoa_r+0x2d4>)
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007140 <_dtoa_r+0x2e8>
 8006f22:	f000 bd33 	b.w	800798c <_dtoa_r+0xb34>
 8006f26:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006f2a:	aa16      	add	r2, sp, #88	@ 0x58
 8006f2c:	a917      	add	r1, sp, #92	@ 0x5c
 8006f2e:	4658      	mov	r0, fp
 8006f30:	f001 f980 	bl	8008234 <__d2b>
 8006f34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006f38:	4681      	mov	r9, r0
 8006f3a:	2e00      	cmp	r6, #0
 8006f3c:	d077      	beq.n	800702e <_dtoa_r+0x1d6>
 8006f3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f40:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006f44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006f50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006f54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006f58:	4619      	mov	r1, r3
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	4b74      	ldr	r3, [pc, #464]	@ (8007130 <_dtoa_r+0x2d8>)
 8006f5e:	f7f9 f993 	bl	8000288 <__aeabi_dsub>
 8006f62:	a369      	add	r3, pc, #420	@ (adr r3, 8007108 <_dtoa_r+0x2b0>)
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	f7f9 fb46 	bl	80005f8 <__aeabi_dmul>
 8006f6c:	a368      	add	r3, pc, #416	@ (adr r3, 8007110 <_dtoa_r+0x2b8>)
 8006f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f72:	f7f9 f98b 	bl	800028c <__adddf3>
 8006f76:	4604      	mov	r4, r0
 8006f78:	4630      	mov	r0, r6
 8006f7a:	460d      	mov	r5, r1
 8006f7c:	f7f9 fad2 	bl	8000524 <__aeabi_i2d>
 8006f80:	a365      	add	r3, pc, #404	@ (adr r3, 8007118 <_dtoa_r+0x2c0>)
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	f7f9 fb37 	bl	80005f8 <__aeabi_dmul>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4620      	mov	r0, r4
 8006f90:	4629      	mov	r1, r5
 8006f92:	f7f9 f97b 	bl	800028c <__adddf3>
 8006f96:	4604      	mov	r4, r0
 8006f98:	460d      	mov	r5, r1
 8006f9a:	f7f9 fddd 	bl	8000b58 <__aeabi_d2iz>
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	4607      	mov	r7, r0
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	f7f9 fd98 	bl	8000adc <__aeabi_dcmplt>
 8006fac:	b140      	cbz	r0, 8006fc0 <_dtoa_r+0x168>
 8006fae:	4638      	mov	r0, r7
 8006fb0:	f7f9 fab8 	bl	8000524 <__aeabi_i2d>
 8006fb4:	4622      	mov	r2, r4
 8006fb6:	462b      	mov	r3, r5
 8006fb8:	f7f9 fd86 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fbc:	b900      	cbnz	r0, 8006fc0 <_dtoa_r+0x168>
 8006fbe:	3f01      	subs	r7, #1
 8006fc0:	2f16      	cmp	r7, #22
 8006fc2:	d851      	bhi.n	8007068 <_dtoa_r+0x210>
 8006fc4:	4b5b      	ldr	r3, [pc, #364]	@ (8007134 <_dtoa_r+0x2dc>)
 8006fc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fd2:	f7f9 fd83 	bl	8000adc <__aeabi_dcmplt>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d048      	beq.n	800706c <_dtoa_r+0x214>
 8006fda:	3f01      	subs	r7, #1
 8006fdc:	2300      	movs	r3, #0
 8006fde:	9312      	str	r3, [sp, #72]	@ 0x48
 8006fe0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006fe2:	1b9b      	subs	r3, r3, r6
 8006fe4:	1e5a      	subs	r2, r3, #1
 8006fe6:	bf44      	itt	mi
 8006fe8:	f1c3 0801 	rsbmi	r8, r3, #1
 8006fec:	2300      	movmi	r3, #0
 8006fee:	9208      	str	r2, [sp, #32]
 8006ff0:	bf54      	ite	pl
 8006ff2:	f04f 0800 	movpl.w	r8, #0
 8006ff6:	9308      	strmi	r3, [sp, #32]
 8006ff8:	2f00      	cmp	r7, #0
 8006ffa:	db39      	blt.n	8007070 <_dtoa_r+0x218>
 8006ffc:	9b08      	ldr	r3, [sp, #32]
 8006ffe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007000:	443b      	add	r3, r7
 8007002:	9308      	str	r3, [sp, #32]
 8007004:	2300      	movs	r3, #0
 8007006:	930a      	str	r3, [sp, #40]	@ 0x28
 8007008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800700a:	2b09      	cmp	r3, #9
 800700c:	d864      	bhi.n	80070d8 <_dtoa_r+0x280>
 800700e:	2b05      	cmp	r3, #5
 8007010:	bfc4      	itt	gt
 8007012:	3b04      	subgt	r3, #4
 8007014:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007018:	f1a3 0302 	sub.w	r3, r3, #2
 800701c:	bfcc      	ite	gt
 800701e:	2400      	movgt	r4, #0
 8007020:	2401      	movle	r4, #1
 8007022:	2b03      	cmp	r3, #3
 8007024:	d863      	bhi.n	80070ee <_dtoa_r+0x296>
 8007026:	e8df f003 	tbb	[pc, r3]
 800702a:	372a      	.short	0x372a
 800702c:	5535      	.short	0x5535
 800702e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007032:	441e      	add	r6, r3
 8007034:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007038:	2b20      	cmp	r3, #32
 800703a:	bfc1      	itttt	gt
 800703c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007040:	409f      	lslgt	r7, r3
 8007042:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007046:	fa24 f303 	lsrgt.w	r3, r4, r3
 800704a:	bfd6      	itet	le
 800704c:	f1c3 0320 	rsble	r3, r3, #32
 8007050:	ea47 0003 	orrgt.w	r0, r7, r3
 8007054:	fa04 f003 	lslle.w	r0, r4, r3
 8007058:	f7f9 fa54 	bl	8000504 <__aeabi_ui2d>
 800705c:	2201      	movs	r2, #1
 800705e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007062:	3e01      	subs	r6, #1
 8007064:	9214      	str	r2, [sp, #80]	@ 0x50
 8007066:	e777      	b.n	8006f58 <_dtoa_r+0x100>
 8007068:	2301      	movs	r3, #1
 800706a:	e7b8      	b.n	8006fde <_dtoa_r+0x186>
 800706c:	9012      	str	r0, [sp, #72]	@ 0x48
 800706e:	e7b7      	b.n	8006fe0 <_dtoa_r+0x188>
 8007070:	427b      	negs	r3, r7
 8007072:	930a      	str	r3, [sp, #40]	@ 0x28
 8007074:	2300      	movs	r3, #0
 8007076:	eba8 0807 	sub.w	r8, r8, r7
 800707a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800707c:	e7c4      	b.n	8007008 <_dtoa_r+0x1b0>
 800707e:	2300      	movs	r3, #0
 8007080:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007082:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007084:	2b00      	cmp	r3, #0
 8007086:	dc35      	bgt.n	80070f4 <_dtoa_r+0x29c>
 8007088:	2301      	movs	r3, #1
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	9307      	str	r3, [sp, #28]
 800708e:	461a      	mov	r2, r3
 8007090:	920e      	str	r2, [sp, #56]	@ 0x38
 8007092:	e00b      	b.n	80070ac <_dtoa_r+0x254>
 8007094:	2301      	movs	r3, #1
 8007096:	e7f3      	b.n	8007080 <_dtoa_r+0x228>
 8007098:	2300      	movs	r3, #0
 800709a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800709c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800709e:	18fb      	adds	r3, r7, r3
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	3301      	adds	r3, #1
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	9307      	str	r3, [sp, #28]
 80070a8:	bfb8      	it	lt
 80070aa:	2301      	movlt	r3, #1
 80070ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 80070b0:	2100      	movs	r1, #0
 80070b2:	2204      	movs	r2, #4
 80070b4:	f102 0514 	add.w	r5, r2, #20
 80070b8:	429d      	cmp	r5, r3
 80070ba:	d91f      	bls.n	80070fc <_dtoa_r+0x2a4>
 80070bc:	6041      	str	r1, [r0, #4]
 80070be:	4658      	mov	r0, fp
 80070c0:	f000 fd8e 	bl	8007be0 <_Balloc>
 80070c4:	4682      	mov	sl, r0
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d13c      	bne.n	8007144 <_dtoa_r+0x2ec>
 80070ca:	4b1b      	ldr	r3, [pc, #108]	@ (8007138 <_dtoa_r+0x2e0>)
 80070cc:	4602      	mov	r2, r0
 80070ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80070d2:	e6d8      	b.n	8006e86 <_dtoa_r+0x2e>
 80070d4:	2301      	movs	r3, #1
 80070d6:	e7e0      	b.n	800709a <_dtoa_r+0x242>
 80070d8:	2401      	movs	r4, #1
 80070da:	2300      	movs	r3, #0
 80070dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80070de:	940b      	str	r4, [sp, #44]	@ 0x2c
 80070e0:	f04f 33ff 	mov.w	r3, #4294967295
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	9307      	str	r3, [sp, #28]
 80070e8:	2200      	movs	r2, #0
 80070ea:	2312      	movs	r3, #18
 80070ec:	e7d0      	b.n	8007090 <_dtoa_r+0x238>
 80070ee:	2301      	movs	r3, #1
 80070f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070f2:	e7f5      	b.n	80070e0 <_dtoa_r+0x288>
 80070f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	9307      	str	r3, [sp, #28]
 80070fa:	e7d7      	b.n	80070ac <_dtoa_r+0x254>
 80070fc:	3101      	adds	r1, #1
 80070fe:	0052      	lsls	r2, r2, #1
 8007100:	e7d8      	b.n	80070b4 <_dtoa_r+0x25c>
 8007102:	bf00      	nop
 8007104:	f3af 8000 	nop.w
 8007108:	636f4361 	.word	0x636f4361
 800710c:	3fd287a7 	.word	0x3fd287a7
 8007110:	8b60c8b3 	.word	0x8b60c8b3
 8007114:	3fc68a28 	.word	0x3fc68a28
 8007118:	509f79fb 	.word	0x509f79fb
 800711c:	3fd34413 	.word	0x3fd34413
 8007120:	08009ea5 	.word	0x08009ea5
 8007124:	08009ebc 	.word	0x08009ebc
 8007128:	7ff00000 	.word	0x7ff00000
 800712c:	08009e75 	.word	0x08009e75
 8007130:	3ff80000 	.word	0x3ff80000
 8007134:	08009fb8 	.word	0x08009fb8
 8007138:	08009f14 	.word	0x08009f14
 800713c:	08009ea1 	.word	0x08009ea1
 8007140:	08009e74 	.word	0x08009e74
 8007144:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007148:	6018      	str	r0, [r3, #0]
 800714a:	9b07      	ldr	r3, [sp, #28]
 800714c:	2b0e      	cmp	r3, #14
 800714e:	f200 80a4 	bhi.w	800729a <_dtoa_r+0x442>
 8007152:	2c00      	cmp	r4, #0
 8007154:	f000 80a1 	beq.w	800729a <_dtoa_r+0x442>
 8007158:	2f00      	cmp	r7, #0
 800715a:	dd33      	ble.n	80071c4 <_dtoa_r+0x36c>
 800715c:	4bad      	ldr	r3, [pc, #692]	@ (8007414 <_dtoa_r+0x5bc>)
 800715e:	f007 020f 	and.w	r2, r7, #15
 8007162:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007166:	ed93 7b00 	vldr	d7, [r3]
 800716a:	05f8      	lsls	r0, r7, #23
 800716c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007170:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007174:	d516      	bpl.n	80071a4 <_dtoa_r+0x34c>
 8007176:	4ba8      	ldr	r3, [pc, #672]	@ (8007418 <_dtoa_r+0x5c0>)
 8007178:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800717c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007180:	f7f9 fb64 	bl	800084c <__aeabi_ddiv>
 8007184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007188:	f004 040f 	and.w	r4, r4, #15
 800718c:	2603      	movs	r6, #3
 800718e:	4da2      	ldr	r5, [pc, #648]	@ (8007418 <_dtoa_r+0x5c0>)
 8007190:	b954      	cbnz	r4, 80071a8 <_dtoa_r+0x350>
 8007192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800719a:	f7f9 fb57 	bl	800084c <__aeabi_ddiv>
 800719e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071a2:	e028      	b.n	80071f6 <_dtoa_r+0x39e>
 80071a4:	2602      	movs	r6, #2
 80071a6:	e7f2      	b.n	800718e <_dtoa_r+0x336>
 80071a8:	07e1      	lsls	r1, r4, #31
 80071aa:	d508      	bpl.n	80071be <_dtoa_r+0x366>
 80071ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071b4:	f7f9 fa20 	bl	80005f8 <__aeabi_dmul>
 80071b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071bc:	3601      	adds	r6, #1
 80071be:	1064      	asrs	r4, r4, #1
 80071c0:	3508      	adds	r5, #8
 80071c2:	e7e5      	b.n	8007190 <_dtoa_r+0x338>
 80071c4:	f000 80d2 	beq.w	800736c <_dtoa_r+0x514>
 80071c8:	427c      	negs	r4, r7
 80071ca:	4b92      	ldr	r3, [pc, #584]	@ (8007414 <_dtoa_r+0x5bc>)
 80071cc:	4d92      	ldr	r5, [pc, #584]	@ (8007418 <_dtoa_r+0x5c0>)
 80071ce:	f004 020f 	and.w	r2, r4, #15
 80071d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071de:	f7f9 fa0b 	bl	80005f8 <__aeabi_dmul>
 80071e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071e6:	1124      	asrs	r4, r4, #4
 80071e8:	2300      	movs	r3, #0
 80071ea:	2602      	movs	r6, #2
 80071ec:	2c00      	cmp	r4, #0
 80071ee:	f040 80b2 	bne.w	8007356 <_dtoa_r+0x4fe>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1d3      	bne.n	800719e <_dtoa_r+0x346>
 80071f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80071f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 80b7 	beq.w	8007370 <_dtoa_r+0x518>
 8007202:	4b86      	ldr	r3, [pc, #536]	@ (800741c <_dtoa_r+0x5c4>)
 8007204:	2200      	movs	r2, #0
 8007206:	4620      	mov	r0, r4
 8007208:	4629      	mov	r1, r5
 800720a:	f7f9 fc67 	bl	8000adc <__aeabi_dcmplt>
 800720e:	2800      	cmp	r0, #0
 8007210:	f000 80ae 	beq.w	8007370 <_dtoa_r+0x518>
 8007214:	9b07      	ldr	r3, [sp, #28]
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 80aa 	beq.w	8007370 <_dtoa_r+0x518>
 800721c:	9b00      	ldr	r3, [sp, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	dd37      	ble.n	8007292 <_dtoa_r+0x43a>
 8007222:	1e7b      	subs	r3, r7, #1
 8007224:	9304      	str	r3, [sp, #16]
 8007226:	4620      	mov	r0, r4
 8007228:	4b7d      	ldr	r3, [pc, #500]	@ (8007420 <_dtoa_r+0x5c8>)
 800722a:	2200      	movs	r2, #0
 800722c:	4629      	mov	r1, r5
 800722e:	f7f9 f9e3 	bl	80005f8 <__aeabi_dmul>
 8007232:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007236:	9c00      	ldr	r4, [sp, #0]
 8007238:	3601      	adds	r6, #1
 800723a:	4630      	mov	r0, r6
 800723c:	f7f9 f972 	bl	8000524 <__aeabi_i2d>
 8007240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007244:	f7f9 f9d8 	bl	80005f8 <__aeabi_dmul>
 8007248:	4b76      	ldr	r3, [pc, #472]	@ (8007424 <_dtoa_r+0x5cc>)
 800724a:	2200      	movs	r2, #0
 800724c:	f7f9 f81e 	bl	800028c <__adddf3>
 8007250:	4605      	mov	r5, r0
 8007252:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007256:	2c00      	cmp	r4, #0
 8007258:	f040 808d 	bne.w	8007376 <_dtoa_r+0x51e>
 800725c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007260:	4b71      	ldr	r3, [pc, #452]	@ (8007428 <_dtoa_r+0x5d0>)
 8007262:	2200      	movs	r2, #0
 8007264:	f7f9 f810 	bl	8000288 <__aeabi_dsub>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007270:	462a      	mov	r2, r5
 8007272:	4633      	mov	r3, r6
 8007274:	f7f9 fc50 	bl	8000b18 <__aeabi_dcmpgt>
 8007278:	2800      	cmp	r0, #0
 800727a:	f040 828b 	bne.w	8007794 <_dtoa_r+0x93c>
 800727e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007282:	462a      	mov	r2, r5
 8007284:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007288:	f7f9 fc28 	bl	8000adc <__aeabi_dcmplt>
 800728c:	2800      	cmp	r0, #0
 800728e:	f040 8128 	bne.w	80074e2 <_dtoa_r+0x68a>
 8007292:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007296:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800729a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800729c:	2b00      	cmp	r3, #0
 800729e:	f2c0 815a 	blt.w	8007556 <_dtoa_r+0x6fe>
 80072a2:	2f0e      	cmp	r7, #14
 80072a4:	f300 8157 	bgt.w	8007556 <_dtoa_r+0x6fe>
 80072a8:	4b5a      	ldr	r3, [pc, #360]	@ (8007414 <_dtoa_r+0x5bc>)
 80072aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80072ae:	ed93 7b00 	vldr	d7, [r3]
 80072b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	ed8d 7b00 	vstr	d7, [sp]
 80072ba:	da03      	bge.n	80072c4 <_dtoa_r+0x46c>
 80072bc:	9b07      	ldr	r3, [sp, #28]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f340 8101 	ble.w	80074c6 <_dtoa_r+0x66e>
 80072c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80072c8:	4656      	mov	r6, sl
 80072ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072ce:	4620      	mov	r0, r4
 80072d0:	4629      	mov	r1, r5
 80072d2:	f7f9 fabb 	bl	800084c <__aeabi_ddiv>
 80072d6:	f7f9 fc3f 	bl	8000b58 <__aeabi_d2iz>
 80072da:	4680      	mov	r8, r0
 80072dc:	f7f9 f922 	bl	8000524 <__aeabi_i2d>
 80072e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072e4:	f7f9 f988 	bl	80005f8 <__aeabi_dmul>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4620      	mov	r0, r4
 80072ee:	4629      	mov	r1, r5
 80072f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80072f4:	f7f8 ffc8 	bl	8000288 <__aeabi_dsub>
 80072f8:	f806 4b01 	strb.w	r4, [r6], #1
 80072fc:	9d07      	ldr	r5, [sp, #28]
 80072fe:	eba6 040a 	sub.w	r4, r6, sl
 8007302:	42a5      	cmp	r5, r4
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	f040 8117 	bne.w	800753a <_dtoa_r+0x6e2>
 800730c:	f7f8 ffbe 	bl	800028c <__adddf3>
 8007310:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007314:	4604      	mov	r4, r0
 8007316:	460d      	mov	r5, r1
 8007318:	f7f9 fbfe 	bl	8000b18 <__aeabi_dcmpgt>
 800731c:	2800      	cmp	r0, #0
 800731e:	f040 80f9 	bne.w	8007514 <_dtoa_r+0x6bc>
 8007322:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007326:	4620      	mov	r0, r4
 8007328:	4629      	mov	r1, r5
 800732a:	f7f9 fbcd 	bl	8000ac8 <__aeabi_dcmpeq>
 800732e:	b118      	cbz	r0, 8007338 <_dtoa_r+0x4e0>
 8007330:	f018 0f01 	tst.w	r8, #1
 8007334:	f040 80ee 	bne.w	8007514 <_dtoa_r+0x6bc>
 8007338:	4649      	mov	r1, r9
 800733a:	4658      	mov	r0, fp
 800733c:	f000 fc90 	bl	8007c60 <_Bfree>
 8007340:	2300      	movs	r3, #0
 8007342:	7033      	strb	r3, [r6, #0]
 8007344:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007346:	3701      	adds	r7, #1
 8007348:	601f      	str	r7, [r3, #0]
 800734a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 831d 	beq.w	800798c <_dtoa_r+0xb34>
 8007352:	601e      	str	r6, [r3, #0]
 8007354:	e31a      	b.n	800798c <_dtoa_r+0xb34>
 8007356:	07e2      	lsls	r2, r4, #31
 8007358:	d505      	bpl.n	8007366 <_dtoa_r+0x50e>
 800735a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800735e:	f7f9 f94b 	bl	80005f8 <__aeabi_dmul>
 8007362:	3601      	adds	r6, #1
 8007364:	2301      	movs	r3, #1
 8007366:	1064      	asrs	r4, r4, #1
 8007368:	3508      	adds	r5, #8
 800736a:	e73f      	b.n	80071ec <_dtoa_r+0x394>
 800736c:	2602      	movs	r6, #2
 800736e:	e742      	b.n	80071f6 <_dtoa_r+0x39e>
 8007370:	9c07      	ldr	r4, [sp, #28]
 8007372:	9704      	str	r7, [sp, #16]
 8007374:	e761      	b.n	800723a <_dtoa_r+0x3e2>
 8007376:	4b27      	ldr	r3, [pc, #156]	@ (8007414 <_dtoa_r+0x5bc>)
 8007378:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800737a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800737e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007382:	4454      	add	r4, sl
 8007384:	2900      	cmp	r1, #0
 8007386:	d053      	beq.n	8007430 <_dtoa_r+0x5d8>
 8007388:	4928      	ldr	r1, [pc, #160]	@ (800742c <_dtoa_r+0x5d4>)
 800738a:	2000      	movs	r0, #0
 800738c:	f7f9 fa5e 	bl	800084c <__aeabi_ddiv>
 8007390:	4633      	mov	r3, r6
 8007392:	462a      	mov	r2, r5
 8007394:	f7f8 ff78 	bl	8000288 <__aeabi_dsub>
 8007398:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800739c:	4656      	mov	r6, sl
 800739e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073a2:	f7f9 fbd9 	bl	8000b58 <__aeabi_d2iz>
 80073a6:	4605      	mov	r5, r0
 80073a8:	f7f9 f8bc 	bl	8000524 <__aeabi_i2d>
 80073ac:	4602      	mov	r2, r0
 80073ae:	460b      	mov	r3, r1
 80073b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073b4:	f7f8 ff68 	bl	8000288 <__aeabi_dsub>
 80073b8:	3530      	adds	r5, #48	@ 0x30
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073c2:	f806 5b01 	strb.w	r5, [r6], #1
 80073c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80073ca:	f7f9 fb87 	bl	8000adc <__aeabi_dcmplt>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	d171      	bne.n	80074b6 <_dtoa_r+0x65e>
 80073d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073d6:	4911      	ldr	r1, [pc, #68]	@ (800741c <_dtoa_r+0x5c4>)
 80073d8:	2000      	movs	r0, #0
 80073da:	f7f8 ff55 	bl	8000288 <__aeabi_dsub>
 80073de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80073e2:	f7f9 fb7b 	bl	8000adc <__aeabi_dcmplt>
 80073e6:	2800      	cmp	r0, #0
 80073e8:	f040 8095 	bne.w	8007516 <_dtoa_r+0x6be>
 80073ec:	42a6      	cmp	r6, r4
 80073ee:	f43f af50 	beq.w	8007292 <_dtoa_r+0x43a>
 80073f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80073f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007420 <_dtoa_r+0x5c8>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	f7f9 f8fd 	bl	80005f8 <__aeabi_dmul>
 80073fe:	4b08      	ldr	r3, [pc, #32]	@ (8007420 <_dtoa_r+0x5c8>)
 8007400:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007404:	2200      	movs	r2, #0
 8007406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800740a:	f7f9 f8f5 	bl	80005f8 <__aeabi_dmul>
 800740e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007412:	e7c4      	b.n	800739e <_dtoa_r+0x546>
 8007414:	08009fb8 	.word	0x08009fb8
 8007418:	08009f90 	.word	0x08009f90
 800741c:	3ff00000 	.word	0x3ff00000
 8007420:	40240000 	.word	0x40240000
 8007424:	401c0000 	.word	0x401c0000
 8007428:	40140000 	.word	0x40140000
 800742c:	3fe00000 	.word	0x3fe00000
 8007430:	4631      	mov	r1, r6
 8007432:	4628      	mov	r0, r5
 8007434:	f7f9 f8e0 	bl	80005f8 <__aeabi_dmul>
 8007438:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800743c:	9415      	str	r4, [sp, #84]	@ 0x54
 800743e:	4656      	mov	r6, sl
 8007440:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007444:	f7f9 fb88 	bl	8000b58 <__aeabi_d2iz>
 8007448:	4605      	mov	r5, r0
 800744a:	f7f9 f86b 	bl	8000524 <__aeabi_i2d>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007456:	f7f8 ff17 	bl	8000288 <__aeabi_dsub>
 800745a:	3530      	adds	r5, #48	@ 0x30
 800745c:	f806 5b01 	strb.w	r5, [r6], #1
 8007460:	4602      	mov	r2, r0
 8007462:	460b      	mov	r3, r1
 8007464:	42a6      	cmp	r6, r4
 8007466:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800746a:	f04f 0200 	mov.w	r2, #0
 800746e:	d124      	bne.n	80074ba <_dtoa_r+0x662>
 8007470:	4bac      	ldr	r3, [pc, #688]	@ (8007724 <_dtoa_r+0x8cc>)
 8007472:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007476:	f7f8 ff09 	bl	800028c <__adddf3>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007482:	f7f9 fb49 	bl	8000b18 <__aeabi_dcmpgt>
 8007486:	2800      	cmp	r0, #0
 8007488:	d145      	bne.n	8007516 <_dtoa_r+0x6be>
 800748a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800748e:	49a5      	ldr	r1, [pc, #660]	@ (8007724 <_dtoa_r+0x8cc>)
 8007490:	2000      	movs	r0, #0
 8007492:	f7f8 fef9 	bl	8000288 <__aeabi_dsub>
 8007496:	4602      	mov	r2, r0
 8007498:	460b      	mov	r3, r1
 800749a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800749e:	f7f9 fb1d 	bl	8000adc <__aeabi_dcmplt>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	f43f aef5 	beq.w	8007292 <_dtoa_r+0x43a>
 80074a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80074aa:	1e73      	subs	r3, r6, #1
 80074ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80074ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80074b2:	2b30      	cmp	r3, #48	@ 0x30
 80074b4:	d0f8      	beq.n	80074a8 <_dtoa_r+0x650>
 80074b6:	9f04      	ldr	r7, [sp, #16]
 80074b8:	e73e      	b.n	8007338 <_dtoa_r+0x4e0>
 80074ba:	4b9b      	ldr	r3, [pc, #620]	@ (8007728 <_dtoa_r+0x8d0>)
 80074bc:	f7f9 f89c 	bl	80005f8 <__aeabi_dmul>
 80074c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074c4:	e7bc      	b.n	8007440 <_dtoa_r+0x5e8>
 80074c6:	d10c      	bne.n	80074e2 <_dtoa_r+0x68a>
 80074c8:	4b98      	ldr	r3, [pc, #608]	@ (800772c <_dtoa_r+0x8d4>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074d0:	f7f9 f892 	bl	80005f8 <__aeabi_dmul>
 80074d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074d8:	f7f9 fb14 	bl	8000b04 <__aeabi_dcmpge>
 80074dc:	2800      	cmp	r0, #0
 80074de:	f000 8157 	beq.w	8007790 <_dtoa_r+0x938>
 80074e2:	2400      	movs	r4, #0
 80074e4:	4625      	mov	r5, r4
 80074e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074e8:	43db      	mvns	r3, r3
 80074ea:	9304      	str	r3, [sp, #16]
 80074ec:	4656      	mov	r6, sl
 80074ee:	2700      	movs	r7, #0
 80074f0:	4621      	mov	r1, r4
 80074f2:	4658      	mov	r0, fp
 80074f4:	f000 fbb4 	bl	8007c60 <_Bfree>
 80074f8:	2d00      	cmp	r5, #0
 80074fa:	d0dc      	beq.n	80074b6 <_dtoa_r+0x65e>
 80074fc:	b12f      	cbz	r7, 800750a <_dtoa_r+0x6b2>
 80074fe:	42af      	cmp	r7, r5
 8007500:	d003      	beq.n	800750a <_dtoa_r+0x6b2>
 8007502:	4639      	mov	r1, r7
 8007504:	4658      	mov	r0, fp
 8007506:	f000 fbab 	bl	8007c60 <_Bfree>
 800750a:	4629      	mov	r1, r5
 800750c:	4658      	mov	r0, fp
 800750e:	f000 fba7 	bl	8007c60 <_Bfree>
 8007512:	e7d0      	b.n	80074b6 <_dtoa_r+0x65e>
 8007514:	9704      	str	r7, [sp, #16]
 8007516:	4633      	mov	r3, r6
 8007518:	461e      	mov	r6, r3
 800751a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800751e:	2a39      	cmp	r2, #57	@ 0x39
 8007520:	d107      	bne.n	8007532 <_dtoa_r+0x6da>
 8007522:	459a      	cmp	sl, r3
 8007524:	d1f8      	bne.n	8007518 <_dtoa_r+0x6c0>
 8007526:	9a04      	ldr	r2, [sp, #16]
 8007528:	3201      	adds	r2, #1
 800752a:	9204      	str	r2, [sp, #16]
 800752c:	2230      	movs	r2, #48	@ 0x30
 800752e:	f88a 2000 	strb.w	r2, [sl]
 8007532:	781a      	ldrb	r2, [r3, #0]
 8007534:	3201      	adds	r2, #1
 8007536:	701a      	strb	r2, [r3, #0]
 8007538:	e7bd      	b.n	80074b6 <_dtoa_r+0x65e>
 800753a:	4b7b      	ldr	r3, [pc, #492]	@ (8007728 <_dtoa_r+0x8d0>)
 800753c:	2200      	movs	r2, #0
 800753e:	f7f9 f85b 	bl	80005f8 <__aeabi_dmul>
 8007542:	2200      	movs	r2, #0
 8007544:	2300      	movs	r3, #0
 8007546:	4604      	mov	r4, r0
 8007548:	460d      	mov	r5, r1
 800754a:	f7f9 fabd 	bl	8000ac8 <__aeabi_dcmpeq>
 800754e:	2800      	cmp	r0, #0
 8007550:	f43f aebb 	beq.w	80072ca <_dtoa_r+0x472>
 8007554:	e6f0      	b.n	8007338 <_dtoa_r+0x4e0>
 8007556:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007558:	2a00      	cmp	r2, #0
 800755a:	f000 80db 	beq.w	8007714 <_dtoa_r+0x8bc>
 800755e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007560:	2a01      	cmp	r2, #1
 8007562:	f300 80bf 	bgt.w	80076e4 <_dtoa_r+0x88c>
 8007566:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007568:	2a00      	cmp	r2, #0
 800756a:	f000 80b7 	beq.w	80076dc <_dtoa_r+0x884>
 800756e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007572:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007574:	4646      	mov	r6, r8
 8007576:	9a08      	ldr	r2, [sp, #32]
 8007578:	2101      	movs	r1, #1
 800757a:	441a      	add	r2, r3
 800757c:	4658      	mov	r0, fp
 800757e:	4498      	add	r8, r3
 8007580:	9208      	str	r2, [sp, #32]
 8007582:	f000 fc21 	bl	8007dc8 <__i2b>
 8007586:	4605      	mov	r5, r0
 8007588:	b15e      	cbz	r6, 80075a2 <_dtoa_r+0x74a>
 800758a:	9b08      	ldr	r3, [sp, #32]
 800758c:	2b00      	cmp	r3, #0
 800758e:	dd08      	ble.n	80075a2 <_dtoa_r+0x74a>
 8007590:	42b3      	cmp	r3, r6
 8007592:	9a08      	ldr	r2, [sp, #32]
 8007594:	bfa8      	it	ge
 8007596:	4633      	movge	r3, r6
 8007598:	eba8 0803 	sub.w	r8, r8, r3
 800759c:	1af6      	subs	r6, r6, r3
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	9308      	str	r3, [sp, #32]
 80075a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075a4:	b1f3      	cbz	r3, 80075e4 <_dtoa_r+0x78c>
 80075a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 80b7 	beq.w	800771c <_dtoa_r+0x8c4>
 80075ae:	b18c      	cbz	r4, 80075d4 <_dtoa_r+0x77c>
 80075b0:	4629      	mov	r1, r5
 80075b2:	4622      	mov	r2, r4
 80075b4:	4658      	mov	r0, fp
 80075b6:	f000 fcc7 	bl	8007f48 <__pow5mult>
 80075ba:	464a      	mov	r2, r9
 80075bc:	4601      	mov	r1, r0
 80075be:	4605      	mov	r5, r0
 80075c0:	4658      	mov	r0, fp
 80075c2:	f000 fc17 	bl	8007df4 <__multiply>
 80075c6:	4649      	mov	r1, r9
 80075c8:	9004      	str	r0, [sp, #16]
 80075ca:	4658      	mov	r0, fp
 80075cc:	f000 fb48 	bl	8007c60 <_Bfree>
 80075d0:	9b04      	ldr	r3, [sp, #16]
 80075d2:	4699      	mov	r9, r3
 80075d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075d6:	1b1a      	subs	r2, r3, r4
 80075d8:	d004      	beq.n	80075e4 <_dtoa_r+0x78c>
 80075da:	4649      	mov	r1, r9
 80075dc:	4658      	mov	r0, fp
 80075de:	f000 fcb3 	bl	8007f48 <__pow5mult>
 80075e2:	4681      	mov	r9, r0
 80075e4:	2101      	movs	r1, #1
 80075e6:	4658      	mov	r0, fp
 80075e8:	f000 fbee 	bl	8007dc8 <__i2b>
 80075ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075ee:	4604      	mov	r4, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 81cf 	beq.w	8007994 <_dtoa_r+0xb3c>
 80075f6:	461a      	mov	r2, r3
 80075f8:	4601      	mov	r1, r0
 80075fa:	4658      	mov	r0, fp
 80075fc:	f000 fca4 	bl	8007f48 <__pow5mult>
 8007600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007602:	2b01      	cmp	r3, #1
 8007604:	4604      	mov	r4, r0
 8007606:	f300 8095 	bgt.w	8007734 <_dtoa_r+0x8dc>
 800760a:	9b02      	ldr	r3, [sp, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	f040 8087 	bne.w	8007720 <_dtoa_r+0x8c8>
 8007612:	9b03      	ldr	r3, [sp, #12]
 8007614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007618:	2b00      	cmp	r3, #0
 800761a:	f040 8089 	bne.w	8007730 <_dtoa_r+0x8d8>
 800761e:	9b03      	ldr	r3, [sp, #12]
 8007620:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007624:	0d1b      	lsrs	r3, r3, #20
 8007626:	051b      	lsls	r3, r3, #20
 8007628:	b12b      	cbz	r3, 8007636 <_dtoa_r+0x7de>
 800762a:	9b08      	ldr	r3, [sp, #32]
 800762c:	3301      	adds	r3, #1
 800762e:	9308      	str	r3, [sp, #32]
 8007630:	f108 0801 	add.w	r8, r8, #1
 8007634:	2301      	movs	r3, #1
 8007636:	930a      	str	r3, [sp, #40]	@ 0x28
 8007638:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800763a:	2b00      	cmp	r3, #0
 800763c:	f000 81b0 	beq.w	80079a0 <_dtoa_r+0xb48>
 8007640:	6923      	ldr	r3, [r4, #16]
 8007642:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007646:	6918      	ldr	r0, [r3, #16]
 8007648:	f000 fb72 	bl	8007d30 <__hi0bits>
 800764c:	f1c0 0020 	rsb	r0, r0, #32
 8007650:	9b08      	ldr	r3, [sp, #32]
 8007652:	4418      	add	r0, r3
 8007654:	f010 001f 	ands.w	r0, r0, #31
 8007658:	d077      	beq.n	800774a <_dtoa_r+0x8f2>
 800765a:	f1c0 0320 	rsb	r3, r0, #32
 800765e:	2b04      	cmp	r3, #4
 8007660:	dd6b      	ble.n	800773a <_dtoa_r+0x8e2>
 8007662:	9b08      	ldr	r3, [sp, #32]
 8007664:	f1c0 001c 	rsb	r0, r0, #28
 8007668:	4403      	add	r3, r0
 800766a:	4480      	add	r8, r0
 800766c:	4406      	add	r6, r0
 800766e:	9308      	str	r3, [sp, #32]
 8007670:	f1b8 0f00 	cmp.w	r8, #0
 8007674:	dd05      	ble.n	8007682 <_dtoa_r+0x82a>
 8007676:	4649      	mov	r1, r9
 8007678:	4642      	mov	r2, r8
 800767a:	4658      	mov	r0, fp
 800767c:	f000 fcbe 	bl	8007ffc <__lshift>
 8007680:	4681      	mov	r9, r0
 8007682:	9b08      	ldr	r3, [sp, #32]
 8007684:	2b00      	cmp	r3, #0
 8007686:	dd05      	ble.n	8007694 <_dtoa_r+0x83c>
 8007688:	4621      	mov	r1, r4
 800768a:	461a      	mov	r2, r3
 800768c:	4658      	mov	r0, fp
 800768e:	f000 fcb5 	bl	8007ffc <__lshift>
 8007692:	4604      	mov	r4, r0
 8007694:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007696:	2b00      	cmp	r3, #0
 8007698:	d059      	beq.n	800774e <_dtoa_r+0x8f6>
 800769a:	4621      	mov	r1, r4
 800769c:	4648      	mov	r0, r9
 800769e:	f000 fd19 	bl	80080d4 <__mcmp>
 80076a2:	2800      	cmp	r0, #0
 80076a4:	da53      	bge.n	800774e <_dtoa_r+0x8f6>
 80076a6:	1e7b      	subs	r3, r7, #1
 80076a8:	9304      	str	r3, [sp, #16]
 80076aa:	4649      	mov	r1, r9
 80076ac:	2300      	movs	r3, #0
 80076ae:	220a      	movs	r2, #10
 80076b0:	4658      	mov	r0, fp
 80076b2:	f000 faf7 	bl	8007ca4 <__multadd>
 80076b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076b8:	4681      	mov	r9, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f000 8172 	beq.w	80079a4 <_dtoa_r+0xb4c>
 80076c0:	2300      	movs	r3, #0
 80076c2:	4629      	mov	r1, r5
 80076c4:	220a      	movs	r2, #10
 80076c6:	4658      	mov	r0, fp
 80076c8:	f000 faec 	bl	8007ca4 <__multadd>
 80076cc:	9b00      	ldr	r3, [sp, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	4605      	mov	r5, r0
 80076d2:	dc67      	bgt.n	80077a4 <_dtoa_r+0x94c>
 80076d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	dc41      	bgt.n	800775e <_dtoa_r+0x906>
 80076da:	e063      	b.n	80077a4 <_dtoa_r+0x94c>
 80076dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80076de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80076e2:	e746      	b.n	8007572 <_dtoa_r+0x71a>
 80076e4:	9b07      	ldr	r3, [sp, #28]
 80076e6:	1e5c      	subs	r4, r3, #1
 80076e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076ea:	42a3      	cmp	r3, r4
 80076ec:	bfbf      	itttt	lt
 80076ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80076f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80076f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80076f4:	1ae3      	sublt	r3, r4, r3
 80076f6:	bfb4      	ite	lt
 80076f8:	18d2      	addlt	r2, r2, r3
 80076fa:	1b1c      	subge	r4, r3, r4
 80076fc:	9b07      	ldr	r3, [sp, #28]
 80076fe:	bfbc      	itt	lt
 8007700:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007702:	2400      	movlt	r4, #0
 8007704:	2b00      	cmp	r3, #0
 8007706:	bfb5      	itete	lt
 8007708:	eba8 0603 	sublt.w	r6, r8, r3
 800770c:	9b07      	ldrge	r3, [sp, #28]
 800770e:	2300      	movlt	r3, #0
 8007710:	4646      	movge	r6, r8
 8007712:	e730      	b.n	8007576 <_dtoa_r+0x71e>
 8007714:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007716:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007718:	4646      	mov	r6, r8
 800771a:	e735      	b.n	8007588 <_dtoa_r+0x730>
 800771c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800771e:	e75c      	b.n	80075da <_dtoa_r+0x782>
 8007720:	2300      	movs	r3, #0
 8007722:	e788      	b.n	8007636 <_dtoa_r+0x7de>
 8007724:	3fe00000 	.word	0x3fe00000
 8007728:	40240000 	.word	0x40240000
 800772c:	40140000 	.word	0x40140000
 8007730:	9b02      	ldr	r3, [sp, #8]
 8007732:	e780      	b.n	8007636 <_dtoa_r+0x7de>
 8007734:	2300      	movs	r3, #0
 8007736:	930a      	str	r3, [sp, #40]	@ 0x28
 8007738:	e782      	b.n	8007640 <_dtoa_r+0x7e8>
 800773a:	d099      	beq.n	8007670 <_dtoa_r+0x818>
 800773c:	9a08      	ldr	r2, [sp, #32]
 800773e:	331c      	adds	r3, #28
 8007740:	441a      	add	r2, r3
 8007742:	4498      	add	r8, r3
 8007744:	441e      	add	r6, r3
 8007746:	9208      	str	r2, [sp, #32]
 8007748:	e792      	b.n	8007670 <_dtoa_r+0x818>
 800774a:	4603      	mov	r3, r0
 800774c:	e7f6      	b.n	800773c <_dtoa_r+0x8e4>
 800774e:	9b07      	ldr	r3, [sp, #28]
 8007750:	9704      	str	r7, [sp, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	dc20      	bgt.n	8007798 <_dtoa_r+0x940>
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800775a:	2b02      	cmp	r3, #2
 800775c:	dd1e      	ble.n	800779c <_dtoa_r+0x944>
 800775e:	9b00      	ldr	r3, [sp, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	f47f aec0 	bne.w	80074e6 <_dtoa_r+0x68e>
 8007766:	4621      	mov	r1, r4
 8007768:	2205      	movs	r2, #5
 800776a:	4658      	mov	r0, fp
 800776c:	f000 fa9a 	bl	8007ca4 <__multadd>
 8007770:	4601      	mov	r1, r0
 8007772:	4604      	mov	r4, r0
 8007774:	4648      	mov	r0, r9
 8007776:	f000 fcad 	bl	80080d4 <__mcmp>
 800777a:	2800      	cmp	r0, #0
 800777c:	f77f aeb3 	ble.w	80074e6 <_dtoa_r+0x68e>
 8007780:	4656      	mov	r6, sl
 8007782:	2331      	movs	r3, #49	@ 0x31
 8007784:	f806 3b01 	strb.w	r3, [r6], #1
 8007788:	9b04      	ldr	r3, [sp, #16]
 800778a:	3301      	adds	r3, #1
 800778c:	9304      	str	r3, [sp, #16]
 800778e:	e6ae      	b.n	80074ee <_dtoa_r+0x696>
 8007790:	9c07      	ldr	r4, [sp, #28]
 8007792:	9704      	str	r7, [sp, #16]
 8007794:	4625      	mov	r5, r4
 8007796:	e7f3      	b.n	8007780 <_dtoa_r+0x928>
 8007798:	9b07      	ldr	r3, [sp, #28]
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 8104 	beq.w	80079ac <_dtoa_r+0xb54>
 80077a4:	2e00      	cmp	r6, #0
 80077a6:	dd05      	ble.n	80077b4 <_dtoa_r+0x95c>
 80077a8:	4629      	mov	r1, r5
 80077aa:	4632      	mov	r2, r6
 80077ac:	4658      	mov	r0, fp
 80077ae:	f000 fc25 	bl	8007ffc <__lshift>
 80077b2:	4605      	mov	r5, r0
 80077b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d05a      	beq.n	8007870 <_dtoa_r+0xa18>
 80077ba:	6869      	ldr	r1, [r5, #4]
 80077bc:	4658      	mov	r0, fp
 80077be:	f000 fa0f 	bl	8007be0 <_Balloc>
 80077c2:	4606      	mov	r6, r0
 80077c4:	b928      	cbnz	r0, 80077d2 <_dtoa_r+0x97a>
 80077c6:	4b84      	ldr	r3, [pc, #528]	@ (80079d8 <_dtoa_r+0xb80>)
 80077c8:	4602      	mov	r2, r0
 80077ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80077ce:	f7ff bb5a 	b.w	8006e86 <_dtoa_r+0x2e>
 80077d2:	692a      	ldr	r2, [r5, #16]
 80077d4:	3202      	adds	r2, #2
 80077d6:	0092      	lsls	r2, r2, #2
 80077d8:	f105 010c 	add.w	r1, r5, #12
 80077dc:	300c      	adds	r0, #12
 80077de:	f000 ffaf 	bl	8008740 <memcpy>
 80077e2:	2201      	movs	r2, #1
 80077e4:	4631      	mov	r1, r6
 80077e6:	4658      	mov	r0, fp
 80077e8:	f000 fc08 	bl	8007ffc <__lshift>
 80077ec:	f10a 0301 	add.w	r3, sl, #1
 80077f0:	9307      	str	r3, [sp, #28]
 80077f2:	9b00      	ldr	r3, [sp, #0]
 80077f4:	4453      	add	r3, sl
 80077f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077f8:	9b02      	ldr	r3, [sp, #8]
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	462f      	mov	r7, r5
 8007800:	930a      	str	r3, [sp, #40]	@ 0x28
 8007802:	4605      	mov	r5, r0
 8007804:	9b07      	ldr	r3, [sp, #28]
 8007806:	4621      	mov	r1, r4
 8007808:	3b01      	subs	r3, #1
 800780a:	4648      	mov	r0, r9
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	f7ff fa98 	bl	8006d42 <quorem>
 8007812:	4639      	mov	r1, r7
 8007814:	9002      	str	r0, [sp, #8]
 8007816:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800781a:	4648      	mov	r0, r9
 800781c:	f000 fc5a 	bl	80080d4 <__mcmp>
 8007820:	462a      	mov	r2, r5
 8007822:	9008      	str	r0, [sp, #32]
 8007824:	4621      	mov	r1, r4
 8007826:	4658      	mov	r0, fp
 8007828:	f000 fc70 	bl	800810c <__mdiff>
 800782c:	68c2      	ldr	r2, [r0, #12]
 800782e:	4606      	mov	r6, r0
 8007830:	bb02      	cbnz	r2, 8007874 <_dtoa_r+0xa1c>
 8007832:	4601      	mov	r1, r0
 8007834:	4648      	mov	r0, r9
 8007836:	f000 fc4d 	bl	80080d4 <__mcmp>
 800783a:	4602      	mov	r2, r0
 800783c:	4631      	mov	r1, r6
 800783e:	4658      	mov	r0, fp
 8007840:	920e      	str	r2, [sp, #56]	@ 0x38
 8007842:	f000 fa0d 	bl	8007c60 <_Bfree>
 8007846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007848:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800784a:	9e07      	ldr	r6, [sp, #28]
 800784c:	ea43 0102 	orr.w	r1, r3, r2
 8007850:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007852:	4319      	orrs	r1, r3
 8007854:	d110      	bne.n	8007878 <_dtoa_r+0xa20>
 8007856:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800785a:	d029      	beq.n	80078b0 <_dtoa_r+0xa58>
 800785c:	9b08      	ldr	r3, [sp, #32]
 800785e:	2b00      	cmp	r3, #0
 8007860:	dd02      	ble.n	8007868 <_dtoa_r+0xa10>
 8007862:	9b02      	ldr	r3, [sp, #8]
 8007864:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007868:	9b00      	ldr	r3, [sp, #0]
 800786a:	f883 8000 	strb.w	r8, [r3]
 800786e:	e63f      	b.n	80074f0 <_dtoa_r+0x698>
 8007870:	4628      	mov	r0, r5
 8007872:	e7bb      	b.n	80077ec <_dtoa_r+0x994>
 8007874:	2201      	movs	r2, #1
 8007876:	e7e1      	b.n	800783c <_dtoa_r+0x9e4>
 8007878:	9b08      	ldr	r3, [sp, #32]
 800787a:	2b00      	cmp	r3, #0
 800787c:	db04      	blt.n	8007888 <_dtoa_r+0xa30>
 800787e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007880:	430b      	orrs	r3, r1
 8007882:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007884:	430b      	orrs	r3, r1
 8007886:	d120      	bne.n	80078ca <_dtoa_r+0xa72>
 8007888:	2a00      	cmp	r2, #0
 800788a:	dded      	ble.n	8007868 <_dtoa_r+0xa10>
 800788c:	4649      	mov	r1, r9
 800788e:	2201      	movs	r2, #1
 8007890:	4658      	mov	r0, fp
 8007892:	f000 fbb3 	bl	8007ffc <__lshift>
 8007896:	4621      	mov	r1, r4
 8007898:	4681      	mov	r9, r0
 800789a:	f000 fc1b 	bl	80080d4 <__mcmp>
 800789e:	2800      	cmp	r0, #0
 80078a0:	dc03      	bgt.n	80078aa <_dtoa_r+0xa52>
 80078a2:	d1e1      	bne.n	8007868 <_dtoa_r+0xa10>
 80078a4:	f018 0f01 	tst.w	r8, #1
 80078a8:	d0de      	beq.n	8007868 <_dtoa_r+0xa10>
 80078aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80078ae:	d1d8      	bne.n	8007862 <_dtoa_r+0xa0a>
 80078b0:	9a00      	ldr	r2, [sp, #0]
 80078b2:	2339      	movs	r3, #57	@ 0x39
 80078b4:	7013      	strb	r3, [r2, #0]
 80078b6:	4633      	mov	r3, r6
 80078b8:	461e      	mov	r6, r3
 80078ba:	3b01      	subs	r3, #1
 80078bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80078c0:	2a39      	cmp	r2, #57	@ 0x39
 80078c2:	d052      	beq.n	800796a <_dtoa_r+0xb12>
 80078c4:	3201      	adds	r2, #1
 80078c6:	701a      	strb	r2, [r3, #0]
 80078c8:	e612      	b.n	80074f0 <_dtoa_r+0x698>
 80078ca:	2a00      	cmp	r2, #0
 80078cc:	dd07      	ble.n	80078de <_dtoa_r+0xa86>
 80078ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80078d2:	d0ed      	beq.n	80078b0 <_dtoa_r+0xa58>
 80078d4:	9a00      	ldr	r2, [sp, #0]
 80078d6:	f108 0301 	add.w	r3, r8, #1
 80078da:	7013      	strb	r3, [r2, #0]
 80078dc:	e608      	b.n	80074f0 <_dtoa_r+0x698>
 80078de:	9b07      	ldr	r3, [sp, #28]
 80078e0:	9a07      	ldr	r2, [sp, #28]
 80078e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80078e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d028      	beq.n	800793e <_dtoa_r+0xae6>
 80078ec:	4649      	mov	r1, r9
 80078ee:	2300      	movs	r3, #0
 80078f0:	220a      	movs	r2, #10
 80078f2:	4658      	mov	r0, fp
 80078f4:	f000 f9d6 	bl	8007ca4 <__multadd>
 80078f8:	42af      	cmp	r7, r5
 80078fa:	4681      	mov	r9, r0
 80078fc:	f04f 0300 	mov.w	r3, #0
 8007900:	f04f 020a 	mov.w	r2, #10
 8007904:	4639      	mov	r1, r7
 8007906:	4658      	mov	r0, fp
 8007908:	d107      	bne.n	800791a <_dtoa_r+0xac2>
 800790a:	f000 f9cb 	bl	8007ca4 <__multadd>
 800790e:	4607      	mov	r7, r0
 8007910:	4605      	mov	r5, r0
 8007912:	9b07      	ldr	r3, [sp, #28]
 8007914:	3301      	adds	r3, #1
 8007916:	9307      	str	r3, [sp, #28]
 8007918:	e774      	b.n	8007804 <_dtoa_r+0x9ac>
 800791a:	f000 f9c3 	bl	8007ca4 <__multadd>
 800791e:	4629      	mov	r1, r5
 8007920:	4607      	mov	r7, r0
 8007922:	2300      	movs	r3, #0
 8007924:	220a      	movs	r2, #10
 8007926:	4658      	mov	r0, fp
 8007928:	f000 f9bc 	bl	8007ca4 <__multadd>
 800792c:	4605      	mov	r5, r0
 800792e:	e7f0      	b.n	8007912 <_dtoa_r+0xaba>
 8007930:	9b00      	ldr	r3, [sp, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	bfcc      	ite	gt
 8007936:	461e      	movgt	r6, r3
 8007938:	2601      	movle	r6, #1
 800793a:	4456      	add	r6, sl
 800793c:	2700      	movs	r7, #0
 800793e:	4649      	mov	r1, r9
 8007940:	2201      	movs	r2, #1
 8007942:	4658      	mov	r0, fp
 8007944:	f000 fb5a 	bl	8007ffc <__lshift>
 8007948:	4621      	mov	r1, r4
 800794a:	4681      	mov	r9, r0
 800794c:	f000 fbc2 	bl	80080d4 <__mcmp>
 8007950:	2800      	cmp	r0, #0
 8007952:	dcb0      	bgt.n	80078b6 <_dtoa_r+0xa5e>
 8007954:	d102      	bne.n	800795c <_dtoa_r+0xb04>
 8007956:	f018 0f01 	tst.w	r8, #1
 800795a:	d1ac      	bne.n	80078b6 <_dtoa_r+0xa5e>
 800795c:	4633      	mov	r3, r6
 800795e:	461e      	mov	r6, r3
 8007960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007964:	2a30      	cmp	r2, #48	@ 0x30
 8007966:	d0fa      	beq.n	800795e <_dtoa_r+0xb06>
 8007968:	e5c2      	b.n	80074f0 <_dtoa_r+0x698>
 800796a:	459a      	cmp	sl, r3
 800796c:	d1a4      	bne.n	80078b8 <_dtoa_r+0xa60>
 800796e:	9b04      	ldr	r3, [sp, #16]
 8007970:	3301      	adds	r3, #1
 8007972:	9304      	str	r3, [sp, #16]
 8007974:	2331      	movs	r3, #49	@ 0x31
 8007976:	f88a 3000 	strb.w	r3, [sl]
 800797a:	e5b9      	b.n	80074f0 <_dtoa_r+0x698>
 800797c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800797e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80079dc <_dtoa_r+0xb84>
 8007982:	b11b      	cbz	r3, 800798c <_dtoa_r+0xb34>
 8007984:	f10a 0308 	add.w	r3, sl, #8
 8007988:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800798a:	6013      	str	r3, [r2, #0]
 800798c:	4650      	mov	r0, sl
 800798e:	b019      	add	sp, #100	@ 0x64
 8007990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007996:	2b01      	cmp	r3, #1
 8007998:	f77f ae37 	ble.w	800760a <_dtoa_r+0x7b2>
 800799c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800799e:	930a      	str	r3, [sp, #40]	@ 0x28
 80079a0:	2001      	movs	r0, #1
 80079a2:	e655      	b.n	8007650 <_dtoa_r+0x7f8>
 80079a4:	9b00      	ldr	r3, [sp, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f77f aed6 	ble.w	8007758 <_dtoa_r+0x900>
 80079ac:	4656      	mov	r6, sl
 80079ae:	4621      	mov	r1, r4
 80079b0:	4648      	mov	r0, r9
 80079b2:	f7ff f9c6 	bl	8006d42 <quorem>
 80079b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80079ba:	f806 8b01 	strb.w	r8, [r6], #1
 80079be:	9b00      	ldr	r3, [sp, #0]
 80079c0:	eba6 020a 	sub.w	r2, r6, sl
 80079c4:	4293      	cmp	r3, r2
 80079c6:	ddb3      	ble.n	8007930 <_dtoa_r+0xad8>
 80079c8:	4649      	mov	r1, r9
 80079ca:	2300      	movs	r3, #0
 80079cc:	220a      	movs	r2, #10
 80079ce:	4658      	mov	r0, fp
 80079d0:	f000 f968 	bl	8007ca4 <__multadd>
 80079d4:	4681      	mov	r9, r0
 80079d6:	e7ea      	b.n	80079ae <_dtoa_r+0xb56>
 80079d8:	08009f14 	.word	0x08009f14
 80079dc:	08009e98 	.word	0x08009e98

080079e0 <_free_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	4605      	mov	r5, r0
 80079e4:	2900      	cmp	r1, #0
 80079e6:	d041      	beq.n	8007a6c <_free_r+0x8c>
 80079e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079ec:	1f0c      	subs	r4, r1, #4
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	bfb8      	it	lt
 80079f2:	18e4      	addlt	r4, r4, r3
 80079f4:	f000 f8e8 	bl	8007bc8 <__malloc_lock>
 80079f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007a70 <_free_r+0x90>)
 80079fa:	6813      	ldr	r3, [r2, #0]
 80079fc:	b933      	cbnz	r3, 8007a0c <_free_r+0x2c>
 80079fe:	6063      	str	r3, [r4, #4]
 8007a00:	6014      	str	r4, [r2, #0]
 8007a02:	4628      	mov	r0, r5
 8007a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a08:	f000 b8e4 	b.w	8007bd4 <__malloc_unlock>
 8007a0c:	42a3      	cmp	r3, r4
 8007a0e:	d908      	bls.n	8007a22 <_free_r+0x42>
 8007a10:	6820      	ldr	r0, [r4, #0]
 8007a12:	1821      	adds	r1, r4, r0
 8007a14:	428b      	cmp	r3, r1
 8007a16:	bf01      	itttt	eq
 8007a18:	6819      	ldreq	r1, [r3, #0]
 8007a1a:	685b      	ldreq	r3, [r3, #4]
 8007a1c:	1809      	addeq	r1, r1, r0
 8007a1e:	6021      	streq	r1, [r4, #0]
 8007a20:	e7ed      	b.n	80079fe <_free_r+0x1e>
 8007a22:	461a      	mov	r2, r3
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	b10b      	cbz	r3, 8007a2c <_free_r+0x4c>
 8007a28:	42a3      	cmp	r3, r4
 8007a2a:	d9fa      	bls.n	8007a22 <_free_r+0x42>
 8007a2c:	6811      	ldr	r1, [r2, #0]
 8007a2e:	1850      	adds	r0, r2, r1
 8007a30:	42a0      	cmp	r0, r4
 8007a32:	d10b      	bne.n	8007a4c <_free_r+0x6c>
 8007a34:	6820      	ldr	r0, [r4, #0]
 8007a36:	4401      	add	r1, r0
 8007a38:	1850      	adds	r0, r2, r1
 8007a3a:	4283      	cmp	r3, r0
 8007a3c:	6011      	str	r1, [r2, #0]
 8007a3e:	d1e0      	bne.n	8007a02 <_free_r+0x22>
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	6053      	str	r3, [r2, #4]
 8007a46:	4408      	add	r0, r1
 8007a48:	6010      	str	r0, [r2, #0]
 8007a4a:	e7da      	b.n	8007a02 <_free_r+0x22>
 8007a4c:	d902      	bls.n	8007a54 <_free_r+0x74>
 8007a4e:	230c      	movs	r3, #12
 8007a50:	602b      	str	r3, [r5, #0]
 8007a52:	e7d6      	b.n	8007a02 <_free_r+0x22>
 8007a54:	6820      	ldr	r0, [r4, #0]
 8007a56:	1821      	adds	r1, r4, r0
 8007a58:	428b      	cmp	r3, r1
 8007a5a:	bf04      	itt	eq
 8007a5c:	6819      	ldreq	r1, [r3, #0]
 8007a5e:	685b      	ldreq	r3, [r3, #4]
 8007a60:	6063      	str	r3, [r4, #4]
 8007a62:	bf04      	itt	eq
 8007a64:	1809      	addeq	r1, r1, r0
 8007a66:	6021      	streq	r1, [r4, #0]
 8007a68:	6054      	str	r4, [r2, #4]
 8007a6a:	e7ca      	b.n	8007a02 <_free_r+0x22>
 8007a6c:	bd38      	pop	{r3, r4, r5, pc}
 8007a6e:	bf00      	nop
 8007a70:	20000660 	.word	0x20000660

08007a74 <malloc>:
 8007a74:	4b02      	ldr	r3, [pc, #8]	@ (8007a80 <malloc+0xc>)
 8007a76:	4601      	mov	r1, r0
 8007a78:	6818      	ldr	r0, [r3, #0]
 8007a7a:	f000 b825 	b.w	8007ac8 <_malloc_r>
 8007a7e:	bf00      	nop
 8007a80:	2000001c 	.word	0x2000001c

08007a84 <sbrk_aligned>:
 8007a84:	b570      	push	{r4, r5, r6, lr}
 8007a86:	4e0f      	ldr	r6, [pc, #60]	@ (8007ac4 <sbrk_aligned+0x40>)
 8007a88:	460c      	mov	r4, r1
 8007a8a:	6831      	ldr	r1, [r6, #0]
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	b911      	cbnz	r1, 8007a96 <sbrk_aligned+0x12>
 8007a90:	f000 fe46 	bl	8008720 <_sbrk_r>
 8007a94:	6030      	str	r0, [r6, #0]
 8007a96:	4621      	mov	r1, r4
 8007a98:	4628      	mov	r0, r5
 8007a9a:	f000 fe41 	bl	8008720 <_sbrk_r>
 8007a9e:	1c43      	adds	r3, r0, #1
 8007aa0:	d103      	bne.n	8007aaa <sbrk_aligned+0x26>
 8007aa2:	f04f 34ff 	mov.w	r4, #4294967295
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	bd70      	pop	{r4, r5, r6, pc}
 8007aaa:	1cc4      	adds	r4, r0, #3
 8007aac:	f024 0403 	bic.w	r4, r4, #3
 8007ab0:	42a0      	cmp	r0, r4
 8007ab2:	d0f8      	beq.n	8007aa6 <sbrk_aligned+0x22>
 8007ab4:	1a21      	subs	r1, r4, r0
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	f000 fe32 	bl	8008720 <_sbrk_r>
 8007abc:	3001      	adds	r0, #1
 8007abe:	d1f2      	bne.n	8007aa6 <sbrk_aligned+0x22>
 8007ac0:	e7ef      	b.n	8007aa2 <sbrk_aligned+0x1e>
 8007ac2:	bf00      	nop
 8007ac4:	2000065c 	.word	0x2000065c

08007ac8 <_malloc_r>:
 8007ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007acc:	1ccd      	adds	r5, r1, #3
 8007ace:	f025 0503 	bic.w	r5, r5, #3
 8007ad2:	3508      	adds	r5, #8
 8007ad4:	2d0c      	cmp	r5, #12
 8007ad6:	bf38      	it	cc
 8007ad8:	250c      	movcc	r5, #12
 8007ada:	2d00      	cmp	r5, #0
 8007adc:	4606      	mov	r6, r0
 8007ade:	db01      	blt.n	8007ae4 <_malloc_r+0x1c>
 8007ae0:	42a9      	cmp	r1, r5
 8007ae2:	d904      	bls.n	8007aee <_malloc_r+0x26>
 8007ae4:	230c      	movs	r3, #12
 8007ae6:	6033      	str	r3, [r6, #0]
 8007ae8:	2000      	movs	r0, #0
 8007aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007bc4 <_malloc_r+0xfc>
 8007af2:	f000 f869 	bl	8007bc8 <__malloc_lock>
 8007af6:	f8d8 3000 	ldr.w	r3, [r8]
 8007afa:	461c      	mov	r4, r3
 8007afc:	bb44      	cbnz	r4, 8007b50 <_malloc_r+0x88>
 8007afe:	4629      	mov	r1, r5
 8007b00:	4630      	mov	r0, r6
 8007b02:	f7ff ffbf 	bl	8007a84 <sbrk_aligned>
 8007b06:	1c43      	adds	r3, r0, #1
 8007b08:	4604      	mov	r4, r0
 8007b0a:	d158      	bne.n	8007bbe <_malloc_r+0xf6>
 8007b0c:	f8d8 4000 	ldr.w	r4, [r8]
 8007b10:	4627      	mov	r7, r4
 8007b12:	2f00      	cmp	r7, #0
 8007b14:	d143      	bne.n	8007b9e <_malloc_r+0xd6>
 8007b16:	2c00      	cmp	r4, #0
 8007b18:	d04b      	beq.n	8007bb2 <_malloc_r+0xea>
 8007b1a:	6823      	ldr	r3, [r4, #0]
 8007b1c:	4639      	mov	r1, r7
 8007b1e:	4630      	mov	r0, r6
 8007b20:	eb04 0903 	add.w	r9, r4, r3
 8007b24:	f000 fdfc 	bl	8008720 <_sbrk_r>
 8007b28:	4581      	cmp	r9, r0
 8007b2a:	d142      	bne.n	8007bb2 <_malloc_r+0xea>
 8007b2c:	6821      	ldr	r1, [r4, #0]
 8007b2e:	1a6d      	subs	r5, r5, r1
 8007b30:	4629      	mov	r1, r5
 8007b32:	4630      	mov	r0, r6
 8007b34:	f7ff ffa6 	bl	8007a84 <sbrk_aligned>
 8007b38:	3001      	adds	r0, #1
 8007b3a:	d03a      	beq.n	8007bb2 <_malloc_r+0xea>
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	442b      	add	r3, r5
 8007b40:	6023      	str	r3, [r4, #0]
 8007b42:	f8d8 3000 	ldr.w	r3, [r8]
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	bb62      	cbnz	r2, 8007ba4 <_malloc_r+0xdc>
 8007b4a:	f8c8 7000 	str.w	r7, [r8]
 8007b4e:	e00f      	b.n	8007b70 <_malloc_r+0xa8>
 8007b50:	6822      	ldr	r2, [r4, #0]
 8007b52:	1b52      	subs	r2, r2, r5
 8007b54:	d420      	bmi.n	8007b98 <_malloc_r+0xd0>
 8007b56:	2a0b      	cmp	r2, #11
 8007b58:	d917      	bls.n	8007b8a <_malloc_r+0xc2>
 8007b5a:	1961      	adds	r1, r4, r5
 8007b5c:	42a3      	cmp	r3, r4
 8007b5e:	6025      	str	r5, [r4, #0]
 8007b60:	bf18      	it	ne
 8007b62:	6059      	strne	r1, [r3, #4]
 8007b64:	6863      	ldr	r3, [r4, #4]
 8007b66:	bf08      	it	eq
 8007b68:	f8c8 1000 	streq.w	r1, [r8]
 8007b6c:	5162      	str	r2, [r4, r5]
 8007b6e:	604b      	str	r3, [r1, #4]
 8007b70:	4630      	mov	r0, r6
 8007b72:	f000 f82f 	bl	8007bd4 <__malloc_unlock>
 8007b76:	f104 000b 	add.w	r0, r4, #11
 8007b7a:	1d23      	adds	r3, r4, #4
 8007b7c:	f020 0007 	bic.w	r0, r0, #7
 8007b80:	1ac2      	subs	r2, r0, r3
 8007b82:	bf1c      	itt	ne
 8007b84:	1a1b      	subne	r3, r3, r0
 8007b86:	50a3      	strne	r3, [r4, r2]
 8007b88:	e7af      	b.n	8007aea <_malloc_r+0x22>
 8007b8a:	6862      	ldr	r2, [r4, #4]
 8007b8c:	42a3      	cmp	r3, r4
 8007b8e:	bf0c      	ite	eq
 8007b90:	f8c8 2000 	streq.w	r2, [r8]
 8007b94:	605a      	strne	r2, [r3, #4]
 8007b96:	e7eb      	b.n	8007b70 <_malloc_r+0xa8>
 8007b98:	4623      	mov	r3, r4
 8007b9a:	6864      	ldr	r4, [r4, #4]
 8007b9c:	e7ae      	b.n	8007afc <_malloc_r+0x34>
 8007b9e:	463c      	mov	r4, r7
 8007ba0:	687f      	ldr	r7, [r7, #4]
 8007ba2:	e7b6      	b.n	8007b12 <_malloc_r+0x4a>
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	42a3      	cmp	r3, r4
 8007baa:	d1fb      	bne.n	8007ba4 <_malloc_r+0xdc>
 8007bac:	2300      	movs	r3, #0
 8007bae:	6053      	str	r3, [r2, #4]
 8007bb0:	e7de      	b.n	8007b70 <_malloc_r+0xa8>
 8007bb2:	230c      	movs	r3, #12
 8007bb4:	6033      	str	r3, [r6, #0]
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	f000 f80c 	bl	8007bd4 <__malloc_unlock>
 8007bbc:	e794      	b.n	8007ae8 <_malloc_r+0x20>
 8007bbe:	6005      	str	r5, [r0, #0]
 8007bc0:	e7d6      	b.n	8007b70 <_malloc_r+0xa8>
 8007bc2:	bf00      	nop
 8007bc4:	20000660 	.word	0x20000660

08007bc8 <__malloc_lock>:
 8007bc8:	4801      	ldr	r0, [pc, #4]	@ (8007bd0 <__malloc_lock+0x8>)
 8007bca:	f7ff b8b8 	b.w	8006d3e <__retarget_lock_acquire_recursive>
 8007bce:	bf00      	nop
 8007bd0:	20000658 	.word	0x20000658

08007bd4 <__malloc_unlock>:
 8007bd4:	4801      	ldr	r0, [pc, #4]	@ (8007bdc <__malloc_unlock+0x8>)
 8007bd6:	f7ff b8b3 	b.w	8006d40 <__retarget_lock_release_recursive>
 8007bda:	bf00      	nop
 8007bdc:	20000658 	.word	0x20000658

08007be0 <_Balloc>:
 8007be0:	b570      	push	{r4, r5, r6, lr}
 8007be2:	69c6      	ldr	r6, [r0, #28]
 8007be4:	4604      	mov	r4, r0
 8007be6:	460d      	mov	r5, r1
 8007be8:	b976      	cbnz	r6, 8007c08 <_Balloc+0x28>
 8007bea:	2010      	movs	r0, #16
 8007bec:	f7ff ff42 	bl	8007a74 <malloc>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	61e0      	str	r0, [r4, #28]
 8007bf4:	b920      	cbnz	r0, 8007c00 <_Balloc+0x20>
 8007bf6:	4b18      	ldr	r3, [pc, #96]	@ (8007c58 <_Balloc+0x78>)
 8007bf8:	4818      	ldr	r0, [pc, #96]	@ (8007c5c <_Balloc+0x7c>)
 8007bfa:	216b      	movs	r1, #107	@ 0x6b
 8007bfc:	f000 fdae 	bl	800875c <__assert_func>
 8007c00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c04:	6006      	str	r6, [r0, #0]
 8007c06:	60c6      	str	r6, [r0, #12]
 8007c08:	69e6      	ldr	r6, [r4, #28]
 8007c0a:	68f3      	ldr	r3, [r6, #12]
 8007c0c:	b183      	cbz	r3, 8007c30 <_Balloc+0x50>
 8007c0e:	69e3      	ldr	r3, [r4, #28]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c16:	b9b8      	cbnz	r0, 8007c48 <_Balloc+0x68>
 8007c18:	2101      	movs	r1, #1
 8007c1a:	fa01 f605 	lsl.w	r6, r1, r5
 8007c1e:	1d72      	adds	r2, r6, #5
 8007c20:	0092      	lsls	r2, r2, #2
 8007c22:	4620      	mov	r0, r4
 8007c24:	f000 fdb8 	bl	8008798 <_calloc_r>
 8007c28:	b160      	cbz	r0, 8007c44 <_Balloc+0x64>
 8007c2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c2e:	e00e      	b.n	8007c4e <_Balloc+0x6e>
 8007c30:	2221      	movs	r2, #33	@ 0x21
 8007c32:	2104      	movs	r1, #4
 8007c34:	4620      	mov	r0, r4
 8007c36:	f000 fdaf 	bl	8008798 <_calloc_r>
 8007c3a:	69e3      	ldr	r3, [r4, #28]
 8007c3c:	60f0      	str	r0, [r6, #12]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1e4      	bne.n	8007c0e <_Balloc+0x2e>
 8007c44:	2000      	movs	r0, #0
 8007c46:	bd70      	pop	{r4, r5, r6, pc}
 8007c48:	6802      	ldr	r2, [r0, #0]
 8007c4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c4e:	2300      	movs	r3, #0
 8007c50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c54:	e7f7      	b.n	8007c46 <_Balloc+0x66>
 8007c56:	bf00      	nop
 8007c58:	08009ea5 	.word	0x08009ea5
 8007c5c:	08009f25 	.word	0x08009f25

08007c60 <_Bfree>:
 8007c60:	b570      	push	{r4, r5, r6, lr}
 8007c62:	69c6      	ldr	r6, [r0, #28]
 8007c64:	4605      	mov	r5, r0
 8007c66:	460c      	mov	r4, r1
 8007c68:	b976      	cbnz	r6, 8007c88 <_Bfree+0x28>
 8007c6a:	2010      	movs	r0, #16
 8007c6c:	f7ff ff02 	bl	8007a74 <malloc>
 8007c70:	4602      	mov	r2, r0
 8007c72:	61e8      	str	r0, [r5, #28]
 8007c74:	b920      	cbnz	r0, 8007c80 <_Bfree+0x20>
 8007c76:	4b09      	ldr	r3, [pc, #36]	@ (8007c9c <_Bfree+0x3c>)
 8007c78:	4809      	ldr	r0, [pc, #36]	@ (8007ca0 <_Bfree+0x40>)
 8007c7a:	218f      	movs	r1, #143	@ 0x8f
 8007c7c:	f000 fd6e 	bl	800875c <__assert_func>
 8007c80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c84:	6006      	str	r6, [r0, #0]
 8007c86:	60c6      	str	r6, [r0, #12]
 8007c88:	b13c      	cbz	r4, 8007c9a <_Bfree+0x3a>
 8007c8a:	69eb      	ldr	r3, [r5, #28]
 8007c8c:	6862      	ldr	r2, [r4, #4]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c94:	6021      	str	r1, [r4, #0]
 8007c96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c9a:	bd70      	pop	{r4, r5, r6, pc}
 8007c9c:	08009ea5 	.word	0x08009ea5
 8007ca0:	08009f25 	.word	0x08009f25

08007ca4 <__multadd>:
 8007ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca8:	690d      	ldr	r5, [r1, #16]
 8007caa:	4607      	mov	r7, r0
 8007cac:	460c      	mov	r4, r1
 8007cae:	461e      	mov	r6, r3
 8007cb0:	f101 0c14 	add.w	ip, r1, #20
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	f8dc 3000 	ldr.w	r3, [ip]
 8007cba:	b299      	uxth	r1, r3
 8007cbc:	fb02 6101 	mla	r1, r2, r1, r6
 8007cc0:	0c1e      	lsrs	r6, r3, #16
 8007cc2:	0c0b      	lsrs	r3, r1, #16
 8007cc4:	fb02 3306 	mla	r3, r2, r6, r3
 8007cc8:	b289      	uxth	r1, r1
 8007cca:	3001      	adds	r0, #1
 8007ccc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007cd0:	4285      	cmp	r5, r0
 8007cd2:	f84c 1b04 	str.w	r1, [ip], #4
 8007cd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007cda:	dcec      	bgt.n	8007cb6 <__multadd+0x12>
 8007cdc:	b30e      	cbz	r6, 8007d22 <__multadd+0x7e>
 8007cde:	68a3      	ldr	r3, [r4, #8]
 8007ce0:	42ab      	cmp	r3, r5
 8007ce2:	dc19      	bgt.n	8007d18 <__multadd+0x74>
 8007ce4:	6861      	ldr	r1, [r4, #4]
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	3101      	adds	r1, #1
 8007cea:	f7ff ff79 	bl	8007be0 <_Balloc>
 8007cee:	4680      	mov	r8, r0
 8007cf0:	b928      	cbnz	r0, 8007cfe <__multadd+0x5a>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8007d28 <__multadd+0x84>)
 8007cf6:	480d      	ldr	r0, [pc, #52]	@ (8007d2c <__multadd+0x88>)
 8007cf8:	21ba      	movs	r1, #186	@ 0xba
 8007cfa:	f000 fd2f 	bl	800875c <__assert_func>
 8007cfe:	6922      	ldr	r2, [r4, #16]
 8007d00:	3202      	adds	r2, #2
 8007d02:	f104 010c 	add.w	r1, r4, #12
 8007d06:	0092      	lsls	r2, r2, #2
 8007d08:	300c      	adds	r0, #12
 8007d0a:	f000 fd19 	bl	8008740 <memcpy>
 8007d0e:	4621      	mov	r1, r4
 8007d10:	4638      	mov	r0, r7
 8007d12:	f7ff ffa5 	bl	8007c60 <_Bfree>
 8007d16:	4644      	mov	r4, r8
 8007d18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d1c:	3501      	adds	r5, #1
 8007d1e:	615e      	str	r6, [r3, #20]
 8007d20:	6125      	str	r5, [r4, #16]
 8007d22:	4620      	mov	r0, r4
 8007d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d28:	08009f14 	.word	0x08009f14
 8007d2c:	08009f25 	.word	0x08009f25

08007d30 <__hi0bits>:
 8007d30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007d34:	4603      	mov	r3, r0
 8007d36:	bf36      	itet	cc
 8007d38:	0403      	lslcc	r3, r0, #16
 8007d3a:	2000      	movcs	r0, #0
 8007d3c:	2010      	movcc	r0, #16
 8007d3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d42:	bf3c      	itt	cc
 8007d44:	021b      	lslcc	r3, r3, #8
 8007d46:	3008      	addcc	r0, #8
 8007d48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d4c:	bf3c      	itt	cc
 8007d4e:	011b      	lslcc	r3, r3, #4
 8007d50:	3004      	addcc	r0, #4
 8007d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d56:	bf3c      	itt	cc
 8007d58:	009b      	lslcc	r3, r3, #2
 8007d5a:	3002      	addcc	r0, #2
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	db05      	blt.n	8007d6c <__hi0bits+0x3c>
 8007d60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007d64:	f100 0001 	add.w	r0, r0, #1
 8007d68:	bf08      	it	eq
 8007d6a:	2020      	moveq	r0, #32
 8007d6c:	4770      	bx	lr

08007d6e <__lo0bits>:
 8007d6e:	6803      	ldr	r3, [r0, #0]
 8007d70:	4602      	mov	r2, r0
 8007d72:	f013 0007 	ands.w	r0, r3, #7
 8007d76:	d00b      	beq.n	8007d90 <__lo0bits+0x22>
 8007d78:	07d9      	lsls	r1, r3, #31
 8007d7a:	d421      	bmi.n	8007dc0 <__lo0bits+0x52>
 8007d7c:	0798      	lsls	r0, r3, #30
 8007d7e:	bf49      	itett	mi
 8007d80:	085b      	lsrmi	r3, r3, #1
 8007d82:	089b      	lsrpl	r3, r3, #2
 8007d84:	2001      	movmi	r0, #1
 8007d86:	6013      	strmi	r3, [r2, #0]
 8007d88:	bf5c      	itt	pl
 8007d8a:	6013      	strpl	r3, [r2, #0]
 8007d8c:	2002      	movpl	r0, #2
 8007d8e:	4770      	bx	lr
 8007d90:	b299      	uxth	r1, r3
 8007d92:	b909      	cbnz	r1, 8007d98 <__lo0bits+0x2a>
 8007d94:	0c1b      	lsrs	r3, r3, #16
 8007d96:	2010      	movs	r0, #16
 8007d98:	b2d9      	uxtb	r1, r3
 8007d9a:	b909      	cbnz	r1, 8007da0 <__lo0bits+0x32>
 8007d9c:	3008      	adds	r0, #8
 8007d9e:	0a1b      	lsrs	r3, r3, #8
 8007da0:	0719      	lsls	r1, r3, #28
 8007da2:	bf04      	itt	eq
 8007da4:	091b      	lsreq	r3, r3, #4
 8007da6:	3004      	addeq	r0, #4
 8007da8:	0799      	lsls	r1, r3, #30
 8007daa:	bf04      	itt	eq
 8007dac:	089b      	lsreq	r3, r3, #2
 8007dae:	3002      	addeq	r0, #2
 8007db0:	07d9      	lsls	r1, r3, #31
 8007db2:	d403      	bmi.n	8007dbc <__lo0bits+0x4e>
 8007db4:	085b      	lsrs	r3, r3, #1
 8007db6:	f100 0001 	add.w	r0, r0, #1
 8007dba:	d003      	beq.n	8007dc4 <__lo0bits+0x56>
 8007dbc:	6013      	str	r3, [r2, #0]
 8007dbe:	4770      	bx	lr
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	4770      	bx	lr
 8007dc4:	2020      	movs	r0, #32
 8007dc6:	4770      	bx	lr

08007dc8 <__i2b>:
 8007dc8:	b510      	push	{r4, lr}
 8007dca:	460c      	mov	r4, r1
 8007dcc:	2101      	movs	r1, #1
 8007dce:	f7ff ff07 	bl	8007be0 <_Balloc>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	b928      	cbnz	r0, 8007de2 <__i2b+0x1a>
 8007dd6:	4b05      	ldr	r3, [pc, #20]	@ (8007dec <__i2b+0x24>)
 8007dd8:	4805      	ldr	r0, [pc, #20]	@ (8007df0 <__i2b+0x28>)
 8007dda:	f240 1145 	movw	r1, #325	@ 0x145
 8007dde:	f000 fcbd 	bl	800875c <__assert_func>
 8007de2:	2301      	movs	r3, #1
 8007de4:	6144      	str	r4, [r0, #20]
 8007de6:	6103      	str	r3, [r0, #16]
 8007de8:	bd10      	pop	{r4, pc}
 8007dea:	bf00      	nop
 8007dec:	08009f14 	.word	0x08009f14
 8007df0:	08009f25 	.word	0x08009f25

08007df4 <__multiply>:
 8007df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df8:	4614      	mov	r4, r2
 8007dfa:	690a      	ldr	r2, [r1, #16]
 8007dfc:	6923      	ldr	r3, [r4, #16]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	bfa8      	it	ge
 8007e02:	4623      	movge	r3, r4
 8007e04:	460f      	mov	r7, r1
 8007e06:	bfa4      	itt	ge
 8007e08:	460c      	movge	r4, r1
 8007e0a:	461f      	movge	r7, r3
 8007e0c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007e10:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007e14:	68a3      	ldr	r3, [r4, #8]
 8007e16:	6861      	ldr	r1, [r4, #4]
 8007e18:	eb0a 0609 	add.w	r6, sl, r9
 8007e1c:	42b3      	cmp	r3, r6
 8007e1e:	b085      	sub	sp, #20
 8007e20:	bfb8      	it	lt
 8007e22:	3101      	addlt	r1, #1
 8007e24:	f7ff fedc 	bl	8007be0 <_Balloc>
 8007e28:	b930      	cbnz	r0, 8007e38 <__multiply+0x44>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	4b44      	ldr	r3, [pc, #272]	@ (8007f40 <__multiply+0x14c>)
 8007e2e:	4845      	ldr	r0, [pc, #276]	@ (8007f44 <__multiply+0x150>)
 8007e30:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007e34:	f000 fc92 	bl	800875c <__assert_func>
 8007e38:	f100 0514 	add.w	r5, r0, #20
 8007e3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e40:	462b      	mov	r3, r5
 8007e42:	2200      	movs	r2, #0
 8007e44:	4543      	cmp	r3, r8
 8007e46:	d321      	bcc.n	8007e8c <__multiply+0x98>
 8007e48:	f107 0114 	add.w	r1, r7, #20
 8007e4c:	f104 0214 	add.w	r2, r4, #20
 8007e50:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007e54:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007e58:	9302      	str	r3, [sp, #8]
 8007e5a:	1b13      	subs	r3, r2, r4
 8007e5c:	3b15      	subs	r3, #21
 8007e5e:	f023 0303 	bic.w	r3, r3, #3
 8007e62:	3304      	adds	r3, #4
 8007e64:	f104 0715 	add.w	r7, r4, #21
 8007e68:	42ba      	cmp	r2, r7
 8007e6a:	bf38      	it	cc
 8007e6c:	2304      	movcc	r3, #4
 8007e6e:	9301      	str	r3, [sp, #4]
 8007e70:	9b02      	ldr	r3, [sp, #8]
 8007e72:	9103      	str	r1, [sp, #12]
 8007e74:	428b      	cmp	r3, r1
 8007e76:	d80c      	bhi.n	8007e92 <__multiply+0x9e>
 8007e78:	2e00      	cmp	r6, #0
 8007e7a:	dd03      	ble.n	8007e84 <__multiply+0x90>
 8007e7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d05b      	beq.n	8007f3c <__multiply+0x148>
 8007e84:	6106      	str	r6, [r0, #16]
 8007e86:	b005      	add	sp, #20
 8007e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8c:	f843 2b04 	str.w	r2, [r3], #4
 8007e90:	e7d8      	b.n	8007e44 <__multiply+0x50>
 8007e92:	f8b1 a000 	ldrh.w	sl, [r1]
 8007e96:	f1ba 0f00 	cmp.w	sl, #0
 8007e9a:	d024      	beq.n	8007ee6 <__multiply+0xf2>
 8007e9c:	f104 0e14 	add.w	lr, r4, #20
 8007ea0:	46a9      	mov	r9, r5
 8007ea2:	f04f 0c00 	mov.w	ip, #0
 8007ea6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007eaa:	f8d9 3000 	ldr.w	r3, [r9]
 8007eae:	fa1f fb87 	uxth.w	fp, r7
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	fb0a 330b 	mla	r3, sl, fp, r3
 8007eb8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007ebc:	f8d9 7000 	ldr.w	r7, [r9]
 8007ec0:	4463      	add	r3, ip
 8007ec2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ec6:	fb0a c70b 	mla	r7, sl, fp, ip
 8007eca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ed4:	4572      	cmp	r2, lr
 8007ed6:	f849 3b04 	str.w	r3, [r9], #4
 8007eda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ede:	d8e2      	bhi.n	8007ea6 <__multiply+0xb2>
 8007ee0:	9b01      	ldr	r3, [sp, #4]
 8007ee2:	f845 c003 	str.w	ip, [r5, r3]
 8007ee6:	9b03      	ldr	r3, [sp, #12]
 8007ee8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007eec:	3104      	adds	r1, #4
 8007eee:	f1b9 0f00 	cmp.w	r9, #0
 8007ef2:	d021      	beq.n	8007f38 <__multiply+0x144>
 8007ef4:	682b      	ldr	r3, [r5, #0]
 8007ef6:	f104 0c14 	add.w	ip, r4, #20
 8007efa:	46ae      	mov	lr, r5
 8007efc:	f04f 0a00 	mov.w	sl, #0
 8007f00:	f8bc b000 	ldrh.w	fp, [ip]
 8007f04:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007f08:	fb09 770b 	mla	r7, r9, fp, r7
 8007f0c:	4457      	add	r7, sl
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f14:	f84e 3b04 	str.w	r3, [lr], #4
 8007f18:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f20:	f8be 3000 	ldrh.w	r3, [lr]
 8007f24:	fb09 330a 	mla	r3, r9, sl, r3
 8007f28:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007f2c:	4562      	cmp	r2, ip
 8007f2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f32:	d8e5      	bhi.n	8007f00 <__multiply+0x10c>
 8007f34:	9f01      	ldr	r7, [sp, #4]
 8007f36:	51eb      	str	r3, [r5, r7]
 8007f38:	3504      	adds	r5, #4
 8007f3a:	e799      	b.n	8007e70 <__multiply+0x7c>
 8007f3c:	3e01      	subs	r6, #1
 8007f3e:	e79b      	b.n	8007e78 <__multiply+0x84>
 8007f40:	08009f14 	.word	0x08009f14
 8007f44:	08009f25 	.word	0x08009f25

08007f48 <__pow5mult>:
 8007f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f4c:	4615      	mov	r5, r2
 8007f4e:	f012 0203 	ands.w	r2, r2, #3
 8007f52:	4607      	mov	r7, r0
 8007f54:	460e      	mov	r6, r1
 8007f56:	d007      	beq.n	8007f68 <__pow5mult+0x20>
 8007f58:	4c25      	ldr	r4, [pc, #148]	@ (8007ff0 <__pow5mult+0xa8>)
 8007f5a:	3a01      	subs	r2, #1
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f62:	f7ff fe9f 	bl	8007ca4 <__multadd>
 8007f66:	4606      	mov	r6, r0
 8007f68:	10ad      	asrs	r5, r5, #2
 8007f6a:	d03d      	beq.n	8007fe8 <__pow5mult+0xa0>
 8007f6c:	69fc      	ldr	r4, [r7, #28]
 8007f6e:	b97c      	cbnz	r4, 8007f90 <__pow5mult+0x48>
 8007f70:	2010      	movs	r0, #16
 8007f72:	f7ff fd7f 	bl	8007a74 <malloc>
 8007f76:	4602      	mov	r2, r0
 8007f78:	61f8      	str	r0, [r7, #28]
 8007f7a:	b928      	cbnz	r0, 8007f88 <__pow5mult+0x40>
 8007f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ff4 <__pow5mult+0xac>)
 8007f7e:	481e      	ldr	r0, [pc, #120]	@ (8007ff8 <__pow5mult+0xb0>)
 8007f80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007f84:	f000 fbea 	bl	800875c <__assert_func>
 8007f88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f8c:	6004      	str	r4, [r0, #0]
 8007f8e:	60c4      	str	r4, [r0, #12]
 8007f90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007f94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f98:	b94c      	cbnz	r4, 8007fae <__pow5mult+0x66>
 8007f9a:	f240 2171 	movw	r1, #625	@ 0x271
 8007f9e:	4638      	mov	r0, r7
 8007fa0:	f7ff ff12 	bl	8007dc8 <__i2b>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007faa:	4604      	mov	r4, r0
 8007fac:	6003      	str	r3, [r0, #0]
 8007fae:	f04f 0900 	mov.w	r9, #0
 8007fb2:	07eb      	lsls	r3, r5, #31
 8007fb4:	d50a      	bpl.n	8007fcc <__pow5mult+0x84>
 8007fb6:	4631      	mov	r1, r6
 8007fb8:	4622      	mov	r2, r4
 8007fba:	4638      	mov	r0, r7
 8007fbc:	f7ff ff1a 	bl	8007df4 <__multiply>
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	4680      	mov	r8, r0
 8007fc4:	4638      	mov	r0, r7
 8007fc6:	f7ff fe4b 	bl	8007c60 <_Bfree>
 8007fca:	4646      	mov	r6, r8
 8007fcc:	106d      	asrs	r5, r5, #1
 8007fce:	d00b      	beq.n	8007fe8 <__pow5mult+0xa0>
 8007fd0:	6820      	ldr	r0, [r4, #0]
 8007fd2:	b938      	cbnz	r0, 8007fe4 <__pow5mult+0x9c>
 8007fd4:	4622      	mov	r2, r4
 8007fd6:	4621      	mov	r1, r4
 8007fd8:	4638      	mov	r0, r7
 8007fda:	f7ff ff0b 	bl	8007df4 <__multiply>
 8007fde:	6020      	str	r0, [r4, #0]
 8007fe0:	f8c0 9000 	str.w	r9, [r0]
 8007fe4:	4604      	mov	r4, r0
 8007fe6:	e7e4      	b.n	8007fb2 <__pow5mult+0x6a>
 8007fe8:	4630      	mov	r0, r6
 8007fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fee:	bf00      	nop
 8007ff0:	08009f80 	.word	0x08009f80
 8007ff4:	08009ea5 	.word	0x08009ea5
 8007ff8:	08009f25 	.word	0x08009f25

08007ffc <__lshift>:
 8007ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008000:	460c      	mov	r4, r1
 8008002:	6849      	ldr	r1, [r1, #4]
 8008004:	6923      	ldr	r3, [r4, #16]
 8008006:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800800a:	68a3      	ldr	r3, [r4, #8]
 800800c:	4607      	mov	r7, r0
 800800e:	4691      	mov	r9, r2
 8008010:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008014:	f108 0601 	add.w	r6, r8, #1
 8008018:	42b3      	cmp	r3, r6
 800801a:	db0b      	blt.n	8008034 <__lshift+0x38>
 800801c:	4638      	mov	r0, r7
 800801e:	f7ff fddf 	bl	8007be0 <_Balloc>
 8008022:	4605      	mov	r5, r0
 8008024:	b948      	cbnz	r0, 800803a <__lshift+0x3e>
 8008026:	4602      	mov	r2, r0
 8008028:	4b28      	ldr	r3, [pc, #160]	@ (80080cc <__lshift+0xd0>)
 800802a:	4829      	ldr	r0, [pc, #164]	@ (80080d0 <__lshift+0xd4>)
 800802c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008030:	f000 fb94 	bl	800875c <__assert_func>
 8008034:	3101      	adds	r1, #1
 8008036:	005b      	lsls	r3, r3, #1
 8008038:	e7ee      	b.n	8008018 <__lshift+0x1c>
 800803a:	2300      	movs	r3, #0
 800803c:	f100 0114 	add.w	r1, r0, #20
 8008040:	f100 0210 	add.w	r2, r0, #16
 8008044:	4618      	mov	r0, r3
 8008046:	4553      	cmp	r3, sl
 8008048:	db33      	blt.n	80080b2 <__lshift+0xb6>
 800804a:	6920      	ldr	r0, [r4, #16]
 800804c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008050:	f104 0314 	add.w	r3, r4, #20
 8008054:	f019 091f 	ands.w	r9, r9, #31
 8008058:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800805c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008060:	d02b      	beq.n	80080ba <__lshift+0xbe>
 8008062:	f1c9 0e20 	rsb	lr, r9, #32
 8008066:	468a      	mov	sl, r1
 8008068:	2200      	movs	r2, #0
 800806a:	6818      	ldr	r0, [r3, #0]
 800806c:	fa00 f009 	lsl.w	r0, r0, r9
 8008070:	4310      	orrs	r0, r2
 8008072:	f84a 0b04 	str.w	r0, [sl], #4
 8008076:	f853 2b04 	ldr.w	r2, [r3], #4
 800807a:	459c      	cmp	ip, r3
 800807c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008080:	d8f3      	bhi.n	800806a <__lshift+0x6e>
 8008082:	ebac 0304 	sub.w	r3, ip, r4
 8008086:	3b15      	subs	r3, #21
 8008088:	f023 0303 	bic.w	r3, r3, #3
 800808c:	3304      	adds	r3, #4
 800808e:	f104 0015 	add.w	r0, r4, #21
 8008092:	4584      	cmp	ip, r0
 8008094:	bf38      	it	cc
 8008096:	2304      	movcc	r3, #4
 8008098:	50ca      	str	r2, [r1, r3]
 800809a:	b10a      	cbz	r2, 80080a0 <__lshift+0xa4>
 800809c:	f108 0602 	add.w	r6, r8, #2
 80080a0:	3e01      	subs	r6, #1
 80080a2:	4638      	mov	r0, r7
 80080a4:	612e      	str	r6, [r5, #16]
 80080a6:	4621      	mov	r1, r4
 80080a8:	f7ff fdda 	bl	8007c60 <_Bfree>
 80080ac:	4628      	mov	r0, r5
 80080ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80080b6:	3301      	adds	r3, #1
 80080b8:	e7c5      	b.n	8008046 <__lshift+0x4a>
 80080ba:	3904      	subs	r1, #4
 80080bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80080c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80080c4:	459c      	cmp	ip, r3
 80080c6:	d8f9      	bhi.n	80080bc <__lshift+0xc0>
 80080c8:	e7ea      	b.n	80080a0 <__lshift+0xa4>
 80080ca:	bf00      	nop
 80080cc:	08009f14 	.word	0x08009f14
 80080d0:	08009f25 	.word	0x08009f25

080080d4 <__mcmp>:
 80080d4:	690a      	ldr	r2, [r1, #16]
 80080d6:	4603      	mov	r3, r0
 80080d8:	6900      	ldr	r0, [r0, #16]
 80080da:	1a80      	subs	r0, r0, r2
 80080dc:	b530      	push	{r4, r5, lr}
 80080de:	d10e      	bne.n	80080fe <__mcmp+0x2a>
 80080e0:	3314      	adds	r3, #20
 80080e2:	3114      	adds	r1, #20
 80080e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80080e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80080ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80080f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80080f4:	4295      	cmp	r5, r2
 80080f6:	d003      	beq.n	8008100 <__mcmp+0x2c>
 80080f8:	d205      	bcs.n	8008106 <__mcmp+0x32>
 80080fa:	f04f 30ff 	mov.w	r0, #4294967295
 80080fe:	bd30      	pop	{r4, r5, pc}
 8008100:	42a3      	cmp	r3, r4
 8008102:	d3f3      	bcc.n	80080ec <__mcmp+0x18>
 8008104:	e7fb      	b.n	80080fe <__mcmp+0x2a>
 8008106:	2001      	movs	r0, #1
 8008108:	e7f9      	b.n	80080fe <__mcmp+0x2a>
	...

0800810c <__mdiff>:
 800810c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008110:	4689      	mov	r9, r1
 8008112:	4606      	mov	r6, r0
 8008114:	4611      	mov	r1, r2
 8008116:	4648      	mov	r0, r9
 8008118:	4614      	mov	r4, r2
 800811a:	f7ff ffdb 	bl	80080d4 <__mcmp>
 800811e:	1e05      	subs	r5, r0, #0
 8008120:	d112      	bne.n	8008148 <__mdiff+0x3c>
 8008122:	4629      	mov	r1, r5
 8008124:	4630      	mov	r0, r6
 8008126:	f7ff fd5b 	bl	8007be0 <_Balloc>
 800812a:	4602      	mov	r2, r0
 800812c:	b928      	cbnz	r0, 800813a <__mdiff+0x2e>
 800812e:	4b3f      	ldr	r3, [pc, #252]	@ (800822c <__mdiff+0x120>)
 8008130:	f240 2137 	movw	r1, #567	@ 0x237
 8008134:	483e      	ldr	r0, [pc, #248]	@ (8008230 <__mdiff+0x124>)
 8008136:	f000 fb11 	bl	800875c <__assert_func>
 800813a:	2301      	movs	r3, #1
 800813c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008140:	4610      	mov	r0, r2
 8008142:	b003      	add	sp, #12
 8008144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008148:	bfbc      	itt	lt
 800814a:	464b      	movlt	r3, r9
 800814c:	46a1      	movlt	r9, r4
 800814e:	4630      	mov	r0, r6
 8008150:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008154:	bfba      	itte	lt
 8008156:	461c      	movlt	r4, r3
 8008158:	2501      	movlt	r5, #1
 800815a:	2500      	movge	r5, #0
 800815c:	f7ff fd40 	bl	8007be0 <_Balloc>
 8008160:	4602      	mov	r2, r0
 8008162:	b918      	cbnz	r0, 800816c <__mdiff+0x60>
 8008164:	4b31      	ldr	r3, [pc, #196]	@ (800822c <__mdiff+0x120>)
 8008166:	f240 2145 	movw	r1, #581	@ 0x245
 800816a:	e7e3      	b.n	8008134 <__mdiff+0x28>
 800816c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008170:	6926      	ldr	r6, [r4, #16]
 8008172:	60c5      	str	r5, [r0, #12]
 8008174:	f109 0310 	add.w	r3, r9, #16
 8008178:	f109 0514 	add.w	r5, r9, #20
 800817c:	f104 0e14 	add.w	lr, r4, #20
 8008180:	f100 0b14 	add.w	fp, r0, #20
 8008184:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008188:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800818c:	9301      	str	r3, [sp, #4]
 800818e:	46d9      	mov	r9, fp
 8008190:	f04f 0c00 	mov.w	ip, #0
 8008194:	9b01      	ldr	r3, [sp, #4]
 8008196:	f85e 0b04 	ldr.w	r0, [lr], #4
 800819a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800819e:	9301      	str	r3, [sp, #4]
 80081a0:	fa1f f38a 	uxth.w	r3, sl
 80081a4:	4619      	mov	r1, r3
 80081a6:	b283      	uxth	r3, r0
 80081a8:	1acb      	subs	r3, r1, r3
 80081aa:	0c00      	lsrs	r0, r0, #16
 80081ac:	4463      	add	r3, ip
 80081ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80081b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80081bc:	4576      	cmp	r6, lr
 80081be:	f849 3b04 	str.w	r3, [r9], #4
 80081c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80081c6:	d8e5      	bhi.n	8008194 <__mdiff+0x88>
 80081c8:	1b33      	subs	r3, r6, r4
 80081ca:	3b15      	subs	r3, #21
 80081cc:	f023 0303 	bic.w	r3, r3, #3
 80081d0:	3415      	adds	r4, #21
 80081d2:	3304      	adds	r3, #4
 80081d4:	42a6      	cmp	r6, r4
 80081d6:	bf38      	it	cc
 80081d8:	2304      	movcc	r3, #4
 80081da:	441d      	add	r5, r3
 80081dc:	445b      	add	r3, fp
 80081de:	461e      	mov	r6, r3
 80081e0:	462c      	mov	r4, r5
 80081e2:	4544      	cmp	r4, r8
 80081e4:	d30e      	bcc.n	8008204 <__mdiff+0xf8>
 80081e6:	f108 0103 	add.w	r1, r8, #3
 80081ea:	1b49      	subs	r1, r1, r5
 80081ec:	f021 0103 	bic.w	r1, r1, #3
 80081f0:	3d03      	subs	r5, #3
 80081f2:	45a8      	cmp	r8, r5
 80081f4:	bf38      	it	cc
 80081f6:	2100      	movcc	r1, #0
 80081f8:	440b      	add	r3, r1
 80081fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80081fe:	b191      	cbz	r1, 8008226 <__mdiff+0x11a>
 8008200:	6117      	str	r7, [r2, #16]
 8008202:	e79d      	b.n	8008140 <__mdiff+0x34>
 8008204:	f854 1b04 	ldr.w	r1, [r4], #4
 8008208:	46e6      	mov	lr, ip
 800820a:	0c08      	lsrs	r0, r1, #16
 800820c:	fa1c fc81 	uxtah	ip, ip, r1
 8008210:	4471      	add	r1, lr
 8008212:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008216:	b289      	uxth	r1, r1
 8008218:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800821c:	f846 1b04 	str.w	r1, [r6], #4
 8008220:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008224:	e7dd      	b.n	80081e2 <__mdiff+0xd6>
 8008226:	3f01      	subs	r7, #1
 8008228:	e7e7      	b.n	80081fa <__mdiff+0xee>
 800822a:	bf00      	nop
 800822c:	08009f14 	.word	0x08009f14
 8008230:	08009f25 	.word	0x08009f25

08008234 <__d2b>:
 8008234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008238:	460f      	mov	r7, r1
 800823a:	2101      	movs	r1, #1
 800823c:	ec59 8b10 	vmov	r8, r9, d0
 8008240:	4616      	mov	r6, r2
 8008242:	f7ff fccd 	bl	8007be0 <_Balloc>
 8008246:	4604      	mov	r4, r0
 8008248:	b930      	cbnz	r0, 8008258 <__d2b+0x24>
 800824a:	4602      	mov	r2, r0
 800824c:	4b23      	ldr	r3, [pc, #140]	@ (80082dc <__d2b+0xa8>)
 800824e:	4824      	ldr	r0, [pc, #144]	@ (80082e0 <__d2b+0xac>)
 8008250:	f240 310f 	movw	r1, #783	@ 0x30f
 8008254:	f000 fa82 	bl	800875c <__assert_func>
 8008258:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800825c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008260:	b10d      	cbz	r5, 8008266 <__d2b+0x32>
 8008262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008266:	9301      	str	r3, [sp, #4]
 8008268:	f1b8 0300 	subs.w	r3, r8, #0
 800826c:	d023      	beq.n	80082b6 <__d2b+0x82>
 800826e:	4668      	mov	r0, sp
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	f7ff fd7c 	bl	8007d6e <__lo0bits>
 8008276:	e9dd 1200 	ldrd	r1, r2, [sp]
 800827a:	b1d0      	cbz	r0, 80082b2 <__d2b+0x7e>
 800827c:	f1c0 0320 	rsb	r3, r0, #32
 8008280:	fa02 f303 	lsl.w	r3, r2, r3
 8008284:	430b      	orrs	r3, r1
 8008286:	40c2      	lsrs	r2, r0
 8008288:	6163      	str	r3, [r4, #20]
 800828a:	9201      	str	r2, [sp, #4]
 800828c:	9b01      	ldr	r3, [sp, #4]
 800828e:	61a3      	str	r3, [r4, #24]
 8008290:	2b00      	cmp	r3, #0
 8008292:	bf0c      	ite	eq
 8008294:	2201      	moveq	r2, #1
 8008296:	2202      	movne	r2, #2
 8008298:	6122      	str	r2, [r4, #16]
 800829a:	b1a5      	cbz	r5, 80082c6 <__d2b+0x92>
 800829c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80082a0:	4405      	add	r5, r0
 80082a2:	603d      	str	r5, [r7, #0]
 80082a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80082a8:	6030      	str	r0, [r6, #0]
 80082aa:	4620      	mov	r0, r4
 80082ac:	b003      	add	sp, #12
 80082ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082b2:	6161      	str	r1, [r4, #20]
 80082b4:	e7ea      	b.n	800828c <__d2b+0x58>
 80082b6:	a801      	add	r0, sp, #4
 80082b8:	f7ff fd59 	bl	8007d6e <__lo0bits>
 80082bc:	9b01      	ldr	r3, [sp, #4]
 80082be:	6163      	str	r3, [r4, #20]
 80082c0:	3020      	adds	r0, #32
 80082c2:	2201      	movs	r2, #1
 80082c4:	e7e8      	b.n	8008298 <__d2b+0x64>
 80082c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80082ce:	6038      	str	r0, [r7, #0]
 80082d0:	6918      	ldr	r0, [r3, #16]
 80082d2:	f7ff fd2d 	bl	8007d30 <__hi0bits>
 80082d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082da:	e7e5      	b.n	80082a8 <__d2b+0x74>
 80082dc:	08009f14 	.word	0x08009f14
 80082e0:	08009f25 	.word	0x08009f25

080082e4 <__ssputs_r>:
 80082e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e8:	688e      	ldr	r6, [r1, #8]
 80082ea:	461f      	mov	r7, r3
 80082ec:	42be      	cmp	r6, r7
 80082ee:	680b      	ldr	r3, [r1, #0]
 80082f0:	4682      	mov	sl, r0
 80082f2:	460c      	mov	r4, r1
 80082f4:	4690      	mov	r8, r2
 80082f6:	d82d      	bhi.n	8008354 <__ssputs_r+0x70>
 80082f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008300:	d026      	beq.n	8008350 <__ssputs_r+0x6c>
 8008302:	6965      	ldr	r5, [r4, #20]
 8008304:	6909      	ldr	r1, [r1, #16]
 8008306:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800830a:	eba3 0901 	sub.w	r9, r3, r1
 800830e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008312:	1c7b      	adds	r3, r7, #1
 8008314:	444b      	add	r3, r9
 8008316:	106d      	asrs	r5, r5, #1
 8008318:	429d      	cmp	r5, r3
 800831a:	bf38      	it	cc
 800831c:	461d      	movcc	r5, r3
 800831e:	0553      	lsls	r3, r2, #21
 8008320:	d527      	bpl.n	8008372 <__ssputs_r+0x8e>
 8008322:	4629      	mov	r1, r5
 8008324:	f7ff fbd0 	bl	8007ac8 <_malloc_r>
 8008328:	4606      	mov	r6, r0
 800832a:	b360      	cbz	r0, 8008386 <__ssputs_r+0xa2>
 800832c:	6921      	ldr	r1, [r4, #16]
 800832e:	464a      	mov	r2, r9
 8008330:	f000 fa06 	bl	8008740 <memcpy>
 8008334:	89a3      	ldrh	r3, [r4, #12]
 8008336:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800833a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800833e:	81a3      	strh	r3, [r4, #12]
 8008340:	6126      	str	r6, [r4, #16]
 8008342:	6165      	str	r5, [r4, #20]
 8008344:	444e      	add	r6, r9
 8008346:	eba5 0509 	sub.w	r5, r5, r9
 800834a:	6026      	str	r6, [r4, #0]
 800834c:	60a5      	str	r5, [r4, #8]
 800834e:	463e      	mov	r6, r7
 8008350:	42be      	cmp	r6, r7
 8008352:	d900      	bls.n	8008356 <__ssputs_r+0x72>
 8008354:	463e      	mov	r6, r7
 8008356:	6820      	ldr	r0, [r4, #0]
 8008358:	4632      	mov	r2, r6
 800835a:	4641      	mov	r1, r8
 800835c:	f000 f9c6 	bl	80086ec <memmove>
 8008360:	68a3      	ldr	r3, [r4, #8]
 8008362:	1b9b      	subs	r3, r3, r6
 8008364:	60a3      	str	r3, [r4, #8]
 8008366:	6823      	ldr	r3, [r4, #0]
 8008368:	4433      	add	r3, r6
 800836a:	6023      	str	r3, [r4, #0]
 800836c:	2000      	movs	r0, #0
 800836e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008372:	462a      	mov	r2, r5
 8008374:	f000 fa36 	bl	80087e4 <_realloc_r>
 8008378:	4606      	mov	r6, r0
 800837a:	2800      	cmp	r0, #0
 800837c:	d1e0      	bne.n	8008340 <__ssputs_r+0x5c>
 800837e:	6921      	ldr	r1, [r4, #16]
 8008380:	4650      	mov	r0, sl
 8008382:	f7ff fb2d 	bl	80079e0 <_free_r>
 8008386:	230c      	movs	r3, #12
 8008388:	f8ca 3000 	str.w	r3, [sl]
 800838c:	89a3      	ldrh	r3, [r4, #12]
 800838e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008392:	81a3      	strh	r3, [r4, #12]
 8008394:	f04f 30ff 	mov.w	r0, #4294967295
 8008398:	e7e9      	b.n	800836e <__ssputs_r+0x8a>
	...

0800839c <_svfiprintf_r>:
 800839c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a0:	4698      	mov	r8, r3
 80083a2:	898b      	ldrh	r3, [r1, #12]
 80083a4:	061b      	lsls	r3, r3, #24
 80083a6:	b09d      	sub	sp, #116	@ 0x74
 80083a8:	4607      	mov	r7, r0
 80083aa:	460d      	mov	r5, r1
 80083ac:	4614      	mov	r4, r2
 80083ae:	d510      	bpl.n	80083d2 <_svfiprintf_r+0x36>
 80083b0:	690b      	ldr	r3, [r1, #16]
 80083b2:	b973      	cbnz	r3, 80083d2 <_svfiprintf_r+0x36>
 80083b4:	2140      	movs	r1, #64	@ 0x40
 80083b6:	f7ff fb87 	bl	8007ac8 <_malloc_r>
 80083ba:	6028      	str	r0, [r5, #0]
 80083bc:	6128      	str	r0, [r5, #16]
 80083be:	b930      	cbnz	r0, 80083ce <_svfiprintf_r+0x32>
 80083c0:	230c      	movs	r3, #12
 80083c2:	603b      	str	r3, [r7, #0]
 80083c4:	f04f 30ff 	mov.w	r0, #4294967295
 80083c8:	b01d      	add	sp, #116	@ 0x74
 80083ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ce:	2340      	movs	r3, #64	@ 0x40
 80083d0:	616b      	str	r3, [r5, #20]
 80083d2:	2300      	movs	r3, #0
 80083d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80083d6:	2320      	movs	r3, #32
 80083d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80083e0:	2330      	movs	r3, #48	@ 0x30
 80083e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008580 <_svfiprintf_r+0x1e4>
 80083e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083ea:	f04f 0901 	mov.w	r9, #1
 80083ee:	4623      	mov	r3, r4
 80083f0:	469a      	mov	sl, r3
 80083f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083f6:	b10a      	cbz	r2, 80083fc <_svfiprintf_r+0x60>
 80083f8:	2a25      	cmp	r2, #37	@ 0x25
 80083fa:	d1f9      	bne.n	80083f0 <_svfiprintf_r+0x54>
 80083fc:	ebba 0b04 	subs.w	fp, sl, r4
 8008400:	d00b      	beq.n	800841a <_svfiprintf_r+0x7e>
 8008402:	465b      	mov	r3, fp
 8008404:	4622      	mov	r2, r4
 8008406:	4629      	mov	r1, r5
 8008408:	4638      	mov	r0, r7
 800840a:	f7ff ff6b 	bl	80082e4 <__ssputs_r>
 800840e:	3001      	adds	r0, #1
 8008410:	f000 80a7 	beq.w	8008562 <_svfiprintf_r+0x1c6>
 8008414:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008416:	445a      	add	r2, fp
 8008418:	9209      	str	r2, [sp, #36]	@ 0x24
 800841a:	f89a 3000 	ldrb.w	r3, [sl]
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 809f 	beq.w	8008562 <_svfiprintf_r+0x1c6>
 8008424:	2300      	movs	r3, #0
 8008426:	f04f 32ff 	mov.w	r2, #4294967295
 800842a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800842e:	f10a 0a01 	add.w	sl, sl, #1
 8008432:	9304      	str	r3, [sp, #16]
 8008434:	9307      	str	r3, [sp, #28]
 8008436:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800843a:	931a      	str	r3, [sp, #104]	@ 0x68
 800843c:	4654      	mov	r4, sl
 800843e:	2205      	movs	r2, #5
 8008440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008444:	484e      	ldr	r0, [pc, #312]	@ (8008580 <_svfiprintf_r+0x1e4>)
 8008446:	f7f7 fec3 	bl	80001d0 <memchr>
 800844a:	9a04      	ldr	r2, [sp, #16]
 800844c:	b9d8      	cbnz	r0, 8008486 <_svfiprintf_r+0xea>
 800844e:	06d0      	lsls	r0, r2, #27
 8008450:	bf44      	itt	mi
 8008452:	2320      	movmi	r3, #32
 8008454:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008458:	0711      	lsls	r1, r2, #28
 800845a:	bf44      	itt	mi
 800845c:	232b      	movmi	r3, #43	@ 0x2b
 800845e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008462:	f89a 3000 	ldrb.w	r3, [sl]
 8008466:	2b2a      	cmp	r3, #42	@ 0x2a
 8008468:	d015      	beq.n	8008496 <_svfiprintf_r+0xfa>
 800846a:	9a07      	ldr	r2, [sp, #28]
 800846c:	4654      	mov	r4, sl
 800846e:	2000      	movs	r0, #0
 8008470:	f04f 0c0a 	mov.w	ip, #10
 8008474:	4621      	mov	r1, r4
 8008476:	f811 3b01 	ldrb.w	r3, [r1], #1
 800847a:	3b30      	subs	r3, #48	@ 0x30
 800847c:	2b09      	cmp	r3, #9
 800847e:	d94b      	bls.n	8008518 <_svfiprintf_r+0x17c>
 8008480:	b1b0      	cbz	r0, 80084b0 <_svfiprintf_r+0x114>
 8008482:	9207      	str	r2, [sp, #28]
 8008484:	e014      	b.n	80084b0 <_svfiprintf_r+0x114>
 8008486:	eba0 0308 	sub.w	r3, r0, r8
 800848a:	fa09 f303 	lsl.w	r3, r9, r3
 800848e:	4313      	orrs	r3, r2
 8008490:	9304      	str	r3, [sp, #16]
 8008492:	46a2      	mov	sl, r4
 8008494:	e7d2      	b.n	800843c <_svfiprintf_r+0xa0>
 8008496:	9b03      	ldr	r3, [sp, #12]
 8008498:	1d19      	adds	r1, r3, #4
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	9103      	str	r1, [sp, #12]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	bfbb      	ittet	lt
 80084a2:	425b      	neglt	r3, r3
 80084a4:	f042 0202 	orrlt.w	r2, r2, #2
 80084a8:	9307      	strge	r3, [sp, #28]
 80084aa:	9307      	strlt	r3, [sp, #28]
 80084ac:	bfb8      	it	lt
 80084ae:	9204      	strlt	r2, [sp, #16]
 80084b0:	7823      	ldrb	r3, [r4, #0]
 80084b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80084b4:	d10a      	bne.n	80084cc <_svfiprintf_r+0x130>
 80084b6:	7863      	ldrb	r3, [r4, #1]
 80084b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80084ba:	d132      	bne.n	8008522 <_svfiprintf_r+0x186>
 80084bc:	9b03      	ldr	r3, [sp, #12]
 80084be:	1d1a      	adds	r2, r3, #4
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	9203      	str	r2, [sp, #12]
 80084c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084c8:	3402      	adds	r4, #2
 80084ca:	9305      	str	r3, [sp, #20]
 80084cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008590 <_svfiprintf_r+0x1f4>
 80084d0:	7821      	ldrb	r1, [r4, #0]
 80084d2:	2203      	movs	r2, #3
 80084d4:	4650      	mov	r0, sl
 80084d6:	f7f7 fe7b 	bl	80001d0 <memchr>
 80084da:	b138      	cbz	r0, 80084ec <_svfiprintf_r+0x150>
 80084dc:	9b04      	ldr	r3, [sp, #16]
 80084de:	eba0 000a 	sub.w	r0, r0, sl
 80084e2:	2240      	movs	r2, #64	@ 0x40
 80084e4:	4082      	lsls	r2, r0
 80084e6:	4313      	orrs	r3, r2
 80084e8:	3401      	adds	r4, #1
 80084ea:	9304      	str	r3, [sp, #16]
 80084ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084f0:	4824      	ldr	r0, [pc, #144]	@ (8008584 <_svfiprintf_r+0x1e8>)
 80084f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084f6:	2206      	movs	r2, #6
 80084f8:	f7f7 fe6a 	bl	80001d0 <memchr>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d036      	beq.n	800856e <_svfiprintf_r+0x1d2>
 8008500:	4b21      	ldr	r3, [pc, #132]	@ (8008588 <_svfiprintf_r+0x1ec>)
 8008502:	bb1b      	cbnz	r3, 800854c <_svfiprintf_r+0x1b0>
 8008504:	9b03      	ldr	r3, [sp, #12]
 8008506:	3307      	adds	r3, #7
 8008508:	f023 0307 	bic.w	r3, r3, #7
 800850c:	3308      	adds	r3, #8
 800850e:	9303      	str	r3, [sp, #12]
 8008510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008512:	4433      	add	r3, r6
 8008514:	9309      	str	r3, [sp, #36]	@ 0x24
 8008516:	e76a      	b.n	80083ee <_svfiprintf_r+0x52>
 8008518:	fb0c 3202 	mla	r2, ip, r2, r3
 800851c:	460c      	mov	r4, r1
 800851e:	2001      	movs	r0, #1
 8008520:	e7a8      	b.n	8008474 <_svfiprintf_r+0xd8>
 8008522:	2300      	movs	r3, #0
 8008524:	3401      	adds	r4, #1
 8008526:	9305      	str	r3, [sp, #20]
 8008528:	4619      	mov	r1, r3
 800852a:	f04f 0c0a 	mov.w	ip, #10
 800852e:	4620      	mov	r0, r4
 8008530:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008534:	3a30      	subs	r2, #48	@ 0x30
 8008536:	2a09      	cmp	r2, #9
 8008538:	d903      	bls.n	8008542 <_svfiprintf_r+0x1a6>
 800853a:	2b00      	cmp	r3, #0
 800853c:	d0c6      	beq.n	80084cc <_svfiprintf_r+0x130>
 800853e:	9105      	str	r1, [sp, #20]
 8008540:	e7c4      	b.n	80084cc <_svfiprintf_r+0x130>
 8008542:	fb0c 2101 	mla	r1, ip, r1, r2
 8008546:	4604      	mov	r4, r0
 8008548:	2301      	movs	r3, #1
 800854a:	e7f0      	b.n	800852e <_svfiprintf_r+0x192>
 800854c:	ab03      	add	r3, sp, #12
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	462a      	mov	r2, r5
 8008552:	4b0e      	ldr	r3, [pc, #56]	@ (800858c <_svfiprintf_r+0x1f0>)
 8008554:	a904      	add	r1, sp, #16
 8008556:	4638      	mov	r0, r7
 8008558:	f7fd fe96 	bl	8006288 <_printf_float>
 800855c:	1c42      	adds	r2, r0, #1
 800855e:	4606      	mov	r6, r0
 8008560:	d1d6      	bne.n	8008510 <_svfiprintf_r+0x174>
 8008562:	89ab      	ldrh	r3, [r5, #12]
 8008564:	065b      	lsls	r3, r3, #25
 8008566:	f53f af2d 	bmi.w	80083c4 <_svfiprintf_r+0x28>
 800856a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800856c:	e72c      	b.n	80083c8 <_svfiprintf_r+0x2c>
 800856e:	ab03      	add	r3, sp, #12
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	462a      	mov	r2, r5
 8008574:	4b05      	ldr	r3, [pc, #20]	@ (800858c <_svfiprintf_r+0x1f0>)
 8008576:	a904      	add	r1, sp, #16
 8008578:	4638      	mov	r0, r7
 800857a:	f7fe f91d 	bl	80067b8 <_printf_i>
 800857e:	e7ed      	b.n	800855c <_svfiprintf_r+0x1c0>
 8008580:	0800a080 	.word	0x0800a080
 8008584:	0800a08a 	.word	0x0800a08a
 8008588:	08006289 	.word	0x08006289
 800858c:	080082e5 	.word	0x080082e5
 8008590:	0800a086 	.word	0x0800a086

08008594 <__sflush_r>:
 8008594:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800859c:	0716      	lsls	r6, r2, #28
 800859e:	4605      	mov	r5, r0
 80085a0:	460c      	mov	r4, r1
 80085a2:	d454      	bmi.n	800864e <__sflush_r+0xba>
 80085a4:	684b      	ldr	r3, [r1, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	dc02      	bgt.n	80085b0 <__sflush_r+0x1c>
 80085aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	dd48      	ble.n	8008642 <__sflush_r+0xae>
 80085b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085b2:	2e00      	cmp	r6, #0
 80085b4:	d045      	beq.n	8008642 <__sflush_r+0xae>
 80085b6:	2300      	movs	r3, #0
 80085b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80085bc:	682f      	ldr	r7, [r5, #0]
 80085be:	6a21      	ldr	r1, [r4, #32]
 80085c0:	602b      	str	r3, [r5, #0]
 80085c2:	d030      	beq.n	8008626 <__sflush_r+0x92>
 80085c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80085c6:	89a3      	ldrh	r3, [r4, #12]
 80085c8:	0759      	lsls	r1, r3, #29
 80085ca:	d505      	bpl.n	80085d8 <__sflush_r+0x44>
 80085cc:	6863      	ldr	r3, [r4, #4]
 80085ce:	1ad2      	subs	r2, r2, r3
 80085d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80085d2:	b10b      	cbz	r3, 80085d8 <__sflush_r+0x44>
 80085d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80085d6:	1ad2      	subs	r2, r2, r3
 80085d8:	2300      	movs	r3, #0
 80085da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085dc:	6a21      	ldr	r1, [r4, #32]
 80085de:	4628      	mov	r0, r5
 80085e0:	47b0      	blx	r6
 80085e2:	1c43      	adds	r3, r0, #1
 80085e4:	89a3      	ldrh	r3, [r4, #12]
 80085e6:	d106      	bne.n	80085f6 <__sflush_r+0x62>
 80085e8:	6829      	ldr	r1, [r5, #0]
 80085ea:	291d      	cmp	r1, #29
 80085ec:	d82b      	bhi.n	8008646 <__sflush_r+0xb2>
 80085ee:	4a2a      	ldr	r2, [pc, #168]	@ (8008698 <__sflush_r+0x104>)
 80085f0:	410a      	asrs	r2, r1
 80085f2:	07d6      	lsls	r6, r2, #31
 80085f4:	d427      	bmi.n	8008646 <__sflush_r+0xb2>
 80085f6:	2200      	movs	r2, #0
 80085f8:	6062      	str	r2, [r4, #4]
 80085fa:	04d9      	lsls	r1, r3, #19
 80085fc:	6922      	ldr	r2, [r4, #16]
 80085fe:	6022      	str	r2, [r4, #0]
 8008600:	d504      	bpl.n	800860c <__sflush_r+0x78>
 8008602:	1c42      	adds	r2, r0, #1
 8008604:	d101      	bne.n	800860a <__sflush_r+0x76>
 8008606:	682b      	ldr	r3, [r5, #0]
 8008608:	b903      	cbnz	r3, 800860c <__sflush_r+0x78>
 800860a:	6560      	str	r0, [r4, #84]	@ 0x54
 800860c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800860e:	602f      	str	r7, [r5, #0]
 8008610:	b1b9      	cbz	r1, 8008642 <__sflush_r+0xae>
 8008612:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008616:	4299      	cmp	r1, r3
 8008618:	d002      	beq.n	8008620 <__sflush_r+0x8c>
 800861a:	4628      	mov	r0, r5
 800861c:	f7ff f9e0 	bl	80079e0 <_free_r>
 8008620:	2300      	movs	r3, #0
 8008622:	6363      	str	r3, [r4, #52]	@ 0x34
 8008624:	e00d      	b.n	8008642 <__sflush_r+0xae>
 8008626:	2301      	movs	r3, #1
 8008628:	4628      	mov	r0, r5
 800862a:	47b0      	blx	r6
 800862c:	4602      	mov	r2, r0
 800862e:	1c50      	adds	r0, r2, #1
 8008630:	d1c9      	bne.n	80085c6 <__sflush_r+0x32>
 8008632:	682b      	ldr	r3, [r5, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d0c6      	beq.n	80085c6 <__sflush_r+0x32>
 8008638:	2b1d      	cmp	r3, #29
 800863a:	d001      	beq.n	8008640 <__sflush_r+0xac>
 800863c:	2b16      	cmp	r3, #22
 800863e:	d11e      	bne.n	800867e <__sflush_r+0xea>
 8008640:	602f      	str	r7, [r5, #0]
 8008642:	2000      	movs	r0, #0
 8008644:	e022      	b.n	800868c <__sflush_r+0xf8>
 8008646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800864a:	b21b      	sxth	r3, r3
 800864c:	e01b      	b.n	8008686 <__sflush_r+0xf2>
 800864e:	690f      	ldr	r7, [r1, #16]
 8008650:	2f00      	cmp	r7, #0
 8008652:	d0f6      	beq.n	8008642 <__sflush_r+0xae>
 8008654:	0793      	lsls	r3, r2, #30
 8008656:	680e      	ldr	r6, [r1, #0]
 8008658:	bf08      	it	eq
 800865a:	694b      	ldreq	r3, [r1, #20]
 800865c:	600f      	str	r7, [r1, #0]
 800865e:	bf18      	it	ne
 8008660:	2300      	movne	r3, #0
 8008662:	eba6 0807 	sub.w	r8, r6, r7
 8008666:	608b      	str	r3, [r1, #8]
 8008668:	f1b8 0f00 	cmp.w	r8, #0
 800866c:	dde9      	ble.n	8008642 <__sflush_r+0xae>
 800866e:	6a21      	ldr	r1, [r4, #32]
 8008670:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008672:	4643      	mov	r3, r8
 8008674:	463a      	mov	r2, r7
 8008676:	4628      	mov	r0, r5
 8008678:	47b0      	blx	r6
 800867a:	2800      	cmp	r0, #0
 800867c:	dc08      	bgt.n	8008690 <__sflush_r+0xfc>
 800867e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008686:	81a3      	strh	r3, [r4, #12]
 8008688:	f04f 30ff 	mov.w	r0, #4294967295
 800868c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008690:	4407      	add	r7, r0
 8008692:	eba8 0800 	sub.w	r8, r8, r0
 8008696:	e7e7      	b.n	8008668 <__sflush_r+0xd4>
 8008698:	dfbffffe 	.word	0xdfbffffe

0800869c <_fflush_r>:
 800869c:	b538      	push	{r3, r4, r5, lr}
 800869e:	690b      	ldr	r3, [r1, #16]
 80086a0:	4605      	mov	r5, r0
 80086a2:	460c      	mov	r4, r1
 80086a4:	b913      	cbnz	r3, 80086ac <_fflush_r+0x10>
 80086a6:	2500      	movs	r5, #0
 80086a8:	4628      	mov	r0, r5
 80086aa:	bd38      	pop	{r3, r4, r5, pc}
 80086ac:	b118      	cbz	r0, 80086b6 <_fflush_r+0x1a>
 80086ae:	6a03      	ldr	r3, [r0, #32]
 80086b0:	b90b      	cbnz	r3, 80086b6 <_fflush_r+0x1a>
 80086b2:	f7fe fa2d 	bl	8006b10 <__sinit>
 80086b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d0f3      	beq.n	80086a6 <_fflush_r+0xa>
 80086be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80086c0:	07d0      	lsls	r0, r2, #31
 80086c2:	d404      	bmi.n	80086ce <_fflush_r+0x32>
 80086c4:	0599      	lsls	r1, r3, #22
 80086c6:	d402      	bmi.n	80086ce <_fflush_r+0x32>
 80086c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086ca:	f7fe fb38 	bl	8006d3e <__retarget_lock_acquire_recursive>
 80086ce:	4628      	mov	r0, r5
 80086d0:	4621      	mov	r1, r4
 80086d2:	f7ff ff5f 	bl	8008594 <__sflush_r>
 80086d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086d8:	07da      	lsls	r2, r3, #31
 80086da:	4605      	mov	r5, r0
 80086dc:	d4e4      	bmi.n	80086a8 <_fflush_r+0xc>
 80086de:	89a3      	ldrh	r3, [r4, #12]
 80086e0:	059b      	lsls	r3, r3, #22
 80086e2:	d4e1      	bmi.n	80086a8 <_fflush_r+0xc>
 80086e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086e6:	f7fe fb2b 	bl	8006d40 <__retarget_lock_release_recursive>
 80086ea:	e7dd      	b.n	80086a8 <_fflush_r+0xc>

080086ec <memmove>:
 80086ec:	4288      	cmp	r0, r1
 80086ee:	b510      	push	{r4, lr}
 80086f0:	eb01 0402 	add.w	r4, r1, r2
 80086f4:	d902      	bls.n	80086fc <memmove+0x10>
 80086f6:	4284      	cmp	r4, r0
 80086f8:	4623      	mov	r3, r4
 80086fa:	d807      	bhi.n	800870c <memmove+0x20>
 80086fc:	1e43      	subs	r3, r0, #1
 80086fe:	42a1      	cmp	r1, r4
 8008700:	d008      	beq.n	8008714 <memmove+0x28>
 8008702:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008706:	f803 2f01 	strb.w	r2, [r3, #1]!
 800870a:	e7f8      	b.n	80086fe <memmove+0x12>
 800870c:	4402      	add	r2, r0
 800870e:	4601      	mov	r1, r0
 8008710:	428a      	cmp	r2, r1
 8008712:	d100      	bne.n	8008716 <memmove+0x2a>
 8008714:	bd10      	pop	{r4, pc}
 8008716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800871a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800871e:	e7f7      	b.n	8008710 <memmove+0x24>

08008720 <_sbrk_r>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	4d06      	ldr	r5, [pc, #24]	@ (800873c <_sbrk_r+0x1c>)
 8008724:	2300      	movs	r3, #0
 8008726:	4604      	mov	r4, r0
 8008728:	4608      	mov	r0, r1
 800872a:	602b      	str	r3, [r5, #0]
 800872c:	f7f9 fb7e 	bl	8001e2c <_sbrk>
 8008730:	1c43      	adds	r3, r0, #1
 8008732:	d102      	bne.n	800873a <_sbrk_r+0x1a>
 8008734:	682b      	ldr	r3, [r5, #0]
 8008736:	b103      	cbz	r3, 800873a <_sbrk_r+0x1a>
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	bd38      	pop	{r3, r4, r5, pc}
 800873c:	20000654 	.word	0x20000654

08008740 <memcpy>:
 8008740:	440a      	add	r2, r1
 8008742:	4291      	cmp	r1, r2
 8008744:	f100 33ff 	add.w	r3, r0, #4294967295
 8008748:	d100      	bne.n	800874c <memcpy+0xc>
 800874a:	4770      	bx	lr
 800874c:	b510      	push	{r4, lr}
 800874e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008752:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008756:	4291      	cmp	r1, r2
 8008758:	d1f9      	bne.n	800874e <memcpy+0xe>
 800875a:	bd10      	pop	{r4, pc}

0800875c <__assert_func>:
 800875c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800875e:	4614      	mov	r4, r2
 8008760:	461a      	mov	r2, r3
 8008762:	4b09      	ldr	r3, [pc, #36]	@ (8008788 <__assert_func+0x2c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4605      	mov	r5, r0
 8008768:	68d8      	ldr	r0, [r3, #12]
 800876a:	b954      	cbnz	r4, 8008782 <__assert_func+0x26>
 800876c:	4b07      	ldr	r3, [pc, #28]	@ (800878c <__assert_func+0x30>)
 800876e:	461c      	mov	r4, r3
 8008770:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008774:	9100      	str	r1, [sp, #0]
 8008776:	462b      	mov	r3, r5
 8008778:	4905      	ldr	r1, [pc, #20]	@ (8008790 <__assert_func+0x34>)
 800877a:	f000 f86f 	bl	800885c <fiprintf>
 800877e:	f000 f87f 	bl	8008880 <abort>
 8008782:	4b04      	ldr	r3, [pc, #16]	@ (8008794 <__assert_func+0x38>)
 8008784:	e7f4      	b.n	8008770 <__assert_func+0x14>
 8008786:	bf00      	nop
 8008788:	2000001c 	.word	0x2000001c
 800878c:	0800a0d6 	.word	0x0800a0d6
 8008790:	0800a0a8 	.word	0x0800a0a8
 8008794:	0800a09b 	.word	0x0800a09b

08008798 <_calloc_r>:
 8008798:	b570      	push	{r4, r5, r6, lr}
 800879a:	fba1 5402 	umull	r5, r4, r1, r2
 800879e:	b93c      	cbnz	r4, 80087b0 <_calloc_r+0x18>
 80087a0:	4629      	mov	r1, r5
 80087a2:	f7ff f991 	bl	8007ac8 <_malloc_r>
 80087a6:	4606      	mov	r6, r0
 80087a8:	b928      	cbnz	r0, 80087b6 <_calloc_r+0x1e>
 80087aa:	2600      	movs	r6, #0
 80087ac:	4630      	mov	r0, r6
 80087ae:	bd70      	pop	{r4, r5, r6, pc}
 80087b0:	220c      	movs	r2, #12
 80087b2:	6002      	str	r2, [r0, #0]
 80087b4:	e7f9      	b.n	80087aa <_calloc_r+0x12>
 80087b6:	462a      	mov	r2, r5
 80087b8:	4621      	mov	r1, r4
 80087ba:	f7fe fa42 	bl	8006c42 <memset>
 80087be:	e7f5      	b.n	80087ac <_calloc_r+0x14>

080087c0 <__ascii_mbtowc>:
 80087c0:	b082      	sub	sp, #8
 80087c2:	b901      	cbnz	r1, 80087c6 <__ascii_mbtowc+0x6>
 80087c4:	a901      	add	r1, sp, #4
 80087c6:	b142      	cbz	r2, 80087da <__ascii_mbtowc+0x1a>
 80087c8:	b14b      	cbz	r3, 80087de <__ascii_mbtowc+0x1e>
 80087ca:	7813      	ldrb	r3, [r2, #0]
 80087cc:	600b      	str	r3, [r1, #0]
 80087ce:	7812      	ldrb	r2, [r2, #0]
 80087d0:	1e10      	subs	r0, r2, #0
 80087d2:	bf18      	it	ne
 80087d4:	2001      	movne	r0, #1
 80087d6:	b002      	add	sp, #8
 80087d8:	4770      	bx	lr
 80087da:	4610      	mov	r0, r2
 80087dc:	e7fb      	b.n	80087d6 <__ascii_mbtowc+0x16>
 80087de:	f06f 0001 	mvn.w	r0, #1
 80087e2:	e7f8      	b.n	80087d6 <__ascii_mbtowc+0x16>

080087e4 <_realloc_r>:
 80087e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087e8:	4680      	mov	r8, r0
 80087ea:	4615      	mov	r5, r2
 80087ec:	460c      	mov	r4, r1
 80087ee:	b921      	cbnz	r1, 80087fa <_realloc_r+0x16>
 80087f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087f4:	4611      	mov	r1, r2
 80087f6:	f7ff b967 	b.w	8007ac8 <_malloc_r>
 80087fa:	b92a      	cbnz	r2, 8008808 <_realloc_r+0x24>
 80087fc:	f7ff f8f0 	bl	80079e0 <_free_r>
 8008800:	2400      	movs	r4, #0
 8008802:	4620      	mov	r0, r4
 8008804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008808:	f000 f841 	bl	800888e <_malloc_usable_size_r>
 800880c:	4285      	cmp	r5, r0
 800880e:	4606      	mov	r6, r0
 8008810:	d802      	bhi.n	8008818 <_realloc_r+0x34>
 8008812:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008816:	d8f4      	bhi.n	8008802 <_realloc_r+0x1e>
 8008818:	4629      	mov	r1, r5
 800881a:	4640      	mov	r0, r8
 800881c:	f7ff f954 	bl	8007ac8 <_malloc_r>
 8008820:	4607      	mov	r7, r0
 8008822:	2800      	cmp	r0, #0
 8008824:	d0ec      	beq.n	8008800 <_realloc_r+0x1c>
 8008826:	42b5      	cmp	r5, r6
 8008828:	462a      	mov	r2, r5
 800882a:	4621      	mov	r1, r4
 800882c:	bf28      	it	cs
 800882e:	4632      	movcs	r2, r6
 8008830:	f7ff ff86 	bl	8008740 <memcpy>
 8008834:	4621      	mov	r1, r4
 8008836:	4640      	mov	r0, r8
 8008838:	f7ff f8d2 	bl	80079e0 <_free_r>
 800883c:	463c      	mov	r4, r7
 800883e:	e7e0      	b.n	8008802 <_realloc_r+0x1e>

08008840 <__ascii_wctomb>:
 8008840:	4603      	mov	r3, r0
 8008842:	4608      	mov	r0, r1
 8008844:	b141      	cbz	r1, 8008858 <__ascii_wctomb+0x18>
 8008846:	2aff      	cmp	r2, #255	@ 0xff
 8008848:	d904      	bls.n	8008854 <__ascii_wctomb+0x14>
 800884a:	228a      	movs	r2, #138	@ 0x8a
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	f04f 30ff 	mov.w	r0, #4294967295
 8008852:	4770      	bx	lr
 8008854:	700a      	strb	r2, [r1, #0]
 8008856:	2001      	movs	r0, #1
 8008858:	4770      	bx	lr
	...

0800885c <fiprintf>:
 800885c:	b40e      	push	{r1, r2, r3}
 800885e:	b503      	push	{r0, r1, lr}
 8008860:	4601      	mov	r1, r0
 8008862:	ab03      	add	r3, sp, #12
 8008864:	4805      	ldr	r0, [pc, #20]	@ (800887c <fiprintf+0x20>)
 8008866:	f853 2b04 	ldr.w	r2, [r3], #4
 800886a:	6800      	ldr	r0, [r0, #0]
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	f000 f83f 	bl	80088f0 <_vfiprintf_r>
 8008872:	b002      	add	sp, #8
 8008874:	f85d eb04 	ldr.w	lr, [sp], #4
 8008878:	b003      	add	sp, #12
 800887a:	4770      	bx	lr
 800887c:	2000001c 	.word	0x2000001c

08008880 <abort>:
 8008880:	b508      	push	{r3, lr}
 8008882:	2006      	movs	r0, #6
 8008884:	f000 fa08 	bl	8008c98 <raise>
 8008888:	2001      	movs	r0, #1
 800888a:	f7f9 fa57 	bl	8001d3c <_exit>

0800888e <_malloc_usable_size_r>:
 800888e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008892:	1f18      	subs	r0, r3, #4
 8008894:	2b00      	cmp	r3, #0
 8008896:	bfbc      	itt	lt
 8008898:	580b      	ldrlt	r3, [r1, r0]
 800889a:	18c0      	addlt	r0, r0, r3
 800889c:	4770      	bx	lr

0800889e <__sfputc_r>:
 800889e:	6893      	ldr	r3, [r2, #8]
 80088a0:	3b01      	subs	r3, #1
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	b410      	push	{r4}
 80088a6:	6093      	str	r3, [r2, #8]
 80088a8:	da08      	bge.n	80088bc <__sfputc_r+0x1e>
 80088aa:	6994      	ldr	r4, [r2, #24]
 80088ac:	42a3      	cmp	r3, r4
 80088ae:	db01      	blt.n	80088b4 <__sfputc_r+0x16>
 80088b0:	290a      	cmp	r1, #10
 80088b2:	d103      	bne.n	80088bc <__sfputc_r+0x1e>
 80088b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088b8:	f000 b932 	b.w	8008b20 <__swbuf_r>
 80088bc:	6813      	ldr	r3, [r2, #0]
 80088be:	1c58      	adds	r0, r3, #1
 80088c0:	6010      	str	r0, [r2, #0]
 80088c2:	7019      	strb	r1, [r3, #0]
 80088c4:	4608      	mov	r0, r1
 80088c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <__sfputs_r>:
 80088cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ce:	4606      	mov	r6, r0
 80088d0:	460f      	mov	r7, r1
 80088d2:	4614      	mov	r4, r2
 80088d4:	18d5      	adds	r5, r2, r3
 80088d6:	42ac      	cmp	r4, r5
 80088d8:	d101      	bne.n	80088de <__sfputs_r+0x12>
 80088da:	2000      	movs	r0, #0
 80088dc:	e007      	b.n	80088ee <__sfputs_r+0x22>
 80088de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088e2:	463a      	mov	r2, r7
 80088e4:	4630      	mov	r0, r6
 80088e6:	f7ff ffda 	bl	800889e <__sfputc_r>
 80088ea:	1c43      	adds	r3, r0, #1
 80088ec:	d1f3      	bne.n	80088d6 <__sfputs_r+0xa>
 80088ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080088f0 <_vfiprintf_r>:
 80088f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f4:	460d      	mov	r5, r1
 80088f6:	b09d      	sub	sp, #116	@ 0x74
 80088f8:	4614      	mov	r4, r2
 80088fa:	4698      	mov	r8, r3
 80088fc:	4606      	mov	r6, r0
 80088fe:	b118      	cbz	r0, 8008908 <_vfiprintf_r+0x18>
 8008900:	6a03      	ldr	r3, [r0, #32]
 8008902:	b90b      	cbnz	r3, 8008908 <_vfiprintf_r+0x18>
 8008904:	f7fe f904 	bl	8006b10 <__sinit>
 8008908:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800890a:	07d9      	lsls	r1, r3, #31
 800890c:	d405      	bmi.n	800891a <_vfiprintf_r+0x2a>
 800890e:	89ab      	ldrh	r3, [r5, #12]
 8008910:	059a      	lsls	r2, r3, #22
 8008912:	d402      	bmi.n	800891a <_vfiprintf_r+0x2a>
 8008914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008916:	f7fe fa12 	bl	8006d3e <__retarget_lock_acquire_recursive>
 800891a:	89ab      	ldrh	r3, [r5, #12]
 800891c:	071b      	lsls	r3, r3, #28
 800891e:	d501      	bpl.n	8008924 <_vfiprintf_r+0x34>
 8008920:	692b      	ldr	r3, [r5, #16]
 8008922:	b99b      	cbnz	r3, 800894c <_vfiprintf_r+0x5c>
 8008924:	4629      	mov	r1, r5
 8008926:	4630      	mov	r0, r6
 8008928:	f000 f938 	bl	8008b9c <__swsetup_r>
 800892c:	b170      	cbz	r0, 800894c <_vfiprintf_r+0x5c>
 800892e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008930:	07dc      	lsls	r4, r3, #31
 8008932:	d504      	bpl.n	800893e <_vfiprintf_r+0x4e>
 8008934:	f04f 30ff 	mov.w	r0, #4294967295
 8008938:	b01d      	add	sp, #116	@ 0x74
 800893a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800893e:	89ab      	ldrh	r3, [r5, #12]
 8008940:	0598      	lsls	r0, r3, #22
 8008942:	d4f7      	bmi.n	8008934 <_vfiprintf_r+0x44>
 8008944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008946:	f7fe f9fb 	bl	8006d40 <__retarget_lock_release_recursive>
 800894a:	e7f3      	b.n	8008934 <_vfiprintf_r+0x44>
 800894c:	2300      	movs	r3, #0
 800894e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008950:	2320      	movs	r3, #32
 8008952:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008956:	f8cd 800c 	str.w	r8, [sp, #12]
 800895a:	2330      	movs	r3, #48	@ 0x30
 800895c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008b0c <_vfiprintf_r+0x21c>
 8008960:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008964:	f04f 0901 	mov.w	r9, #1
 8008968:	4623      	mov	r3, r4
 800896a:	469a      	mov	sl, r3
 800896c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008970:	b10a      	cbz	r2, 8008976 <_vfiprintf_r+0x86>
 8008972:	2a25      	cmp	r2, #37	@ 0x25
 8008974:	d1f9      	bne.n	800896a <_vfiprintf_r+0x7a>
 8008976:	ebba 0b04 	subs.w	fp, sl, r4
 800897a:	d00b      	beq.n	8008994 <_vfiprintf_r+0xa4>
 800897c:	465b      	mov	r3, fp
 800897e:	4622      	mov	r2, r4
 8008980:	4629      	mov	r1, r5
 8008982:	4630      	mov	r0, r6
 8008984:	f7ff ffa2 	bl	80088cc <__sfputs_r>
 8008988:	3001      	adds	r0, #1
 800898a:	f000 80a7 	beq.w	8008adc <_vfiprintf_r+0x1ec>
 800898e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008990:	445a      	add	r2, fp
 8008992:	9209      	str	r2, [sp, #36]	@ 0x24
 8008994:	f89a 3000 	ldrb.w	r3, [sl]
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 809f 	beq.w	8008adc <_vfiprintf_r+0x1ec>
 800899e:	2300      	movs	r3, #0
 80089a0:	f04f 32ff 	mov.w	r2, #4294967295
 80089a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089a8:	f10a 0a01 	add.w	sl, sl, #1
 80089ac:	9304      	str	r3, [sp, #16]
 80089ae:	9307      	str	r3, [sp, #28]
 80089b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80089b6:	4654      	mov	r4, sl
 80089b8:	2205      	movs	r2, #5
 80089ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089be:	4853      	ldr	r0, [pc, #332]	@ (8008b0c <_vfiprintf_r+0x21c>)
 80089c0:	f7f7 fc06 	bl	80001d0 <memchr>
 80089c4:	9a04      	ldr	r2, [sp, #16]
 80089c6:	b9d8      	cbnz	r0, 8008a00 <_vfiprintf_r+0x110>
 80089c8:	06d1      	lsls	r1, r2, #27
 80089ca:	bf44      	itt	mi
 80089cc:	2320      	movmi	r3, #32
 80089ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089d2:	0713      	lsls	r3, r2, #28
 80089d4:	bf44      	itt	mi
 80089d6:	232b      	movmi	r3, #43	@ 0x2b
 80089d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089dc:	f89a 3000 	ldrb.w	r3, [sl]
 80089e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80089e2:	d015      	beq.n	8008a10 <_vfiprintf_r+0x120>
 80089e4:	9a07      	ldr	r2, [sp, #28]
 80089e6:	4654      	mov	r4, sl
 80089e8:	2000      	movs	r0, #0
 80089ea:	f04f 0c0a 	mov.w	ip, #10
 80089ee:	4621      	mov	r1, r4
 80089f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089f4:	3b30      	subs	r3, #48	@ 0x30
 80089f6:	2b09      	cmp	r3, #9
 80089f8:	d94b      	bls.n	8008a92 <_vfiprintf_r+0x1a2>
 80089fa:	b1b0      	cbz	r0, 8008a2a <_vfiprintf_r+0x13a>
 80089fc:	9207      	str	r2, [sp, #28]
 80089fe:	e014      	b.n	8008a2a <_vfiprintf_r+0x13a>
 8008a00:	eba0 0308 	sub.w	r3, r0, r8
 8008a04:	fa09 f303 	lsl.w	r3, r9, r3
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	9304      	str	r3, [sp, #16]
 8008a0c:	46a2      	mov	sl, r4
 8008a0e:	e7d2      	b.n	80089b6 <_vfiprintf_r+0xc6>
 8008a10:	9b03      	ldr	r3, [sp, #12]
 8008a12:	1d19      	adds	r1, r3, #4
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	9103      	str	r1, [sp, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	bfbb      	ittet	lt
 8008a1c:	425b      	neglt	r3, r3
 8008a1e:	f042 0202 	orrlt.w	r2, r2, #2
 8008a22:	9307      	strge	r3, [sp, #28]
 8008a24:	9307      	strlt	r3, [sp, #28]
 8008a26:	bfb8      	it	lt
 8008a28:	9204      	strlt	r2, [sp, #16]
 8008a2a:	7823      	ldrb	r3, [r4, #0]
 8008a2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a2e:	d10a      	bne.n	8008a46 <_vfiprintf_r+0x156>
 8008a30:	7863      	ldrb	r3, [r4, #1]
 8008a32:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a34:	d132      	bne.n	8008a9c <_vfiprintf_r+0x1ac>
 8008a36:	9b03      	ldr	r3, [sp, #12]
 8008a38:	1d1a      	adds	r2, r3, #4
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	9203      	str	r2, [sp, #12]
 8008a3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a42:	3402      	adds	r4, #2
 8008a44:	9305      	str	r3, [sp, #20]
 8008a46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008b1c <_vfiprintf_r+0x22c>
 8008a4a:	7821      	ldrb	r1, [r4, #0]
 8008a4c:	2203      	movs	r2, #3
 8008a4e:	4650      	mov	r0, sl
 8008a50:	f7f7 fbbe 	bl	80001d0 <memchr>
 8008a54:	b138      	cbz	r0, 8008a66 <_vfiprintf_r+0x176>
 8008a56:	9b04      	ldr	r3, [sp, #16]
 8008a58:	eba0 000a 	sub.w	r0, r0, sl
 8008a5c:	2240      	movs	r2, #64	@ 0x40
 8008a5e:	4082      	lsls	r2, r0
 8008a60:	4313      	orrs	r3, r2
 8008a62:	3401      	adds	r4, #1
 8008a64:	9304      	str	r3, [sp, #16]
 8008a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a6a:	4829      	ldr	r0, [pc, #164]	@ (8008b10 <_vfiprintf_r+0x220>)
 8008a6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a70:	2206      	movs	r2, #6
 8008a72:	f7f7 fbad 	bl	80001d0 <memchr>
 8008a76:	2800      	cmp	r0, #0
 8008a78:	d03f      	beq.n	8008afa <_vfiprintf_r+0x20a>
 8008a7a:	4b26      	ldr	r3, [pc, #152]	@ (8008b14 <_vfiprintf_r+0x224>)
 8008a7c:	bb1b      	cbnz	r3, 8008ac6 <_vfiprintf_r+0x1d6>
 8008a7e:	9b03      	ldr	r3, [sp, #12]
 8008a80:	3307      	adds	r3, #7
 8008a82:	f023 0307 	bic.w	r3, r3, #7
 8008a86:	3308      	adds	r3, #8
 8008a88:	9303      	str	r3, [sp, #12]
 8008a8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a8c:	443b      	add	r3, r7
 8008a8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a90:	e76a      	b.n	8008968 <_vfiprintf_r+0x78>
 8008a92:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a96:	460c      	mov	r4, r1
 8008a98:	2001      	movs	r0, #1
 8008a9a:	e7a8      	b.n	80089ee <_vfiprintf_r+0xfe>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	3401      	adds	r4, #1
 8008aa0:	9305      	str	r3, [sp, #20]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	f04f 0c0a 	mov.w	ip, #10
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008aae:	3a30      	subs	r2, #48	@ 0x30
 8008ab0:	2a09      	cmp	r2, #9
 8008ab2:	d903      	bls.n	8008abc <_vfiprintf_r+0x1cc>
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d0c6      	beq.n	8008a46 <_vfiprintf_r+0x156>
 8008ab8:	9105      	str	r1, [sp, #20]
 8008aba:	e7c4      	b.n	8008a46 <_vfiprintf_r+0x156>
 8008abc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e7f0      	b.n	8008aa8 <_vfiprintf_r+0x1b8>
 8008ac6:	ab03      	add	r3, sp, #12
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	462a      	mov	r2, r5
 8008acc:	4b12      	ldr	r3, [pc, #72]	@ (8008b18 <_vfiprintf_r+0x228>)
 8008ace:	a904      	add	r1, sp, #16
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	f7fd fbd9 	bl	8006288 <_printf_float>
 8008ad6:	4607      	mov	r7, r0
 8008ad8:	1c78      	adds	r0, r7, #1
 8008ada:	d1d6      	bne.n	8008a8a <_vfiprintf_r+0x19a>
 8008adc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ade:	07d9      	lsls	r1, r3, #31
 8008ae0:	d405      	bmi.n	8008aee <_vfiprintf_r+0x1fe>
 8008ae2:	89ab      	ldrh	r3, [r5, #12]
 8008ae4:	059a      	lsls	r2, r3, #22
 8008ae6:	d402      	bmi.n	8008aee <_vfiprintf_r+0x1fe>
 8008ae8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008aea:	f7fe f929 	bl	8006d40 <__retarget_lock_release_recursive>
 8008aee:	89ab      	ldrh	r3, [r5, #12]
 8008af0:	065b      	lsls	r3, r3, #25
 8008af2:	f53f af1f 	bmi.w	8008934 <_vfiprintf_r+0x44>
 8008af6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008af8:	e71e      	b.n	8008938 <_vfiprintf_r+0x48>
 8008afa:	ab03      	add	r3, sp, #12
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	462a      	mov	r2, r5
 8008b00:	4b05      	ldr	r3, [pc, #20]	@ (8008b18 <_vfiprintf_r+0x228>)
 8008b02:	a904      	add	r1, sp, #16
 8008b04:	4630      	mov	r0, r6
 8008b06:	f7fd fe57 	bl	80067b8 <_printf_i>
 8008b0a:	e7e4      	b.n	8008ad6 <_vfiprintf_r+0x1e6>
 8008b0c:	0800a080 	.word	0x0800a080
 8008b10:	0800a08a 	.word	0x0800a08a
 8008b14:	08006289 	.word	0x08006289
 8008b18:	080088cd 	.word	0x080088cd
 8008b1c:	0800a086 	.word	0x0800a086

08008b20 <__swbuf_r>:
 8008b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b22:	460e      	mov	r6, r1
 8008b24:	4614      	mov	r4, r2
 8008b26:	4605      	mov	r5, r0
 8008b28:	b118      	cbz	r0, 8008b32 <__swbuf_r+0x12>
 8008b2a:	6a03      	ldr	r3, [r0, #32]
 8008b2c:	b90b      	cbnz	r3, 8008b32 <__swbuf_r+0x12>
 8008b2e:	f7fd ffef 	bl	8006b10 <__sinit>
 8008b32:	69a3      	ldr	r3, [r4, #24]
 8008b34:	60a3      	str	r3, [r4, #8]
 8008b36:	89a3      	ldrh	r3, [r4, #12]
 8008b38:	071a      	lsls	r2, r3, #28
 8008b3a:	d501      	bpl.n	8008b40 <__swbuf_r+0x20>
 8008b3c:	6923      	ldr	r3, [r4, #16]
 8008b3e:	b943      	cbnz	r3, 8008b52 <__swbuf_r+0x32>
 8008b40:	4621      	mov	r1, r4
 8008b42:	4628      	mov	r0, r5
 8008b44:	f000 f82a 	bl	8008b9c <__swsetup_r>
 8008b48:	b118      	cbz	r0, 8008b52 <__swbuf_r+0x32>
 8008b4a:	f04f 37ff 	mov.w	r7, #4294967295
 8008b4e:	4638      	mov	r0, r7
 8008b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	6922      	ldr	r2, [r4, #16]
 8008b56:	1a98      	subs	r0, r3, r2
 8008b58:	6963      	ldr	r3, [r4, #20]
 8008b5a:	b2f6      	uxtb	r6, r6
 8008b5c:	4283      	cmp	r3, r0
 8008b5e:	4637      	mov	r7, r6
 8008b60:	dc05      	bgt.n	8008b6e <__swbuf_r+0x4e>
 8008b62:	4621      	mov	r1, r4
 8008b64:	4628      	mov	r0, r5
 8008b66:	f7ff fd99 	bl	800869c <_fflush_r>
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	d1ed      	bne.n	8008b4a <__swbuf_r+0x2a>
 8008b6e:	68a3      	ldr	r3, [r4, #8]
 8008b70:	3b01      	subs	r3, #1
 8008b72:	60a3      	str	r3, [r4, #8]
 8008b74:	6823      	ldr	r3, [r4, #0]
 8008b76:	1c5a      	adds	r2, r3, #1
 8008b78:	6022      	str	r2, [r4, #0]
 8008b7a:	701e      	strb	r6, [r3, #0]
 8008b7c:	6962      	ldr	r2, [r4, #20]
 8008b7e:	1c43      	adds	r3, r0, #1
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d004      	beq.n	8008b8e <__swbuf_r+0x6e>
 8008b84:	89a3      	ldrh	r3, [r4, #12]
 8008b86:	07db      	lsls	r3, r3, #31
 8008b88:	d5e1      	bpl.n	8008b4e <__swbuf_r+0x2e>
 8008b8a:	2e0a      	cmp	r6, #10
 8008b8c:	d1df      	bne.n	8008b4e <__swbuf_r+0x2e>
 8008b8e:	4621      	mov	r1, r4
 8008b90:	4628      	mov	r0, r5
 8008b92:	f7ff fd83 	bl	800869c <_fflush_r>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d0d9      	beq.n	8008b4e <__swbuf_r+0x2e>
 8008b9a:	e7d6      	b.n	8008b4a <__swbuf_r+0x2a>

08008b9c <__swsetup_r>:
 8008b9c:	b538      	push	{r3, r4, r5, lr}
 8008b9e:	4b29      	ldr	r3, [pc, #164]	@ (8008c44 <__swsetup_r+0xa8>)
 8008ba0:	4605      	mov	r5, r0
 8008ba2:	6818      	ldr	r0, [r3, #0]
 8008ba4:	460c      	mov	r4, r1
 8008ba6:	b118      	cbz	r0, 8008bb0 <__swsetup_r+0x14>
 8008ba8:	6a03      	ldr	r3, [r0, #32]
 8008baa:	b90b      	cbnz	r3, 8008bb0 <__swsetup_r+0x14>
 8008bac:	f7fd ffb0 	bl	8006b10 <__sinit>
 8008bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bb4:	0719      	lsls	r1, r3, #28
 8008bb6:	d422      	bmi.n	8008bfe <__swsetup_r+0x62>
 8008bb8:	06da      	lsls	r2, r3, #27
 8008bba:	d407      	bmi.n	8008bcc <__swsetup_r+0x30>
 8008bbc:	2209      	movs	r2, #9
 8008bbe:	602a      	str	r2, [r5, #0]
 8008bc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bc4:	81a3      	strh	r3, [r4, #12]
 8008bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bca:	e033      	b.n	8008c34 <__swsetup_r+0x98>
 8008bcc:	0758      	lsls	r0, r3, #29
 8008bce:	d512      	bpl.n	8008bf6 <__swsetup_r+0x5a>
 8008bd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008bd2:	b141      	cbz	r1, 8008be6 <__swsetup_r+0x4a>
 8008bd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008bd8:	4299      	cmp	r1, r3
 8008bda:	d002      	beq.n	8008be2 <__swsetup_r+0x46>
 8008bdc:	4628      	mov	r0, r5
 8008bde:	f7fe feff 	bl	80079e0 <_free_r>
 8008be2:	2300      	movs	r3, #0
 8008be4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008be6:	89a3      	ldrh	r3, [r4, #12]
 8008be8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008bec:	81a3      	strh	r3, [r4, #12]
 8008bee:	2300      	movs	r3, #0
 8008bf0:	6063      	str	r3, [r4, #4]
 8008bf2:	6923      	ldr	r3, [r4, #16]
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	f043 0308 	orr.w	r3, r3, #8
 8008bfc:	81a3      	strh	r3, [r4, #12]
 8008bfe:	6923      	ldr	r3, [r4, #16]
 8008c00:	b94b      	cbnz	r3, 8008c16 <__swsetup_r+0x7a>
 8008c02:	89a3      	ldrh	r3, [r4, #12]
 8008c04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c0c:	d003      	beq.n	8008c16 <__swsetup_r+0x7a>
 8008c0e:	4621      	mov	r1, r4
 8008c10:	4628      	mov	r0, r5
 8008c12:	f000 f883 	bl	8008d1c <__smakebuf_r>
 8008c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c1a:	f013 0201 	ands.w	r2, r3, #1
 8008c1e:	d00a      	beq.n	8008c36 <__swsetup_r+0x9a>
 8008c20:	2200      	movs	r2, #0
 8008c22:	60a2      	str	r2, [r4, #8]
 8008c24:	6962      	ldr	r2, [r4, #20]
 8008c26:	4252      	negs	r2, r2
 8008c28:	61a2      	str	r2, [r4, #24]
 8008c2a:	6922      	ldr	r2, [r4, #16]
 8008c2c:	b942      	cbnz	r2, 8008c40 <__swsetup_r+0xa4>
 8008c2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008c32:	d1c5      	bne.n	8008bc0 <__swsetup_r+0x24>
 8008c34:	bd38      	pop	{r3, r4, r5, pc}
 8008c36:	0799      	lsls	r1, r3, #30
 8008c38:	bf58      	it	pl
 8008c3a:	6962      	ldrpl	r2, [r4, #20]
 8008c3c:	60a2      	str	r2, [r4, #8]
 8008c3e:	e7f4      	b.n	8008c2a <__swsetup_r+0x8e>
 8008c40:	2000      	movs	r0, #0
 8008c42:	e7f7      	b.n	8008c34 <__swsetup_r+0x98>
 8008c44:	2000001c 	.word	0x2000001c

08008c48 <_raise_r>:
 8008c48:	291f      	cmp	r1, #31
 8008c4a:	b538      	push	{r3, r4, r5, lr}
 8008c4c:	4605      	mov	r5, r0
 8008c4e:	460c      	mov	r4, r1
 8008c50:	d904      	bls.n	8008c5c <_raise_r+0x14>
 8008c52:	2316      	movs	r3, #22
 8008c54:	6003      	str	r3, [r0, #0]
 8008c56:	f04f 30ff 	mov.w	r0, #4294967295
 8008c5a:	bd38      	pop	{r3, r4, r5, pc}
 8008c5c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008c5e:	b112      	cbz	r2, 8008c66 <_raise_r+0x1e>
 8008c60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c64:	b94b      	cbnz	r3, 8008c7a <_raise_r+0x32>
 8008c66:	4628      	mov	r0, r5
 8008c68:	f000 f830 	bl	8008ccc <_getpid_r>
 8008c6c:	4622      	mov	r2, r4
 8008c6e:	4601      	mov	r1, r0
 8008c70:	4628      	mov	r0, r5
 8008c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c76:	f000 b817 	b.w	8008ca8 <_kill_r>
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d00a      	beq.n	8008c94 <_raise_r+0x4c>
 8008c7e:	1c59      	adds	r1, r3, #1
 8008c80:	d103      	bne.n	8008c8a <_raise_r+0x42>
 8008c82:	2316      	movs	r3, #22
 8008c84:	6003      	str	r3, [r0, #0]
 8008c86:	2001      	movs	r0, #1
 8008c88:	e7e7      	b.n	8008c5a <_raise_r+0x12>
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008c90:	4620      	mov	r0, r4
 8008c92:	4798      	blx	r3
 8008c94:	2000      	movs	r0, #0
 8008c96:	e7e0      	b.n	8008c5a <_raise_r+0x12>

08008c98 <raise>:
 8008c98:	4b02      	ldr	r3, [pc, #8]	@ (8008ca4 <raise+0xc>)
 8008c9a:	4601      	mov	r1, r0
 8008c9c:	6818      	ldr	r0, [r3, #0]
 8008c9e:	f7ff bfd3 	b.w	8008c48 <_raise_r>
 8008ca2:	bf00      	nop
 8008ca4:	2000001c 	.word	0x2000001c

08008ca8 <_kill_r>:
 8008ca8:	b538      	push	{r3, r4, r5, lr}
 8008caa:	4d07      	ldr	r5, [pc, #28]	@ (8008cc8 <_kill_r+0x20>)
 8008cac:	2300      	movs	r3, #0
 8008cae:	4604      	mov	r4, r0
 8008cb0:	4608      	mov	r0, r1
 8008cb2:	4611      	mov	r1, r2
 8008cb4:	602b      	str	r3, [r5, #0]
 8008cb6:	f7f9 f831 	bl	8001d1c <_kill>
 8008cba:	1c43      	adds	r3, r0, #1
 8008cbc:	d102      	bne.n	8008cc4 <_kill_r+0x1c>
 8008cbe:	682b      	ldr	r3, [r5, #0]
 8008cc0:	b103      	cbz	r3, 8008cc4 <_kill_r+0x1c>
 8008cc2:	6023      	str	r3, [r4, #0]
 8008cc4:	bd38      	pop	{r3, r4, r5, pc}
 8008cc6:	bf00      	nop
 8008cc8:	20000654 	.word	0x20000654

08008ccc <_getpid_r>:
 8008ccc:	f7f9 b81e 	b.w	8001d0c <_getpid>

08008cd0 <__swhatbuf_r>:
 8008cd0:	b570      	push	{r4, r5, r6, lr}
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd8:	2900      	cmp	r1, #0
 8008cda:	b096      	sub	sp, #88	@ 0x58
 8008cdc:	4615      	mov	r5, r2
 8008cde:	461e      	mov	r6, r3
 8008ce0:	da0d      	bge.n	8008cfe <__swhatbuf_r+0x2e>
 8008ce2:	89a3      	ldrh	r3, [r4, #12]
 8008ce4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ce8:	f04f 0100 	mov.w	r1, #0
 8008cec:	bf14      	ite	ne
 8008cee:	2340      	movne	r3, #64	@ 0x40
 8008cf0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	6031      	str	r1, [r6, #0]
 8008cf8:	602b      	str	r3, [r5, #0]
 8008cfa:	b016      	add	sp, #88	@ 0x58
 8008cfc:	bd70      	pop	{r4, r5, r6, pc}
 8008cfe:	466a      	mov	r2, sp
 8008d00:	f000 f848 	bl	8008d94 <_fstat_r>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	dbec      	blt.n	8008ce2 <__swhatbuf_r+0x12>
 8008d08:	9901      	ldr	r1, [sp, #4]
 8008d0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008d0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d12:	4259      	negs	r1, r3
 8008d14:	4159      	adcs	r1, r3
 8008d16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d1a:	e7eb      	b.n	8008cf4 <__swhatbuf_r+0x24>

08008d1c <__smakebuf_r>:
 8008d1c:	898b      	ldrh	r3, [r1, #12]
 8008d1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d20:	079d      	lsls	r5, r3, #30
 8008d22:	4606      	mov	r6, r0
 8008d24:	460c      	mov	r4, r1
 8008d26:	d507      	bpl.n	8008d38 <__smakebuf_r+0x1c>
 8008d28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d2c:	6023      	str	r3, [r4, #0]
 8008d2e:	6123      	str	r3, [r4, #16]
 8008d30:	2301      	movs	r3, #1
 8008d32:	6163      	str	r3, [r4, #20]
 8008d34:	b003      	add	sp, #12
 8008d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d38:	ab01      	add	r3, sp, #4
 8008d3a:	466a      	mov	r2, sp
 8008d3c:	f7ff ffc8 	bl	8008cd0 <__swhatbuf_r>
 8008d40:	9f00      	ldr	r7, [sp, #0]
 8008d42:	4605      	mov	r5, r0
 8008d44:	4639      	mov	r1, r7
 8008d46:	4630      	mov	r0, r6
 8008d48:	f7fe febe 	bl	8007ac8 <_malloc_r>
 8008d4c:	b948      	cbnz	r0, 8008d62 <__smakebuf_r+0x46>
 8008d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d52:	059a      	lsls	r2, r3, #22
 8008d54:	d4ee      	bmi.n	8008d34 <__smakebuf_r+0x18>
 8008d56:	f023 0303 	bic.w	r3, r3, #3
 8008d5a:	f043 0302 	orr.w	r3, r3, #2
 8008d5e:	81a3      	strh	r3, [r4, #12]
 8008d60:	e7e2      	b.n	8008d28 <__smakebuf_r+0xc>
 8008d62:	89a3      	ldrh	r3, [r4, #12]
 8008d64:	6020      	str	r0, [r4, #0]
 8008d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d6a:	81a3      	strh	r3, [r4, #12]
 8008d6c:	9b01      	ldr	r3, [sp, #4]
 8008d6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d72:	b15b      	cbz	r3, 8008d8c <__smakebuf_r+0x70>
 8008d74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d78:	4630      	mov	r0, r6
 8008d7a:	f000 f81d 	bl	8008db8 <_isatty_r>
 8008d7e:	b128      	cbz	r0, 8008d8c <__smakebuf_r+0x70>
 8008d80:	89a3      	ldrh	r3, [r4, #12]
 8008d82:	f023 0303 	bic.w	r3, r3, #3
 8008d86:	f043 0301 	orr.w	r3, r3, #1
 8008d8a:	81a3      	strh	r3, [r4, #12]
 8008d8c:	89a3      	ldrh	r3, [r4, #12]
 8008d8e:	431d      	orrs	r5, r3
 8008d90:	81a5      	strh	r5, [r4, #12]
 8008d92:	e7cf      	b.n	8008d34 <__smakebuf_r+0x18>

08008d94 <_fstat_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	4d07      	ldr	r5, [pc, #28]	@ (8008db4 <_fstat_r+0x20>)
 8008d98:	2300      	movs	r3, #0
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	4608      	mov	r0, r1
 8008d9e:	4611      	mov	r1, r2
 8008da0:	602b      	str	r3, [r5, #0]
 8008da2:	f7f9 f81b 	bl	8001ddc <_fstat>
 8008da6:	1c43      	adds	r3, r0, #1
 8008da8:	d102      	bne.n	8008db0 <_fstat_r+0x1c>
 8008daa:	682b      	ldr	r3, [r5, #0]
 8008dac:	b103      	cbz	r3, 8008db0 <_fstat_r+0x1c>
 8008dae:	6023      	str	r3, [r4, #0]
 8008db0:	bd38      	pop	{r3, r4, r5, pc}
 8008db2:	bf00      	nop
 8008db4:	20000654 	.word	0x20000654

08008db8 <_isatty_r>:
 8008db8:	b538      	push	{r3, r4, r5, lr}
 8008dba:	4d06      	ldr	r5, [pc, #24]	@ (8008dd4 <_isatty_r+0x1c>)
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	4608      	mov	r0, r1
 8008dc2:	602b      	str	r3, [r5, #0]
 8008dc4:	f7f9 f81a 	bl	8001dfc <_isatty>
 8008dc8:	1c43      	adds	r3, r0, #1
 8008dca:	d102      	bne.n	8008dd2 <_isatty_r+0x1a>
 8008dcc:	682b      	ldr	r3, [r5, #0]
 8008dce:	b103      	cbz	r3, 8008dd2 <_isatty_r+0x1a>
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	bd38      	pop	{r3, r4, r5, pc}
 8008dd4:	20000654 	.word	0x20000654

08008dd8 <atan2f>:
 8008dd8:	f000 ba58 	b.w	800928c <__ieee754_atan2f>

08008ddc <sqrtf>:
 8008ddc:	b508      	push	{r3, lr}
 8008dde:	ed2d 8b02 	vpush	{d8}
 8008de2:	eeb0 8a40 	vmov.f32	s16, s0
 8008de6:	f000 f8cd 	bl	8008f84 <__ieee754_sqrtf>
 8008dea:	eeb4 8a48 	vcmp.f32	s16, s16
 8008dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008df2:	d60c      	bvs.n	8008e0e <sqrtf+0x32>
 8008df4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8008e14 <sqrtf+0x38>
 8008df8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e00:	d505      	bpl.n	8008e0e <sqrtf+0x32>
 8008e02:	f7fd ff71 	bl	8006ce8 <__errno>
 8008e06:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008e0a:	2321      	movs	r3, #33	@ 0x21
 8008e0c:	6003      	str	r3, [r0, #0]
 8008e0e:	ecbd 8b02 	vpop	{d8}
 8008e12:	bd08      	pop	{r3, pc}
 8008e14:	00000000 	.word	0x00000000

08008e18 <cosf>:
 8008e18:	ee10 3a10 	vmov	r3, s0
 8008e1c:	b507      	push	{r0, r1, r2, lr}
 8008e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8008e98 <cosf+0x80>)
 8008e20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d806      	bhi.n	8008e36 <cosf+0x1e>
 8008e28:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8008e9c <cosf+0x84>
 8008e2c:	b003      	add	sp, #12
 8008e2e:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e32:	f000 b8ab 	b.w	8008f8c <__kernel_cosf>
 8008e36:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008e3a:	d304      	bcc.n	8008e46 <cosf+0x2e>
 8008e3c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008e40:	b003      	add	sp, #12
 8008e42:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e46:	4668      	mov	r0, sp
 8008e48:	f000 fac0 	bl	80093cc <__ieee754_rem_pio2f>
 8008e4c:	f000 0003 	and.w	r0, r0, #3
 8008e50:	2801      	cmp	r0, #1
 8008e52:	d009      	beq.n	8008e68 <cosf+0x50>
 8008e54:	2802      	cmp	r0, #2
 8008e56:	d010      	beq.n	8008e7a <cosf+0x62>
 8008e58:	b9b0      	cbnz	r0, 8008e88 <cosf+0x70>
 8008e5a:	eddd 0a01 	vldr	s1, [sp, #4]
 8008e5e:	ed9d 0a00 	vldr	s0, [sp]
 8008e62:	f000 f893 	bl	8008f8c <__kernel_cosf>
 8008e66:	e7eb      	b.n	8008e40 <cosf+0x28>
 8008e68:	eddd 0a01 	vldr	s1, [sp, #4]
 8008e6c:	ed9d 0a00 	vldr	s0, [sp]
 8008e70:	f000 f8e4 	bl	800903c <__kernel_sinf>
 8008e74:	eeb1 0a40 	vneg.f32	s0, s0
 8008e78:	e7e2      	b.n	8008e40 <cosf+0x28>
 8008e7a:	eddd 0a01 	vldr	s1, [sp, #4]
 8008e7e:	ed9d 0a00 	vldr	s0, [sp]
 8008e82:	f000 f883 	bl	8008f8c <__kernel_cosf>
 8008e86:	e7f5      	b.n	8008e74 <cosf+0x5c>
 8008e88:	eddd 0a01 	vldr	s1, [sp, #4]
 8008e8c:	ed9d 0a00 	vldr	s0, [sp]
 8008e90:	2001      	movs	r0, #1
 8008e92:	f000 f8d3 	bl	800903c <__kernel_sinf>
 8008e96:	e7d3      	b.n	8008e40 <cosf+0x28>
 8008e98:	3f490fd8 	.word	0x3f490fd8
 8008e9c:	00000000 	.word	0x00000000

08008ea0 <sinf>:
 8008ea0:	ee10 3a10 	vmov	r3, s0
 8008ea4:	b507      	push	{r0, r1, r2, lr}
 8008ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8008f24 <sinf+0x84>)
 8008ea8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d807      	bhi.n	8008ec0 <sinf+0x20>
 8008eb0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8008f28 <sinf+0x88>
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	b003      	add	sp, #12
 8008eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ebc:	f000 b8be 	b.w	800903c <__kernel_sinf>
 8008ec0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008ec4:	d304      	bcc.n	8008ed0 <sinf+0x30>
 8008ec6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008eca:	b003      	add	sp, #12
 8008ecc:	f85d fb04 	ldr.w	pc, [sp], #4
 8008ed0:	4668      	mov	r0, sp
 8008ed2:	f000 fa7b 	bl	80093cc <__ieee754_rem_pio2f>
 8008ed6:	f000 0003 	and.w	r0, r0, #3
 8008eda:	2801      	cmp	r0, #1
 8008edc:	d00a      	beq.n	8008ef4 <sinf+0x54>
 8008ede:	2802      	cmp	r0, #2
 8008ee0:	d00f      	beq.n	8008f02 <sinf+0x62>
 8008ee2:	b9c0      	cbnz	r0, 8008f16 <sinf+0x76>
 8008ee4:	eddd 0a01 	vldr	s1, [sp, #4]
 8008ee8:	ed9d 0a00 	vldr	s0, [sp]
 8008eec:	2001      	movs	r0, #1
 8008eee:	f000 f8a5 	bl	800903c <__kernel_sinf>
 8008ef2:	e7ea      	b.n	8008eca <sinf+0x2a>
 8008ef4:	eddd 0a01 	vldr	s1, [sp, #4]
 8008ef8:	ed9d 0a00 	vldr	s0, [sp]
 8008efc:	f000 f846 	bl	8008f8c <__kernel_cosf>
 8008f00:	e7e3      	b.n	8008eca <sinf+0x2a>
 8008f02:	eddd 0a01 	vldr	s1, [sp, #4]
 8008f06:	ed9d 0a00 	vldr	s0, [sp]
 8008f0a:	2001      	movs	r0, #1
 8008f0c:	f000 f896 	bl	800903c <__kernel_sinf>
 8008f10:	eeb1 0a40 	vneg.f32	s0, s0
 8008f14:	e7d9      	b.n	8008eca <sinf+0x2a>
 8008f16:	eddd 0a01 	vldr	s1, [sp, #4]
 8008f1a:	ed9d 0a00 	vldr	s0, [sp]
 8008f1e:	f000 f835 	bl	8008f8c <__kernel_cosf>
 8008f22:	e7f5      	b.n	8008f10 <sinf+0x70>
 8008f24:	3f490fd8 	.word	0x3f490fd8
 8008f28:	00000000 	.word	0x00000000

08008f2c <tanf>:
 8008f2c:	ee10 3a10 	vmov	r3, s0
 8008f30:	b507      	push	{r0, r1, r2, lr}
 8008f32:	4a12      	ldr	r2, [pc, #72]	@ (8008f7c <tanf+0x50>)
 8008f34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d807      	bhi.n	8008f4c <tanf+0x20>
 8008f3c:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8008f80 <tanf+0x54>
 8008f40:	2001      	movs	r0, #1
 8008f42:	b003      	add	sp, #12
 8008f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f48:	f000 b8c0 	b.w	80090cc <__kernel_tanf>
 8008f4c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008f50:	d304      	bcc.n	8008f5c <tanf+0x30>
 8008f52:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008f56:	b003      	add	sp, #12
 8008f58:	f85d fb04 	ldr.w	pc, [sp], #4
 8008f5c:	4668      	mov	r0, sp
 8008f5e:	f000 fa35 	bl	80093cc <__ieee754_rem_pio2f>
 8008f62:	0040      	lsls	r0, r0, #1
 8008f64:	f000 0002 	and.w	r0, r0, #2
 8008f68:	eddd 0a01 	vldr	s1, [sp, #4]
 8008f6c:	ed9d 0a00 	vldr	s0, [sp]
 8008f70:	f1c0 0001 	rsb	r0, r0, #1
 8008f74:	f000 f8aa 	bl	80090cc <__kernel_tanf>
 8008f78:	e7ed      	b.n	8008f56 <tanf+0x2a>
 8008f7a:	bf00      	nop
 8008f7c:	3f490fda 	.word	0x3f490fda
 8008f80:	00000000 	.word	0x00000000

08008f84 <__ieee754_sqrtf>:
 8008f84:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008f88:	4770      	bx	lr
	...

08008f8c <__kernel_cosf>:
 8008f8c:	ee10 3a10 	vmov	r3, s0
 8008f90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f94:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8008f98:	eef0 6a40 	vmov.f32	s13, s0
 8008f9c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008fa0:	d204      	bcs.n	8008fac <__kernel_cosf+0x20>
 8008fa2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8008fa6:	ee17 2a90 	vmov	r2, s15
 8008faa:	b342      	cbz	r2, 8008ffe <__kernel_cosf+0x72>
 8008fac:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8008fb0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800901c <__kernel_cosf+0x90>
 8008fb4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8009020 <__kernel_cosf+0x94>
 8008fb8:	4a1a      	ldr	r2, [pc, #104]	@ (8009024 <__kernel_cosf+0x98>)
 8008fba:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009028 <__kernel_cosf+0x9c>
 8008fc4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008fc8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800902c <__kernel_cosf+0xa0>
 8008fcc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008fd0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8009030 <__kernel_cosf+0xa4>
 8008fd4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008fd8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8009034 <__kernel_cosf+0xa8>
 8008fdc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008fe0:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8008fe4:	ee26 6a07 	vmul.f32	s12, s12, s14
 8008fe8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008fec:	eee7 0a06 	vfma.f32	s1, s14, s12
 8008ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ff4:	d804      	bhi.n	8009000 <__kernel_cosf+0x74>
 8008ff6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008ffa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008ffe:	4770      	bx	lr
 8009000:	4a0d      	ldr	r2, [pc, #52]	@ (8009038 <__kernel_cosf+0xac>)
 8009002:	4293      	cmp	r3, r2
 8009004:	bf9a      	itte	ls
 8009006:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800900a:	ee07 3a10 	vmovls	s14, r3
 800900e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8009012:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009016:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800901a:	e7ec      	b.n	8008ff6 <__kernel_cosf+0x6a>
 800901c:	ad47d74e 	.word	0xad47d74e
 8009020:	310f74f6 	.word	0x310f74f6
 8009024:	3e999999 	.word	0x3e999999
 8009028:	b493f27c 	.word	0xb493f27c
 800902c:	37d00d01 	.word	0x37d00d01
 8009030:	bab60b61 	.word	0xbab60b61
 8009034:	3d2aaaab 	.word	0x3d2aaaab
 8009038:	3f480000 	.word	0x3f480000

0800903c <__kernel_sinf>:
 800903c:	ee10 3a10 	vmov	r3, s0
 8009040:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009044:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8009048:	d204      	bcs.n	8009054 <__kernel_sinf+0x18>
 800904a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800904e:	ee17 3a90 	vmov	r3, s15
 8009052:	b35b      	cbz	r3, 80090ac <__kernel_sinf+0x70>
 8009054:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009058:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80090b0 <__kernel_sinf+0x74>
 800905c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80090b4 <__kernel_sinf+0x78>
 8009060:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009064:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80090b8 <__kernel_sinf+0x7c>
 8009068:	eee6 7a07 	vfma.f32	s15, s12, s14
 800906c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80090bc <__kernel_sinf+0x80>
 8009070:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009074:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80090c0 <__kernel_sinf+0x84>
 8009078:	ee60 6a07 	vmul.f32	s13, s0, s14
 800907c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009080:	b930      	cbnz	r0, 8009090 <__kernel_sinf+0x54>
 8009082:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80090c4 <__kernel_sinf+0x88>
 8009086:	eea7 6a27 	vfma.f32	s12, s14, s15
 800908a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800908e:	4770      	bx	lr
 8009090:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009094:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8009098:	eee0 7a86 	vfma.f32	s15, s1, s12
 800909c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80090a0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80090c8 <__kernel_sinf+0x8c>
 80090a4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80090a8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	2f2ec9d3 	.word	0x2f2ec9d3
 80090b4:	b2d72f34 	.word	0xb2d72f34
 80090b8:	3638ef1b 	.word	0x3638ef1b
 80090bc:	b9500d01 	.word	0xb9500d01
 80090c0:	3c088889 	.word	0x3c088889
 80090c4:	be2aaaab 	.word	0xbe2aaaab
 80090c8:	3e2aaaab 	.word	0x3e2aaaab

080090cc <__kernel_tanf>:
 80090cc:	b508      	push	{r3, lr}
 80090ce:	ee10 3a10 	vmov	r3, s0
 80090d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80090d6:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 80090da:	eef0 7a40 	vmov.f32	s15, s0
 80090de:	d217      	bcs.n	8009110 <__kernel_tanf+0x44>
 80090e0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80090e4:	ee17 1a10 	vmov	r1, s14
 80090e8:	bb41      	cbnz	r1, 800913c <__kernel_tanf+0x70>
 80090ea:	1c43      	adds	r3, r0, #1
 80090ec:	4313      	orrs	r3, r2
 80090ee:	d108      	bne.n	8009102 <__kernel_tanf+0x36>
 80090f0:	f000 fb70 	bl	80097d4 <fabsf>
 80090f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090f8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80090fc:	eeb0 0a67 	vmov.f32	s0, s15
 8009100:	bd08      	pop	{r3, pc}
 8009102:	2801      	cmp	r0, #1
 8009104:	d0fa      	beq.n	80090fc <__kernel_tanf+0x30>
 8009106:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800910a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800910e:	e7f5      	b.n	80090fc <__kernel_tanf+0x30>
 8009110:	494c      	ldr	r1, [pc, #304]	@ (8009244 <__kernel_tanf+0x178>)
 8009112:	428a      	cmp	r2, r1
 8009114:	d312      	bcc.n	800913c <__kernel_tanf+0x70>
 8009116:	2b00      	cmp	r3, #0
 8009118:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8009248 <__kernel_tanf+0x17c>
 800911c:	bfb8      	it	lt
 800911e:	eef1 7a40 	vneglt.f32	s15, s0
 8009122:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009126:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800924c <__kernel_tanf+0x180>
 800912a:	bfb8      	it	lt
 800912c:	eef1 0a60 	vneglt.f32	s1, s1
 8009130:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009134:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8009250 <__kernel_tanf+0x184>
 8009138:	ee77 7a87 	vadd.f32	s15, s15, s14
 800913c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8009140:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009254 <__kernel_tanf+0x188>
 8009144:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8009258 <__kernel_tanf+0x18c>
 8009148:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 800925c <__kernel_tanf+0x190>
 800914c:	493d      	ldr	r1, [pc, #244]	@ (8009244 <__kernel_tanf+0x178>)
 800914e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8009152:	428a      	cmp	r2, r1
 8009154:	eea7 6a25 	vfma.f32	s12, s14, s11
 8009158:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8009260 <__kernel_tanf+0x194>
 800915c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8009160:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8009264 <__kernel_tanf+0x198>
 8009164:	eea5 6a87 	vfma.f32	s12, s11, s14
 8009168:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009268 <__kernel_tanf+0x19c>
 800916c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8009170:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 800926c <__kernel_tanf+0x1a0>
 8009174:	eea5 6a87 	vfma.f32	s12, s11, s14
 8009178:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8009270 <__kernel_tanf+0x1a4>
 800917c:	eee7 5a05 	vfma.f32	s11, s14, s10
 8009180:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8009274 <__kernel_tanf+0x1a8>
 8009184:	eea5 5a87 	vfma.f32	s10, s11, s14
 8009188:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8009278 <__kernel_tanf+0x1ac>
 800918c:	eee5 5a07 	vfma.f32	s11, s10, s14
 8009190:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800927c <__kernel_tanf+0x1b0>
 8009194:	eea5 5a87 	vfma.f32	s10, s11, s14
 8009198:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8009280 <__kernel_tanf+0x1b4>
 800919c:	eee5 5a07 	vfma.f32	s11, s10, s14
 80091a0:	eeb0 7a46 	vmov.f32	s14, s12
 80091a4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80091a8:	ee27 5aa6 	vmul.f32	s10, s15, s13
 80091ac:	eeb0 6a60 	vmov.f32	s12, s1
 80091b0:	eea7 6a05 	vfma.f32	s12, s14, s10
 80091b4:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8009284 <__kernel_tanf+0x1b8>
 80091b8:	eee6 0a26 	vfma.f32	s1, s12, s13
 80091bc:	eee5 0a07 	vfma.f32	s1, s10, s14
 80091c0:	ee37 6aa0 	vadd.f32	s12, s15, s1
 80091c4:	d31d      	bcc.n	8009202 <__kernel_tanf+0x136>
 80091c6:	ee07 0a10 	vmov	s14, r0
 80091ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80091ce:	ee26 5a06 	vmul.f32	s10, s12, s12
 80091d2:	ee36 6a07 	vadd.f32	s12, s12, s14
 80091d6:	179b      	asrs	r3, r3, #30
 80091d8:	eec5 5a06 	vdiv.f32	s11, s10, s12
 80091dc:	f003 0302 	and.w	r3, r3, #2
 80091e0:	f1c3 0301 	rsb	r3, r3, #1
 80091e4:	ee06 3a90 	vmov	s13, r3
 80091e8:	ee35 6ae0 	vsub.f32	s12, s11, s1
 80091ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80091f0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80091f4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80091f8:	eea7 7ac6 	vfms.f32	s14, s15, s12
 80091fc:	ee66 7a87 	vmul.f32	s15, s13, s14
 8009200:	e77c      	b.n	80090fc <__kernel_tanf+0x30>
 8009202:	2801      	cmp	r0, #1
 8009204:	d01b      	beq.n	800923e <__kernel_tanf+0x172>
 8009206:	4b20      	ldr	r3, [pc, #128]	@ (8009288 <__kernel_tanf+0x1bc>)
 8009208:	ee16 2a10 	vmov	r2, s12
 800920c:	401a      	ands	r2, r3
 800920e:	ee05 2a90 	vmov	s11, r2
 8009212:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009216:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800921a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800921e:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8009222:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8009226:	ee16 2a90 	vmov	r2, s13
 800922a:	4013      	ands	r3, r2
 800922c:	ee07 3a90 	vmov	s15, r3
 8009230:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009234:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8009238:	eee7 7a26 	vfma.f32	s15, s14, s13
 800923c:	e75e      	b.n	80090fc <__kernel_tanf+0x30>
 800923e:	eef0 7a46 	vmov.f32	s15, s12
 8009242:	e75b      	b.n	80090fc <__kernel_tanf+0x30>
 8009244:	3f2ca140 	.word	0x3f2ca140
 8009248:	3f490fda 	.word	0x3f490fda
 800924c:	33222168 	.word	0x33222168
 8009250:	00000000 	.word	0x00000000
 8009254:	b79bae5f 	.word	0xb79bae5f
 8009258:	38a3f445 	.word	0x38a3f445
 800925c:	37d95384 	.word	0x37d95384
 8009260:	3a1a26c8 	.word	0x3a1a26c8
 8009264:	3b6b6916 	.word	0x3b6b6916
 8009268:	3cb327a4 	.word	0x3cb327a4
 800926c:	3e088889 	.word	0x3e088889
 8009270:	3895c07a 	.word	0x3895c07a
 8009274:	398137b9 	.word	0x398137b9
 8009278:	3abede48 	.word	0x3abede48
 800927c:	3c11371f 	.word	0x3c11371f
 8009280:	3d5d0dd1 	.word	0x3d5d0dd1
 8009284:	3eaaaaab 	.word	0x3eaaaaab
 8009288:	fffff000 	.word	0xfffff000

0800928c <__ieee754_atan2f>:
 800928c:	ee10 2a90 	vmov	r2, s1
 8009290:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8009294:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8009298:	b510      	push	{r4, lr}
 800929a:	eef0 7a40 	vmov.f32	s15, s0
 800929e:	d806      	bhi.n	80092ae <__ieee754_atan2f+0x22>
 80092a0:	ee10 0a10 	vmov	r0, s0
 80092a4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80092a8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80092ac:	d904      	bls.n	80092b8 <__ieee754_atan2f+0x2c>
 80092ae:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80092b2:	eeb0 0a67 	vmov.f32	s0, s15
 80092b6:	bd10      	pop	{r4, pc}
 80092b8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80092bc:	d103      	bne.n	80092c6 <__ieee754_atan2f+0x3a>
 80092be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092c2:	f000 b9b3 	b.w	800962c <atanf>
 80092c6:	1794      	asrs	r4, r2, #30
 80092c8:	f004 0402 	and.w	r4, r4, #2
 80092cc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80092d0:	b943      	cbnz	r3, 80092e4 <__ieee754_atan2f+0x58>
 80092d2:	2c02      	cmp	r4, #2
 80092d4:	d05e      	beq.n	8009394 <__ieee754_atan2f+0x108>
 80092d6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80093a8 <__ieee754_atan2f+0x11c>
 80092da:	2c03      	cmp	r4, #3
 80092dc:	bf08      	it	eq
 80092de:	eef0 7a47 	vmoveq.f32	s15, s14
 80092e2:	e7e6      	b.n	80092b2 <__ieee754_atan2f+0x26>
 80092e4:	b941      	cbnz	r1, 80092f8 <__ieee754_atan2f+0x6c>
 80092e6:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80093ac <__ieee754_atan2f+0x120>
 80092ea:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80093b0 <__ieee754_atan2f+0x124>
 80092ee:	2800      	cmp	r0, #0
 80092f0:	bfb8      	it	lt
 80092f2:	eef0 7a47 	vmovlt.f32	s15, s14
 80092f6:	e7dc      	b.n	80092b2 <__ieee754_atan2f+0x26>
 80092f8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80092fc:	d110      	bne.n	8009320 <__ieee754_atan2f+0x94>
 80092fe:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009302:	f104 34ff 	add.w	r4, r4, #4294967295
 8009306:	d107      	bne.n	8009318 <__ieee754_atan2f+0x8c>
 8009308:	2c02      	cmp	r4, #2
 800930a:	d846      	bhi.n	800939a <__ieee754_atan2f+0x10e>
 800930c:	4b29      	ldr	r3, [pc, #164]	@ (80093b4 <__ieee754_atan2f+0x128>)
 800930e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009312:	edd3 7a00 	vldr	s15, [r3]
 8009316:	e7cc      	b.n	80092b2 <__ieee754_atan2f+0x26>
 8009318:	2c02      	cmp	r4, #2
 800931a:	d841      	bhi.n	80093a0 <__ieee754_atan2f+0x114>
 800931c:	4b26      	ldr	r3, [pc, #152]	@ (80093b8 <__ieee754_atan2f+0x12c>)
 800931e:	e7f6      	b.n	800930e <__ieee754_atan2f+0x82>
 8009320:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009324:	d0df      	beq.n	80092e6 <__ieee754_atan2f+0x5a>
 8009326:	1a5b      	subs	r3, r3, r1
 8009328:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800932c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8009330:	da1a      	bge.n	8009368 <__ieee754_atan2f+0xdc>
 8009332:	2a00      	cmp	r2, #0
 8009334:	da01      	bge.n	800933a <__ieee754_atan2f+0xae>
 8009336:	313c      	adds	r1, #60	@ 0x3c
 8009338:	db19      	blt.n	800936e <__ieee754_atan2f+0xe2>
 800933a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800933e:	f000 fa49 	bl	80097d4 <fabsf>
 8009342:	f000 f973 	bl	800962c <atanf>
 8009346:	eef0 7a40 	vmov.f32	s15, s0
 800934a:	2c01      	cmp	r4, #1
 800934c:	d012      	beq.n	8009374 <__ieee754_atan2f+0xe8>
 800934e:	2c02      	cmp	r4, #2
 8009350:	d017      	beq.n	8009382 <__ieee754_atan2f+0xf6>
 8009352:	2c00      	cmp	r4, #0
 8009354:	d0ad      	beq.n	80092b2 <__ieee754_atan2f+0x26>
 8009356:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80093bc <__ieee754_atan2f+0x130>
 800935a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800935e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80093c0 <__ieee754_atan2f+0x134>
 8009362:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009366:	e7a4      	b.n	80092b2 <__ieee754_atan2f+0x26>
 8009368:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80093ac <__ieee754_atan2f+0x120>
 800936c:	e7ed      	b.n	800934a <__ieee754_atan2f+0xbe>
 800936e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80093c4 <__ieee754_atan2f+0x138>
 8009372:	e7ea      	b.n	800934a <__ieee754_atan2f+0xbe>
 8009374:	ee17 3a90 	vmov	r3, s15
 8009378:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800937c:	ee07 3a90 	vmov	s15, r3
 8009380:	e797      	b.n	80092b2 <__ieee754_atan2f+0x26>
 8009382:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80093bc <__ieee754_atan2f+0x130>
 8009386:	ee77 7a87 	vadd.f32	s15, s15, s14
 800938a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80093c0 <__ieee754_atan2f+0x134>
 800938e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009392:	e78e      	b.n	80092b2 <__ieee754_atan2f+0x26>
 8009394:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80093c0 <__ieee754_atan2f+0x134>
 8009398:	e78b      	b.n	80092b2 <__ieee754_atan2f+0x26>
 800939a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80093c8 <__ieee754_atan2f+0x13c>
 800939e:	e788      	b.n	80092b2 <__ieee754_atan2f+0x26>
 80093a0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80093c4 <__ieee754_atan2f+0x138>
 80093a4:	e785      	b.n	80092b2 <__ieee754_atan2f+0x26>
 80093a6:	bf00      	nop
 80093a8:	c0490fdb 	.word	0xc0490fdb
 80093ac:	3fc90fdb 	.word	0x3fc90fdb
 80093b0:	bfc90fdb 	.word	0xbfc90fdb
 80093b4:	0800a1e4 	.word	0x0800a1e4
 80093b8:	0800a1d8 	.word	0x0800a1d8
 80093bc:	33bbbd2e 	.word	0x33bbbd2e
 80093c0:	40490fdb 	.word	0x40490fdb
 80093c4:	00000000 	.word	0x00000000
 80093c8:	3f490fdb 	.word	0x3f490fdb

080093cc <__ieee754_rem_pio2f>:
 80093cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ce:	ee10 6a10 	vmov	r6, s0
 80093d2:	4b88      	ldr	r3, [pc, #544]	@ (80095f4 <__ieee754_rem_pio2f+0x228>)
 80093d4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80093d8:	429d      	cmp	r5, r3
 80093da:	b087      	sub	sp, #28
 80093dc:	4604      	mov	r4, r0
 80093de:	d805      	bhi.n	80093ec <__ieee754_rem_pio2f+0x20>
 80093e0:	2300      	movs	r3, #0
 80093e2:	ed80 0a00 	vstr	s0, [r0]
 80093e6:	6043      	str	r3, [r0, #4]
 80093e8:	2000      	movs	r0, #0
 80093ea:	e022      	b.n	8009432 <__ieee754_rem_pio2f+0x66>
 80093ec:	4b82      	ldr	r3, [pc, #520]	@ (80095f8 <__ieee754_rem_pio2f+0x22c>)
 80093ee:	429d      	cmp	r5, r3
 80093f0:	d83a      	bhi.n	8009468 <__ieee754_rem_pio2f+0x9c>
 80093f2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80093f6:	2e00      	cmp	r6, #0
 80093f8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80095fc <__ieee754_rem_pio2f+0x230>
 80093fc:	4a80      	ldr	r2, [pc, #512]	@ (8009600 <__ieee754_rem_pio2f+0x234>)
 80093fe:	f023 030f 	bic.w	r3, r3, #15
 8009402:	dd18      	ble.n	8009436 <__ieee754_rem_pio2f+0x6a>
 8009404:	4293      	cmp	r3, r2
 8009406:	ee70 7a47 	vsub.f32	s15, s0, s14
 800940a:	bf09      	itett	eq
 800940c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8009604 <__ieee754_rem_pio2f+0x238>
 8009410:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8009608 <__ieee754_rem_pio2f+0x23c>
 8009414:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800960c <__ieee754_rem_pio2f+0x240>
 8009418:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800941c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8009420:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009424:	ed80 7a00 	vstr	s14, [r0]
 8009428:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800942c:	edc0 7a01 	vstr	s15, [r0, #4]
 8009430:	2001      	movs	r0, #1
 8009432:	b007      	add	sp, #28
 8009434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009436:	4293      	cmp	r3, r2
 8009438:	ee70 7a07 	vadd.f32	s15, s0, s14
 800943c:	bf09      	itett	eq
 800943e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8009604 <__ieee754_rem_pio2f+0x238>
 8009442:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8009608 <__ieee754_rem_pio2f+0x23c>
 8009446:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800960c <__ieee754_rem_pio2f+0x240>
 800944a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800944e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009452:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009456:	ed80 7a00 	vstr	s14, [r0]
 800945a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800945e:	edc0 7a01 	vstr	s15, [r0, #4]
 8009462:	f04f 30ff 	mov.w	r0, #4294967295
 8009466:	e7e4      	b.n	8009432 <__ieee754_rem_pio2f+0x66>
 8009468:	4b69      	ldr	r3, [pc, #420]	@ (8009610 <__ieee754_rem_pio2f+0x244>)
 800946a:	429d      	cmp	r5, r3
 800946c:	d873      	bhi.n	8009556 <__ieee754_rem_pio2f+0x18a>
 800946e:	f000 f9b1 	bl	80097d4 <fabsf>
 8009472:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8009614 <__ieee754_rem_pio2f+0x248>
 8009476:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800947a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800947e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009482:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009486:	ee17 0a90 	vmov	r0, s15
 800948a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80095fc <__ieee754_rem_pio2f+0x230>
 800948e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8009492:	281f      	cmp	r0, #31
 8009494:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009608 <__ieee754_rem_pio2f+0x23c>
 8009498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800949c:	eeb1 6a47 	vneg.f32	s12, s14
 80094a0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80094a4:	ee16 1a90 	vmov	r1, s13
 80094a8:	dc09      	bgt.n	80094be <__ieee754_rem_pio2f+0xf2>
 80094aa:	4a5b      	ldr	r2, [pc, #364]	@ (8009618 <__ieee754_rem_pio2f+0x24c>)
 80094ac:	1e47      	subs	r7, r0, #1
 80094ae:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80094b2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80094b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d107      	bne.n	80094ce <__ieee754_rem_pio2f+0x102>
 80094be:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80094c2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80094c6:	2a08      	cmp	r2, #8
 80094c8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80094cc:	dc14      	bgt.n	80094f8 <__ieee754_rem_pio2f+0x12c>
 80094ce:	6021      	str	r1, [r4, #0]
 80094d0:	ed94 7a00 	vldr	s14, [r4]
 80094d4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80094d8:	2e00      	cmp	r6, #0
 80094da:	ee30 0a67 	vsub.f32	s0, s0, s15
 80094de:	ed84 0a01 	vstr	s0, [r4, #4]
 80094e2:	daa6      	bge.n	8009432 <__ieee754_rem_pio2f+0x66>
 80094e4:	eeb1 7a47 	vneg.f32	s14, s14
 80094e8:	eeb1 0a40 	vneg.f32	s0, s0
 80094ec:	ed84 7a00 	vstr	s14, [r4]
 80094f0:	ed84 0a01 	vstr	s0, [r4, #4]
 80094f4:	4240      	negs	r0, r0
 80094f6:	e79c      	b.n	8009432 <__ieee754_rem_pio2f+0x66>
 80094f8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8009604 <__ieee754_rem_pio2f+0x238>
 80094fc:	eef0 6a40 	vmov.f32	s13, s0
 8009500:	eee6 6a25 	vfma.f32	s13, s12, s11
 8009504:	ee70 7a66 	vsub.f32	s15, s0, s13
 8009508:	eee6 7a25 	vfma.f32	s15, s12, s11
 800950c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800960c <__ieee754_rem_pio2f+0x240>
 8009510:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8009514:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8009518:	ee15 2a90 	vmov	r2, s11
 800951c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009520:	1a5b      	subs	r3, r3, r1
 8009522:	2b19      	cmp	r3, #25
 8009524:	dc04      	bgt.n	8009530 <__ieee754_rem_pio2f+0x164>
 8009526:	edc4 5a00 	vstr	s11, [r4]
 800952a:	eeb0 0a66 	vmov.f32	s0, s13
 800952e:	e7cf      	b.n	80094d0 <__ieee754_rem_pio2f+0x104>
 8009530:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800961c <__ieee754_rem_pio2f+0x250>
 8009534:	eeb0 0a66 	vmov.f32	s0, s13
 8009538:	eea6 0a25 	vfma.f32	s0, s12, s11
 800953c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009540:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8009620 <__ieee754_rem_pio2f+0x254>
 8009544:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009548:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800954c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009550:	ed84 7a00 	vstr	s14, [r4]
 8009554:	e7bc      	b.n	80094d0 <__ieee754_rem_pio2f+0x104>
 8009556:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800955a:	d306      	bcc.n	800956a <__ieee754_rem_pio2f+0x19e>
 800955c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009560:	edc0 7a01 	vstr	s15, [r0, #4]
 8009564:	edc0 7a00 	vstr	s15, [r0]
 8009568:	e73e      	b.n	80093e8 <__ieee754_rem_pio2f+0x1c>
 800956a:	15ea      	asrs	r2, r5, #23
 800956c:	3a86      	subs	r2, #134	@ 0x86
 800956e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8009572:	ee07 3a90 	vmov	s15, r3
 8009576:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800957a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8009624 <__ieee754_rem_pio2f+0x258>
 800957e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009582:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009586:	ed8d 7a03 	vstr	s14, [sp, #12]
 800958a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800958e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009592:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009596:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800959a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800959e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80095a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80095a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095aa:	edcd 7a05 	vstr	s15, [sp, #20]
 80095ae:	d11e      	bne.n	80095ee <__ieee754_rem_pio2f+0x222>
 80095b0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80095b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b8:	bf0c      	ite	eq
 80095ba:	2301      	moveq	r3, #1
 80095bc:	2302      	movne	r3, #2
 80095be:	491a      	ldr	r1, [pc, #104]	@ (8009628 <__ieee754_rem_pio2f+0x25c>)
 80095c0:	9101      	str	r1, [sp, #4]
 80095c2:	2102      	movs	r1, #2
 80095c4:	9100      	str	r1, [sp, #0]
 80095c6:	a803      	add	r0, sp, #12
 80095c8:	4621      	mov	r1, r4
 80095ca:	f000 f90b 	bl	80097e4 <__kernel_rem_pio2f>
 80095ce:	2e00      	cmp	r6, #0
 80095d0:	f6bf af2f 	bge.w	8009432 <__ieee754_rem_pio2f+0x66>
 80095d4:	edd4 7a00 	vldr	s15, [r4]
 80095d8:	eef1 7a67 	vneg.f32	s15, s15
 80095dc:	edc4 7a00 	vstr	s15, [r4]
 80095e0:	edd4 7a01 	vldr	s15, [r4, #4]
 80095e4:	eef1 7a67 	vneg.f32	s15, s15
 80095e8:	edc4 7a01 	vstr	s15, [r4, #4]
 80095ec:	e782      	b.n	80094f4 <__ieee754_rem_pio2f+0x128>
 80095ee:	2303      	movs	r3, #3
 80095f0:	e7e5      	b.n	80095be <__ieee754_rem_pio2f+0x1f2>
 80095f2:	bf00      	nop
 80095f4:	3f490fd8 	.word	0x3f490fd8
 80095f8:	4016cbe3 	.word	0x4016cbe3
 80095fc:	3fc90f80 	.word	0x3fc90f80
 8009600:	3fc90fd0 	.word	0x3fc90fd0
 8009604:	37354400 	.word	0x37354400
 8009608:	37354443 	.word	0x37354443
 800960c:	2e85a308 	.word	0x2e85a308
 8009610:	43490f80 	.word	0x43490f80
 8009614:	3f22f984 	.word	0x3f22f984
 8009618:	0800a1f0 	.word	0x0800a1f0
 800961c:	2e85a300 	.word	0x2e85a300
 8009620:	248d3132 	.word	0x248d3132
 8009624:	43800000 	.word	0x43800000
 8009628:	0800a270 	.word	0x0800a270

0800962c <atanf>:
 800962c:	b538      	push	{r3, r4, r5, lr}
 800962e:	ee10 5a10 	vmov	r5, s0
 8009632:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8009636:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800963a:	eef0 7a40 	vmov.f32	s15, s0
 800963e:	d310      	bcc.n	8009662 <atanf+0x36>
 8009640:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8009644:	d904      	bls.n	8009650 <atanf+0x24>
 8009646:	ee70 7a00 	vadd.f32	s15, s0, s0
 800964a:	eeb0 0a67 	vmov.f32	s0, s15
 800964e:	bd38      	pop	{r3, r4, r5, pc}
 8009650:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8009788 <atanf+0x15c>
 8009654:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800978c <atanf+0x160>
 8009658:	2d00      	cmp	r5, #0
 800965a:	bfc8      	it	gt
 800965c:	eef0 7a47 	vmovgt.f32	s15, s14
 8009660:	e7f3      	b.n	800964a <atanf+0x1e>
 8009662:	4b4b      	ldr	r3, [pc, #300]	@ (8009790 <atanf+0x164>)
 8009664:	429c      	cmp	r4, r3
 8009666:	d810      	bhi.n	800968a <atanf+0x5e>
 8009668:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800966c:	d20a      	bcs.n	8009684 <atanf+0x58>
 800966e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8009794 <atanf+0x168>
 8009672:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800967a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800967e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009682:	dce2      	bgt.n	800964a <atanf+0x1e>
 8009684:	f04f 33ff 	mov.w	r3, #4294967295
 8009688:	e013      	b.n	80096b2 <atanf+0x86>
 800968a:	f000 f8a3 	bl	80097d4 <fabsf>
 800968e:	4b42      	ldr	r3, [pc, #264]	@ (8009798 <atanf+0x16c>)
 8009690:	429c      	cmp	r4, r3
 8009692:	d84f      	bhi.n	8009734 <atanf+0x108>
 8009694:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8009698:	429c      	cmp	r4, r3
 800969a:	d841      	bhi.n	8009720 <atanf+0xf4>
 800969c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80096a0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80096a4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80096a8:	2300      	movs	r3, #0
 80096aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80096ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80096b2:	1c5a      	adds	r2, r3, #1
 80096b4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80096b8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800979c <atanf+0x170>
 80096bc:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80097a0 <atanf+0x174>
 80096c0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80097a4 <atanf+0x178>
 80096c4:	ee66 6a06 	vmul.f32	s13, s12, s12
 80096c8:	eee6 5a87 	vfma.f32	s11, s13, s14
 80096cc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80097a8 <atanf+0x17c>
 80096d0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80096d4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80097ac <atanf+0x180>
 80096d8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80096dc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80097b0 <atanf+0x184>
 80096e0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80096e4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80097b4 <atanf+0x188>
 80096e8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80096ec:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80097b8 <atanf+0x18c>
 80096f0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80096f4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80097bc <atanf+0x190>
 80096f8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80096fc:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80097c0 <atanf+0x194>
 8009700:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009704:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80097c4 <atanf+0x198>
 8009708:	eea5 7a26 	vfma.f32	s14, s10, s13
 800970c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009710:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009714:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009718:	d121      	bne.n	800975e <atanf+0x132>
 800971a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800971e:	e794      	b.n	800964a <atanf+0x1e>
 8009720:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009724:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009728:	ee30 0a27 	vadd.f32	s0, s0, s15
 800972c:	2301      	movs	r3, #1
 800972e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009732:	e7be      	b.n	80096b2 <atanf+0x86>
 8009734:	4b24      	ldr	r3, [pc, #144]	@ (80097c8 <atanf+0x19c>)
 8009736:	429c      	cmp	r4, r3
 8009738:	d80b      	bhi.n	8009752 <atanf+0x126>
 800973a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800973e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009742:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009746:	2302      	movs	r3, #2
 8009748:	ee70 6a67 	vsub.f32	s13, s0, s15
 800974c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009750:	e7af      	b.n	80096b2 <atanf+0x86>
 8009752:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8009756:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800975a:	2303      	movs	r3, #3
 800975c:	e7a9      	b.n	80096b2 <atanf+0x86>
 800975e:	4a1b      	ldr	r2, [pc, #108]	@ (80097cc <atanf+0x1a0>)
 8009760:	491b      	ldr	r1, [pc, #108]	@ (80097d0 <atanf+0x1a4>)
 8009762:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009766:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800976a:	edd3 6a00 	vldr	s13, [r3]
 800976e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009772:	2d00      	cmp	r5, #0
 8009774:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009778:	edd2 7a00 	vldr	s15, [r2]
 800977c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009780:	bfb8      	it	lt
 8009782:	eef1 7a67 	vneglt.f32	s15, s15
 8009786:	e760      	b.n	800964a <atanf+0x1e>
 8009788:	bfc90fdb 	.word	0xbfc90fdb
 800978c:	3fc90fdb 	.word	0x3fc90fdb
 8009790:	3edfffff 	.word	0x3edfffff
 8009794:	7149f2ca 	.word	0x7149f2ca
 8009798:	3f97ffff 	.word	0x3f97ffff
 800979c:	3c8569d7 	.word	0x3c8569d7
 80097a0:	3d4bda59 	.word	0x3d4bda59
 80097a4:	bd6ef16b 	.word	0xbd6ef16b
 80097a8:	3d886b35 	.word	0x3d886b35
 80097ac:	3dba2e6e 	.word	0x3dba2e6e
 80097b0:	3e124925 	.word	0x3e124925
 80097b4:	3eaaaaab 	.word	0x3eaaaaab
 80097b8:	bd15a221 	.word	0xbd15a221
 80097bc:	bd9d8795 	.word	0xbd9d8795
 80097c0:	bde38e38 	.word	0xbde38e38
 80097c4:	be4ccccd 	.word	0xbe4ccccd
 80097c8:	401bffff 	.word	0x401bffff
 80097cc:	0800a598 	.word	0x0800a598
 80097d0:	0800a588 	.word	0x0800a588

080097d4 <fabsf>:
 80097d4:	ee10 3a10 	vmov	r3, s0
 80097d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80097dc:	ee00 3a10 	vmov	s0, r3
 80097e0:	4770      	bx	lr
	...

080097e4 <__kernel_rem_pio2f>:
 80097e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e8:	ed2d 8b04 	vpush	{d8-d9}
 80097ec:	b0d9      	sub	sp, #356	@ 0x164
 80097ee:	4690      	mov	r8, r2
 80097f0:	9001      	str	r0, [sp, #4]
 80097f2:	4ab9      	ldr	r2, [pc, #740]	@ (8009ad8 <__kernel_rem_pio2f+0x2f4>)
 80097f4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80097f6:	f118 0f04 	cmn.w	r8, #4
 80097fa:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80097fe:	460f      	mov	r7, r1
 8009800:	f103 3bff 	add.w	fp, r3, #4294967295
 8009804:	db27      	blt.n	8009856 <__kernel_rem_pio2f+0x72>
 8009806:	f1b8 0203 	subs.w	r2, r8, #3
 800980a:	bf48      	it	mi
 800980c:	f108 0204 	addmi.w	r2, r8, #4
 8009810:	10d2      	asrs	r2, r2, #3
 8009812:	1c55      	adds	r5, r2, #1
 8009814:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8009816:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8009ae8 <__kernel_rem_pio2f+0x304>
 800981a:	00e8      	lsls	r0, r5, #3
 800981c:	eba2 060b 	sub.w	r6, r2, fp
 8009820:	9002      	str	r0, [sp, #8]
 8009822:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8009826:	eb0a 0c0b 	add.w	ip, sl, fp
 800982a:	ac1c      	add	r4, sp, #112	@ 0x70
 800982c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8009830:	2000      	movs	r0, #0
 8009832:	4560      	cmp	r0, ip
 8009834:	dd11      	ble.n	800985a <__kernel_rem_pio2f+0x76>
 8009836:	a91c      	add	r1, sp, #112	@ 0x70
 8009838:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800983c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8009840:	f04f 0c00 	mov.w	ip, #0
 8009844:	45d4      	cmp	ip, sl
 8009846:	dc27      	bgt.n	8009898 <__kernel_rem_pio2f+0xb4>
 8009848:	f8dd e004 	ldr.w	lr, [sp, #4]
 800984c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8009ae8 <__kernel_rem_pio2f+0x304>
 8009850:	4606      	mov	r6, r0
 8009852:	2400      	movs	r4, #0
 8009854:	e016      	b.n	8009884 <__kernel_rem_pio2f+0xa0>
 8009856:	2200      	movs	r2, #0
 8009858:	e7db      	b.n	8009812 <__kernel_rem_pio2f+0x2e>
 800985a:	42c6      	cmn	r6, r0
 800985c:	bf5d      	ittte	pl
 800985e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8009862:	ee07 1a90 	vmovpl	s15, r1
 8009866:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800986a:	eef0 7a47 	vmovmi.f32	s15, s14
 800986e:	ece4 7a01 	vstmia	r4!, {s15}
 8009872:	3001      	adds	r0, #1
 8009874:	e7dd      	b.n	8009832 <__kernel_rem_pio2f+0x4e>
 8009876:	ecfe 6a01 	vldmia	lr!, {s13}
 800987a:	ed96 7a00 	vldr	s14, [r6]
 800987e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009882:	3401      	adds	r4, #1
 8009884:	455c      	cmp	r4, fp
 8009886:	f1a6 0604 	sub.w	r6, r6, #4
 800988a:	ddf4      	ble.n	8009876 <__kernel_rem_pio2f+0x92>
 800988c:	ece9 7a01 	vstmia	r9!, {s15}
 8009890:	f10c 0c01 	add.w	ip, ip, #1
 8009894:	3004      	adds	r0, #4
 8009896:	e7d5      	b.n	8009844 <__kernel_rem_pio2f+0x60>
 8009898:	a908      	add	r1, sp, #32
 800989a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800989e:	9104      	str	r1, [sp, #16]
 80098a0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80098a2:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8009ae4 <__kernel_rem_pio2f+0x300>
 80098a6:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8009ae0 <__kernel_rem_pio2f+0x2fc>
 80098aa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80098ae:	9203      	str	r2, [sp, #12]
 80098b0:	4654      	mov	r4, sl
 80098b2:	00a2      	lsls	r2, r4, #2
 80098b4:	9205      	str	r2, [sp, #20]
 80098b6:	aa58      	add	r2, sp, #352	@ 0x160
 80098b8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80098bc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80098c0:	a944      	add	r1, sp, #272	@ 0x110
 80098c2:	aa08      	add	r2, sp, #32
 80098c4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80098c8:	4694      	mov	ip, r2
 80098ca:	4626      	mov	r6, r4
 80098cc:	2e00      	cmp	r6, #0
 80098ce:	f1a0 0004 	sub.w	r0, r0, #4
 80098d2:	dc4c      	bgt.n	800996e <__kernel_rem_pio2f+0x18a>
 80098d4:	4628      	mov	r0, r5
 80098d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80098da:	f000 f9f5 	bl	8009cc8 <scalbnf>
 80098de:	eeb0 8a40 	vmov.f32	s16, s0
 80098e2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80098e6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80098ea:	f000 fa53 	bl	8009d94 <floorf>
 80098ee:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80098f2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80098f6:	2d00      	cmp	r5, #0
 80098f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098fc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8009900:	ee17 9a90 	vmov	r9, s15
 8009904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009908:	ee38 8a67 	vsub.f32	s16, s16, s15
 800990c:	dd41      	ble.n	8009992 <__kernel_rem_pio2f+0x1ae>
 800990e:	f104 3cff 	add.w	ip, r4, #4294967295
 8009912:	a908      	add	r1, sp, #32
 8009914:	f1c5 0e08 	rsb	lr, r5, #8
 8009918:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800991c:	fa46 f00e 	asr.w	r0, r6, lr
 8009920:	4481      	add	r9, r0
 8009922:	fa00 f00e 	lsl.w	r0, r0, lr
 8009926:	1a36      	subs	r6, r6, r0
 8009928:	f1c5 0007 	rsb	r0, r5, #7
 800992c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8009930:	4106      	asrs	r6, r0
 8009932:	2e00      	cmp	r6, #0
 8009934:	dd3c      	ble.n	80099b0 <__kernel_rem_pio2f+0x1cc>
 8009936:	f04f 0e00 	mov.w	lr, #0
 800993a:	f109 0901 	add.w	r9, r9, #1
 800993e:	4670      	mov	r0, lr
 8009940:	4574      	cmp	r4, lr
 8009942:	dc68      	bgt.n	8009a16 <__kernel_rem_pio2f+0x232>
 8009944:	2d00      	cmp	r5, #0
 8009946:	dd03      	ble.n	8009950 <__kernel_rem_pio2f+0x16c>
 8009948:	2d01      	cmp	r5, #1
 800994a:	d074      	beq.n	8009a36 <__kernel_rem_pio2f+0x252>
 800994c:	2d02      	cmp	r5, #2
 800994e:	d07d      	beq.n	8009a4c <__kernel_rem_pio2f+0x268>
 8009950:	2e02      	cmp	r6, #2
 8009952:	d12d      	bne.n	80099b0 <__kernel_rem_pio2f+0x1cc>
 8009954:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009958:	ee30 8a48 	vsub.f32	s16, s0, s16
 800995c:	b340      	cbz	r0, 80099b0 <__kernel_rem_pio2f+0x1cc>
 800995e:	4628      	mov	r0, r5
 8009960:	9306      	str	r3, [sp, #24]
 8009962:	f000 f9b1 	bl	8009cc8 <scalbnf>
 8009966:	9b06      	ldr	r3, [sp, #24]
 8009968:	ee38 8a40 	vsub.f32	s16, s16, s0
 800996c:	e020      	b.n	80099b0 <__kernel_rem_pio2f+0x1cc>
 800996e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8009972:	3e01      	subs	r6, #1
 8009974:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800997c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8009980:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009984:	ecac 0a01 	vstmia	ip!, {s0}
 8009988:	ed90 0a00 	vldr	s0, [r0]
 800998c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009990:	e79c      	b.n	80098cc <__kernel_rem_pio2f+0xe8>
 8009992:	d105      	bne.n	80099a0 <__kernel_rem_pio2f+0x1bc>
 8009994:	1e60      	subs	r0, r4, #1
 8009996:	a908      	add	r1, sp, #32
 8009998:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800999c:	11f6      	asrs	r6, r6, #7
 800999e:	e7c8      	b.n	8009932 <__kernel_rem_pio2f+0x14e>
 80099a0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80099a4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80099a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ac:	da31      	bge.n	8009a12 <__kernel_rem_pio2f+0x22e>
 80099ae:	2600      	movs	r6, #0
 80099b0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80099b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099b8:	f040 8098 	bne.w	8009aec <__kernel_rem_pio2f+0x308>
 80099bc:	1e60      	subs	r0, r4, #1
 80099be:	2200      	movs	r2, #0
 80099c0:	4550      	cmp	r0, sl
 80099c2:	da4b      	bge.n	8009a5c <__kernel_rem_pio2f+0x278>
 80099c4:	2a00      	cmp	r2, #0
 80099c6:	d065      	beq.n	8009a94 <__kernel_rem_pio2f+0x2b0>
 80099c8:	3c01      	subs	r4, #1
 80099ca:	ab08      	add	r3, sp, #32
 80099cc:	3d08      	subs	r5, #8
 80099ce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d0f8      	beq.n	80099c8 <__kernel_rem_pio2f+0x1e4>
 80099d6:	4628      	mov	r0, r5
 80099d8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80099dc:	f000 f974 	bl	8009cc8 <scalbnf>
 80099e0:	1c63      	adds	r3, r4, #1
 80099e2:	aa44      	add	r2, sp, #272	@ 0x110
 80099e4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8009ae4 <__kernel_rem_pio2f+0x300>
 80099e8:	0099      	lsls	r1, r3, #2
 80099ea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80099ee:	4623      	mov	r3, r4
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f280 80a9 	bge.w	8009b48 <__kernel_rem_pio2f+0x364>
 80099f6:	4623      	mov	r3, r4
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	f2c0 80c7 	blt.w	8009b8c <__kernel_rem_pio2f+0x3a8>
 80099fe:	aa44      	add	r2, sp, #272	@ 0x110
 8009a00:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8009a04:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8009adc <__kernel_rem_pio2f+0x2f8>
 8009a08:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8009ae8 <__kernel_rem_pio2f+0x304>
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	1ae2      	subs	r2, r4, r3
 8009a10:	e0b1      	b.n	8009b76 <__kernel_rem_pio2f+0x392>
 8009a12:	2602      	movs	r6, #2
 8009a14:	e78f      	b.n	8009936 <__kernel_rem_pio2f+0x152>
 8009a16:	f852 1b04 	ldr.w	r1, [r2], #4
 8009a1a:	b948      	cbnz	r0, 8009a30 <__kernel_rem_pio2f+0x24c>
 8009a1c:	b121      	cbz	r1, 8009a28 <__kernel_rem_pio2f+0x244>
 8009a1e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8009a22:	f842 1c04 	str.w	r1, [r2, #-4]
 8009a26:	2101      	movs	r1, #1
 8009a28:	f10e 0e01 	add.w	lr, lr, #1
 8009a2c:	4608      	mov	r0, r1
 8009a2e:	e787      	b.n	8009940 <__kernel_rem_pio2f+0x15c>
 8009a30:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8009a34:	e7f5      	b.n	8009a22 <__kernel_rem_pio2f+0x23e>
 8009a36:	f104 3cff 	add.w	ip, r4, #4294967295
 8009a3a:	aa08      	add	r2, sp, #32
 8009a3c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8009a40:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009a44:	a908      	add	r1, sp, #32
 8009a46:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8009a4a:	e781      	b.n	8009950 <__kernel_rem_pio2f+0x16c>
 8009a4c:	f104 3cff 	add.w	ip, r4, #4294967295
 8009a50:	aa08      	add	r2, sp, #32
 8009a52:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8009a56:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8009a5a:	e7f3      	b.n	8009a44 <__kernel_rem_pio2f+0x260>
 8009a5c:	a908      	add	r1, sp, #32
 8009a5e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009a62:	3801      	subs	r0, #1
 8009a64:	430a      	orrs	r2, r1
 8009a66:	e7ab      	b.n	80099c0 <__kernel_rem_pio2f+0x1dc>
 8009a68:	3201      	adds	r2, #1
 8009a6a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8009a6e:	2e00      	cmp	r6, #0
 8009a70:	d0fa      	beq.n	8009a68 <__kernel_rem_pio2f+0x284>
 8009a72:	9905      	ldr	r1, [sp, #20]
 8009a74:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8009a78:	eb0d 0001 	add.w	r0, sp, r1
 8009a7c:	18e6      	adds	r6, r4, r3
 8009a7e:	a91c      	add	r1, sp, #112	@ 0x70
 8009a80:	f104 0c01 	add.w	ip, r4, #1
 8009a84:	384c      	subs	r0, #76	@ 0x4c
 8009a86:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8009a8a:	4422      	add	r2, r4
 8009a8c:	4562      	cmp	r2, ip
 8009a8e:	da04      	bge.n	8009a9a <__kernel_rem_pio2f+0x2b6>
 8009a90:	4614      	mov	r4, r2
 8009a92:	e70e      	b.n	80098b2 <__kernel_rem_pio2f+0xce>
 8009a94:	9804      	ldr	r0, [sp, #16]
 8009a96:	2201      	movs	r2, #1
 8009a98:	e7e7      	b.n	8009a6a <__kernel_rem_pio2f+0x286>
 8009a9a:	9903      	ldr	r1, [sp, #12]
 8009a9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009aa0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8009aa4:	9105      	str	r1, [sp, #20]
 8009aa6:	ee07 1a90 	vmov	s15, r1
 8009aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009aae:	2400      	movs	r4, #0
 8009ab0:	ece6 7a01 	vstmia	r6!, {s15}
 8009ab4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8009ae8 <__kernel_rem_pio2f+0x304>
 8009ab8:	46b1      	mov	r9, r6
 8009aba:	455c      	cmp	r4, fp
 8009abc:	dd04      	ble.n	8009ac8 <__kernel_rem_pio2f+0x2e4>
 8009abe:	ece0 7a01 	vstmia	r0!, {s15}
 8009ac2:	f10c 0c01 	add.w	ip, ip, #1
 8009ac6:	e7e1      	b.n	8009a8c <__kernel_rem_pio2f+0x2a8>
 8009ac8:	ecfe 6a01 	vldmia	lr!, {s13}
 8009acc:	ed39 7a01 	vldmdb	r9!, {s14}
 8009ad0:	3401      	adds	r4, #1
 8009ad2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009ad6:	e7f0      	b.n	8009aba <__kernel_rem_pio2f+0x2d6>
 8009ad8:	0800a5d4 	.word	0x0800a5d4
 8009adc:	0800a5a8 	.word	0x0800a5a8
 8009ae0:	43800000 	.word	0x43800000
 8009ae4:	3b800000 	.word	0x3b800000
 8009ae8:	00000000 	.word	0x00000000
 8009aec:	9b02      	ldr	r3, [sp, #8]
 8009aee:	eeb0 0a48 	vmov.f32	s0, s16
 8009af2:	eba3 0008 	sub.w	r0, r3, r8
 8009af6:	f000 f8e7 	bl	8009cc8 <scalbnf>
 8009afa:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8009ae0 <__kernel_rem_pio2f+0x2fc>
 8009afe:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b06:	db19      	blt.n	8009b3c <__kernel_rem_pio2f+0x358>
 8009b08:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8009ae4 <__kernel_rem_pio2f+0x300>
 8009b0c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009b10:	aa08      	add	r2, sp, #32
 8009b12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009b16:	3508      	adds	r5, #8
 8009b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b1c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009b20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009b24:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009b28:	ee10 3a10 	vmov	r3, s0
 8009b2c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009b30:	ee17 3a90 	vmov	r3, s15
 8009b34:	3401      	adds	r4, #1
 8009b36:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009b3a:	e74c      	b.n	80099d6 <__kernel_rem_pio2f+0x1f2>
 8009b3c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009b40:	aa08      	add	r2, sp, #32
 8009b42:	ee10 3a10 	vmov	r3, s0
 8009b46:	e7f6      	b.n	8009b36 <__kernel_rem_pio2f+0x352>
 8009b48:	a808      	add	r0, sp, #32
 8009b4a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8009b4e:	9001      	str	r0, [sp, #4]
 8009b50:	ee07 0a90 	vmov	s15, r0
 8009b54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009b5e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009b62:	ed62 7a01 	vstmdb	r2!, {s15}
 8009b66:	e743      	b.n	80099f0 <__kernel_rem_pio2f+0x20c>
 8009b68:	ecfc 6a01 	vldmia	ip!, {s13}
 8009b6c:	ecb5 7a01 	vldmia	r5!, {s14}
 8009b70:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009b74:	3001      	adds	r0, #1
 8009b76:	4550      	cmp	r0, sl
 8009b78:	dc01      	bgt.n	8009b7e <__kernel_rem_pio2f+0x39a>
 8009b7a:	4282      	cmp	r2, r0
 8009b7c:	daf4      	bge.n	8009b68 <__kernel_rem_pio2f+0x384>
 8009b7e:	a858      	add	r0, sp, #352	@ 0x160
 8009b80:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009b84:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	e735      	b.n	80099f8 <__kernel_rem_pio2f+0x214>
 8009b8c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	dc09      	bgt.n	8009ba6 <__kernel_rem_pio2f+0x3c2>
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	dc2b      	bgt.n	8009bee <__kernel_rem_pio2f+0x40a>
 8009b96:	d044      	beq.n	8009c22 <__kernel_rem_pio2f+0x43e>
 8009b98:	f009 0007 	and.w	r0, r9, #7
 8009b9c:	b059      	add	sp, #356	@ 0x164
 8009b9e:	ecbd 8b04 	vpop	{d8-d9}
 8009ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8009ba8:	2b03      	cmp	r3, #3
 8009baa:	d1f5      	bne.n	8009b98 <__kernel_rem_pio2f+0x3b4>
 8009bac:	aa30      	add	r2, sp, #192	@ 0xc0
 8009bae:	1f0b      	subs	r3, r1, #4
 8009bb0:	4413      	add	r3, r2
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	f1a2 0204 	sub.w	r2, r2, #4
 8009bbc:	dc52      	bgt.n	8009c64 <__kernel_rem_pio2f+0x480>
 8009bbe:	4622      	mov	r2, r4
 8009bc0:	2a01      	cmp	r2, #1
 8009bc2:	f1a3 0304 	sub.w	r3, r3, #4
 8009bc6:	dc5d      	bgt.n	8009c84 <__kernel_rem_pio2f+0x4a0>
 8009bc8:	ab30      	add	r3, sp, #192	@ 0xc0
 8009bca:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8009ae8 <__kernel_rem_pio2f+0x304>
 8009bce:	440b      	add	r3, r1
 8009bd0:	2c01      	cmp	r4, #1
 8009bd2:	dc67      	bgt.n	8009ca4 <__kernel_rem_pio2f+0x4c0>
 8009bd4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8009bd8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8009bdc:	2e00      	cmp	r6, #0
 8009bde:	d167      	bne.n	8009cb0 <__kernel_rem_pio2f+0x4cc>
 8009be0:	edc7 6a00 	vstr	s13, [r7]
 8009be4:	ed87 7a01 	vstr	s14, [r7, #4]
 8009be8:	edc7 7a02 	vstr	s15, [r7, #8]
 8009bec:	e7d4      	b.n	8009b98 <__kernel_rem_pio2f+0x3b4>
 8009bee:	ab30      	add	r3, sp, #192	@ 0xc0
 8009bf0:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8009ae8 <__kernel_rem_pio2f+0x304>
 8009bf4:	440b      	add	r3, r1
 8009bf6:	4622      	mov	r2, r4
 8009bf8:	2a00      	cmp	r2, #0
 8009bfa:	da24      	bge.n	8009c46 <__kernel_rem_pio2f+0x462>
 8009bfc:	b34e      	cbz	r6, 8009c52 <__kernel_rem_pio2f+0x46e>
 8009bfe:	eef1 7a47 	vneg.f32	s15, s14
 8009c02:	edc7 7a00 	vstr	s15, [r7]
 8009c06:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8009c0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c0e:	aa31      	add	r2, sp, #196	@ 0xc4
 8009c10:	2301      	movs	r3, #1
 8009c12:	429c      	cmp	r4, r3
 8009c14:	da20      	bge.n	8009c58 <__kernel_rem_pio2f+0x474>
 8009c16:	b10e      	cbz	r6, 8009c1c <__kernel_rem_pio2f+0x438>
 8009c18:	eef1 7a67 	vneg.f32	s15, s15
 8009c1c:	edc7 7a01 	vstr	s15, [r7, #4]
 8009c20:	e7ba      	b.n	8009b98 <__kernel_rem_pio2f+0x3b4>
 8009c22:	ab30      	add	r3, sp, #192	@ 0xc0
 8009c24:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8009ae8 <__kernel_rem_pio2f+0x304>
 8009c28:	440b      	add	r3, r1
 8009c2a:	2c00      	cmp	r4, #0
 8009c2c:	da05      	bge.n	8009c3a <__kernel_rem_pio2f+0x456>
 8009c2e:	b10e      	cbz	r6, 8009c34 <__kernel_rem_pio2f+0x450>
 8009c30:	eef1 7a67 	vneg.f32	s15, s15
 8009c34:	edc7 7a00 	vstr	s15, [r7]
 8009c38:	e7ae      	b.n	8009b98 <__kernel_rem_pio2f+0x3b4>
 8009c3a:	ed33 7a01 	vldmdb	r3!, {s14}
 8009c3e:	3c01      	subs	r4, #1
 8009c40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c44:	e7f1      	b.n	8009c2a <__kernel_rem_pio2f+0x446>
 8009c46:	ed73 7a01 	vldmdb	r3!, {s15}
 8009c4a:	3a01      	subs	r2, #1
 8009c4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c50:	e7d2      	b.n	8009bf8 <__kernel_rem_pio2f+0x414>
 8009c52:	eef0 7a47 	vmov.f32	s15, s14
 8009c56:	e7d4      	b.n	8009c02 <__kernel_rem_pio2f+0x41e>
 8009c58:	ecb2 7a01 	vldmia	r2!, {s14}
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c62:	e7d6      	b.n	8009c12 <__kernel_rem_pio2f+0x42e>
 8009c64:	edd2 7a00 	vldr	s15, [r2]
 8009c68:	edd2 6a01 	vldr	s13, [r2, #4]
 8009c6c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009c70:	3801      	subs	r0, #1
 8009c72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c76:	ed82 7a00 	vstr	s14, [r2]
 8009c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c7e:	edc2 7a01 	vstr	s15, [r2, #4]
 8009c82:	e798      	b.n	8009bb6 <__kernel_rem_pio2f+0x3d2>
 8009c84:	edd3 7a00 	vldr	s15, [r3]
 8009c88:	edd3 6a01 	vldr	s13, [r3, #4]
 8009c8c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009c90:	3a01      	subs	r2, #1
 8009c92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c96:	ed83 7a00 	vstr	s14, [r3]
 8009c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c9e:	edc3 7a01 	vstr	s15, [r3, #4]
 8009ca2:	e78d      	b.n	8009bc0 <__kernel_rem_pio2f+0x3dc>
 8009ca4:	ed33 7a01 	vldmdb	r3!, {s14}
 8009ca8:	3c01      	subs	r4, #1
 8009caa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009cae:	e78f      	b.n	8009bd0 <__kernel_rem_pio2f+0x3ec>
 8009cb0:	eef1 6a66 	vneg.f32	s13, s13
 8009cb4:	eeb1 7a47 	vneg.f32	s14, s14
 8009cb8:	edc7 6a00 	vstr	s13, [r7]
 8009cbc:	ed87 7a01 	vstr	s14, [r7, #4]
 8009cc0:	eef1 7a67 	vneg.f32	s15, s15
 8009cc4:	e790      	b.n	8009be8 <__kernel_rem_pio2f+0x404>
 8009cc6:	bf00      	nop

08009cc8 <scalbnf>:
 8009cc8:	ee10 3a10 	vmov	r3, s0
 8009ccc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009cd0:	d02b      	beq.n	8009d2a <scalbnf+0x62>
 8009cd2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009cd6:	d302      	bcc.n	8009cde <scalbnf+0x16>
 8009cd8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009cdc:	4770      	bx	lr
 8009cde:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009ce2:	d123      	bne.n	8009d2c <scalbnf+0x64>
 8009ce4:	4b24      	ldr	r3, [pc, #144]	@ (8009d78 <scalbnf+0xb0>)
 8009ce6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8009d7c <scalbnf+0xb4>
 8009cea:	4298      	cmp	r0, r3
 8009cec:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009cf0:	db17      	blt.n	8009d22 <scalbnf+0x5a>
 8009cf2:	ee10 3a10 	vmov	r3, s0
 8009cf6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009cfa:	3a19      	subs	r2, #25
 8009cfc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009d00:	4288      	cmp	r0, r1
 8009d02:	dd15      	ble.n	8009d30 <scalbnf+0x68>
 8009d04:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8009d80 <scalbnf+0xb8>
 8009d08:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8009d84 <scalbnf+0xbc>
 8009d0c:	ee10 3a10 	vmov	r3, s0
 8009d10:	eeb0 7a67 	vmov.f32	s14, s15
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	bfb8      	it	lt
 8009d18:	eef0 7a66 	vmovlt.f32	s15, s13
 8009d1c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8009d20:	4770      	bx	lr
 8009d22:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009d88 <scalbnf+0xc0>
 8009d26:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009d2a:	4770      	bx	lr
 8009d2c:	0dd2      	lsrs	r2, r2, #23
 8009d2e:	e7e5      	b.n	8009cfc <scalbnf+0x34>
 8009d30:	4410      	add	r0, r2
 8009d32:	28fe      	cmp	r0, #254	@ 0xfe
 8009d34:	dce6      	bgt.n	8009d04 <scalbnf+0x3c>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	dd06      	ble.n	8009d48 <scalbnf+0x80>
 8009d3a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009d3e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009d42:	ee00 3a10 	vmov	s0, r3
 8009d46:	4770      	bx	lr
 8009d48:	f110 0f16 	cmn.w	r0, #22
 8009d4c:	da09      	bge.n	8009d62 <scalbnf+0x9a>
 8009d4e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8009d88 <scalbnf+0xc0>
 8009d52:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8009d8c <scalbnf+0xc4>
 8009d56:	ee10 3a10 	vmov	r3, s0
 8009d5a:	eeb0 7a67 	vmov.f32	s14, s15
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	e7d9      	b.n	8009d16 <scalbnf+0x4e>
 8009d62:	3019      	adds	r0, #25
 8009d64:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009d68:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009d6c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009d90 <scalbnf+0xc8>
 8009d70:	ee07 3a90 	vmov	s15, r3
 8009d74:	e7d7      	b.n	8009d26 <scalbnf+0x5e>
 8009d76:	bf00      	nop
 8009d78:	ffff3cb0 	.word	0xffff3cb0
 8009d7c:	4c000000 	.word	0x4c000000
 8009d80:	7149f2ca 	.word	0x7149f2ca
 8009d84:	f149f2ca 	.word	0xf149f2ca
 8009d88:	0da24260 	.word	0x0da24260
 8009d8c:	8da24260 	.word	0x8da24260
 8009d90:	33000000 	.word	0x33000000

08009d94 <floorf>:
 8009d94:	ee10 3a10 	vmov	r3, s0
 8009d98:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009d9c:	3a7f      	subs	r2, #127	@ 0x7f
 8009d9e:	2a16      	cmp	r2, #22
 8009da0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009da4:	dc2b      	bgt.n	8009dfe <floorf+0x6a>
 8009da6:	2a00      	cmp	r2, #0
 8009da8:	da12      	bge.n	8009dd0 <floorf+0x3c>
 8009daa:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009e10 <floorf+0x7c>
 8009dae:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009db2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dba:	dd06      	ble.n	8009dca <floorf+0x36>
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	da24      	bge.n	8009e0a <floorf+0x76>
 8009dc0:	2900      	cmp	r1, #0
 8009dc2:	4b14      	ldr	r3, [pc, #80]	@ (8009e14 <floorf+0x80>)
 8009dc4:	bf08      	it	eq
 8009dc6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8009dca:	ee00 3a10 	vmov	s0, r3
 8009dce:	4770      	bx	lr
 8009dd0:	4911      	ldr	r1, [pc, #68]	@ (8009e18 <floorf+0x84>)
 8009dd2:	4111      	asrs	r1, r2
 8009dd4:	420b      	tst	r3, r1
 8009dd6:	d0fa      	beq.n	8009dce <floorf+0x3a>
 8009dd8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8009e10 <floorf+0x7c>
 8009ddc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009de0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009de8:	ddef      	ble.n	8009dca <floorf+0x36>
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	bfbe      	ittt	lt
 8009dee:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8009df2:	fa40 f202 	asrlt.w	r2, r0, r2
 8009df6:	189b      	addlt	r3, r3, r2
 8009df8:	ea23 0301 	bic.w	r3, r3, r1
 8009dfc:	e7e5      	b.n	8009dca <floorf+0x36>
 8009dfe:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8009e02:	d3e4      	bcc.n	8009dce <floorf+0x3a>
 8009e04:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009e08:	4770      	bx	lr
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	e7dd      	b.n	8009dca <floorf+0x36>
 8009e0e:	bf00      	nop
 8009e10:	7149f2ca 	.word	0x7149f2ca
 8009e14:	bf800000 	.word	0xbf800000
 8009e18:	007fffff 	.word	0x007fffff

08009e1c <_init>:
 8009e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1e:	bf00      	nop
 8009e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e22:	bc08      	pop	{r3}
 8009e24:	469e      	mov	lr, r3
 8009e26:	4770      	bx	lr

08009e28 <_fini>:
 8009e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e2a:	bf00      	nop
 8009e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e2e:	bc08      	pop	{r3}
 8009e30:	469e      	mov	lr, r3
 8009e32:	4770      	bx	lr
